!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACTIVE_PARAMETER_SETS	SEI.h	/^    ACTIVE_PARAMETER_SETS                = 129,$/;"	e	enum:SEI::PayloadType
ADAPTIVE_QP_SELECTION	TypeDef.h	108;"	d
ADAPT_SR_SCALE	CommonDef.h	/^static const Int ADAPT_SR_SCALE =                                   1; \/\/\/< division factor for adaptive search range$/;"	v
ALTERNATIVE_TRANSFER_CHARACTERISTICS	SEI.h	/^    ALTERNATIVE_TRANSFER_CHARACTERISTICS = 147,$/;"	e	enum:SEI::PayloadType
AMBIENT_VIEWING_ENVIRONMENT	SEI.h	/^    AMBIENT_VIEWING_ENVIRONMENT          = 148, \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
AMP_ENC_SPEEDUP	TypeDef.h	110;"	d
AMP_MRG	TypeDef.h	112;"	d
AMVPInfo	TComMotionInfo.h	/^} AMVPInfo;$/;"	t	typeref:struct:_AMVPInfo
AMVP_DECIMATION_FACTOR	CommonDef.h	/^static const Int AMVP_DECIMATION_FACTOR =                           4;$/;"	v
AMVP_MAX_NUM_CANDS	CommonDef.h	/^static const Int AMVP_MAX_NUM_CANDS =                               2; \/\/\/< AMVP: advanced motion vector prediction - max number of final candidates$/;"	v
ANNOTATED_REGIONS	SEI.h	/^    ANNOTATED_REGIONS                    = 202,$/;"	e	enum:SEI::PayloadType
ARL_C_PRECISION	CommonDef.h	/^static const Int ARL_C_PRECISION =                                  7; \/\/\/< G382: 7-bit arithmetic precision$/;"	v
AccessUnit	AccessUnit.h	/^class AccessUnit : public std::list<NALUnitEBSP*> \/\/ NOTE: Should not inherit from STL.$/;"	c
ActiveAreaInfo	TypeDef.h	/^  struct ActiveAreaInfo$/;"	s	struct:TComSEIFisheyeVideoInfo
AnnotatedRegionHeader	SEI.h	/^    AnnotatedRegionHeader() : m_cancelFlag(true), m_receivedSettingsOnce(false) { }$/;"	f	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
AnnotatedRegionHeader	SEI.h	/^  struct AnnotatedRegionHeader$/;"	s	class:SEIAnnotatedRegions
AnnotatedRegionLabel	SEI.h	/^    AnnotatedRegionLabel() : labelValid(false) { }$/;"	f	struct:SEIAnnotatedRegions::AnnotatedRegionLabel
AnnotatedRegionLabel	SEI.h	/^  struct AnnotatedRegionLabel$/;"	s	class:SEIAnnotatedRegions
AnnotatedRegionLabelIndex	SEI.h	/^  typedef UInt AnnotatedRegionLabelIndex;$/;"	t	class:SEIAnnotatedRegions
AnnotatedRegionObject	SEI.h	/^    AnnotatedRegionObject() :$/;"	f	struct:SEIAnnotatedRegions::AnnotatedRegionObject
AnnotatedRegionObject	SEI.h	/^  struct AnnotatedRegionObject$/;"	s	class:SEIAnnotatedRegions
AnnotatedRegionObjectIndex	SEI.h	/^  typedef UInt AnnotatedRegionObjectIndex;$/;"	t	class:SEIAnnotatedRegions
BIT0	SEIFilmGrainSynthesizer.h	104;"	d
BIT_DEPTH_8	SEIFilmGrainSynthesizer.h	70;"	d
BIT_DEPTH_8	SEIFilmGrainSynthesizer.h	91;"	d
BLENDING_MODE_VALUE	SEIFilmGrainSynthesizer.h	56;"	d
BLK_16	SEIFilmGrainSynthesizer.h	73;"	d
BLK_16	SEIFilmGrainSynthesizer.h	94;"	d
BLK_8	SEIFilmGrainSynthesizer.h	72;"	d
BLK_8	SEIFilmGrainSynthesizer.h	93;"	d
BSLICE_CHROMA_ABS_CONTEXT	ContextTables.h	410;"	d
BSLICE_CHROMA_CBF_CONTEXT	ContextTables.h	301;"	d
BSLICE_CHROMA_LAST_POSITION_CONTEXT	ContextTables.h	335;"	d
BSLICE_CHROMA_ONE_CONTEXT	ContextTables.h	406;"	d
BSLICE_CHROMA_SIGNIFICANCE_CONTEXT	ContextTables.h	377;"	d
BSLICE_LUMA_ABS_CONTEXT	ContextTables.h	401;"	d
BSLICE_LUMA_CBF_CONTEXT	ContextTables.h	297;"	d
BSLICE_LUMA_LAST_POSITION_CONTEXT	ContextTables.h	331;"	d
BSLICE_LUMA_ONE_CONTEXT	ContextTables.h	397;"	d
BSLICE_LUMA_SIGNIFICANCE_CONTEXT	ContextTables.h	372;"	d
BUFFERING_PERIOD	SEI.h	/^    BUFFERING_PERIOD                     = 0,$/;"	e	enum:SEI::PayloadType
B_SLICE	TypeDef.h	/^  B_SLICE               = 0,$/;"	e	enum:SliceType
BitDepths	TypeDef.h	/^struct BitDepths$/;"	s
Bool	TypeDef.h	/^typedef       bool                Bool;$/;"	t
C1FLAG_NUMBER	CommonDef.h	/^static const Int C1FLAG_NUMBER =                                    8; \/\/ maximum number of largerThan1 flag coded in one chunk:  16 in HM5$/;"	v
C2FLAG_NUMBER	CommonDef.h	/^static const Int C2FLAG_NUMBER =                                    1; \/\/ maximum number of largerThan2 flag coded in one chunk:  16 in HM5$/;"	v
CABAC_INIT_PRESENT_FLAG	CommonDef.h	/^static const Int CABAC_INIT_PRESENT_FLAG =                          1;$/;"	v
CBFContextStartTable	TComChromaFormat.h	/^static const UInt CBFContextStartTable            [MAX_NUM_CHANNEL_TYPE] = {FIRST_CBF_CTX_LUMA,      FIRST_CBF_CTX_CHROMA     };$/;"	v
CHANNEL_TYPE_CHROMA	TypeDef.h	/^  CHANNEL_TYPE_CHROMA  = 1,$/;"	e	enum:ChannelType
CHANNEL_TYPE_LUMA	TypeDef.h	/^  CHANNEL_TYPE_LUMA    = 0,$/;"	e	enum:ChannelType
CHROMA_400	TypeDef.h	/^  CHROMA_400        = 0,$/;"	e	enum:ChromaFormat
CHROMA_420	TypeDef.h	/^  CHROMA_420        = 1,$/;"	e	enum:ChromaFormat
CHROMA_422	TypeDef.h	/^  CHROMA_422        = 2,$/;"	e	enum:ChromaFormat
CHROMA_444	TypeDef.h	/^  CHROMA_444        = 3,$/;"	e	enum:ChromaFormat
CHROMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS	CommonDef.h	/^static const Int CHROMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS = 8;$/;"	v
CHROMA_RESAMPLING_FILTER_HINT	SEI.h	/^    CHROMA_RESAMPLING_FILTER_HINT        = 140,$/;"	e	enum:SEI::PayloadType
CI_CHROMA_INTRA	TypeDef.h	/^  CI_CHROMA_INTRA,      \/\/\/< chroma intra index$/;"	e	enum:CI_IDX
CI_CURR_BEST	TypeDef.h	/^  CI_CURR_BEST = 0,     \/\/\/< best mode index$/;"	e	enum:CI_IDX
CI_IDX	TypeDef.h	/^enum CI_IDX$/;"	g
CI_NEXT_BEST	TypeDef.h	/^  CI_NEXT_BEST,         \/\/\/< next best index$/;"	e	enum:CI_IDX
CI_NUM	TypeDef.h	/^  CI_NUM,               \/\/\/< total number$/;"	e	enum:CI_IDX
CI_QT_TRAFO_ROOT	TypeDef.h	/^  CI_QT_TRAFO_ROOT,$/;"	e	enum:CI_IDX
CI_QT_TRAFO_TEST	TypeDef.h	/^  CI_QT_TRAFO_TEST,$/;"	e	enum:CI_IDX
CI_TEMP_BEST	TypeDef.h	/^  CI_TEMP_BEST,         \/\/\/< temporal index$/;"	e	enum:CI_IDX
CLIP3	SEIFilmGrainSynthesizer.h	100;"	d
CNU	ContextTables.h	163;"	d
CODED_REGION_COMPLETION	SEI.h	/^    CODED_REGION_COMPLETION              = 146, \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
CODING_STATS_NUM_SUBCLASSES	TComCodingStatistics.h	/^static const UInt CODING_STATS_NUM_SUBCLASSES=CODING_STATS_NUM_WIDTHS*(1+MAX_NUM_COMPONENT+MAX_NUM_CHANNEL_TYPE);$/;"	v
CODING_STATS_NUM_WIDTHS	TComCodingStatistics.h	/^static const UInt CODING_STATS_NUM_WIDTHS=7;$/;"	v
COEFF_SCAN_GROUP_TYPE	TypeDef.h	/^enum COEFF_SCAN_GROUP_TYPE$/;"	g
COEFF_SCAN_TYPE	TypeDef.h	/^enum COEFF_SCAN_TYPE$/;"	g
COEF_REMAIN_BIN_REDUCTION	CommonDef.h	/^static const Int COEF_REMAIN_BIN_REDUCTION =                        3; \/\/\/< indicates the level at which the VLC transitions from Golomb-Rice to TU+EG(k)$/;"	v
COLOUR_OFFSET_CB	SEIFilmGrainSynthesizer.h	77;"	d
COLOUR_OFFSET_CB	SEIFilmGrainSynthesizer.h	98;"	d
COLOUR_OFFSET_CR	SEIFilmGrainSynthesizer.h	76;"	d
COLOUR_OFFSET_CR	SEIFilmGrainSynthesizer.h	97;"	d
COLOUR_OFFSET_LUMA	SEIFilmGrainSynthesizer.h	75;"	d
COLOUR_OFFSET_LUMA	SEIFilmGrainSynthesizer.h	96;"	d
COLOUR_REMAPPING_INFO	SEI.h	/^    COLOUR_REMAPPING_INFO                = 142,$/;"	e	enum:SEI::PayloadType
COMPONENT_Cb	TypeDef.h	/^  COMPONENT_Cb      = 1,$/;"	e	enum:ComponentID
COMPONENT_Cr	TypeDef.h	/^  COMPONENT_Cr      = 2,$/;"	e	enum:ComponentID
COMPONENT_Y	TypeDef.h	/^  COMPONENT_Y       = 0,$/;"	e	enum:ComponentID
CONTENT_COLOUR_VOLUME	SEI.h	/^    CONTENT_COLOUR_VOLUME                = 149, $/;"	e	enum:SEI::PayloadType
CONTENT_LIGHT_LEVEL_INFO	SEI.h	/^    CONTENT_LIGHT_LEVEL_INFO             = 144, \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
CONTEXT_NUMBER_OF_TYPES	TypeDef.h	/^  CONTEXT_NUMBER_OF_TYPES = 4$/;"	e	enum:SignificanceMapContextType
CONTEXT_STATE_BITS	CommonDef.h	/^static const Int CONTEXT_STATE_BITS =                              6 ;$/;"	v
CONTEXT_TYPE_4x4	TypeDef.h	/^  CONTEXT_TYPE_4x4    = 0,$/;"	e	enum:SignificanceMapContextType
CONTEXT_TYPE_8x8	TypeDef.h	/^  CONTEXT_TYPE_8x8    = 1,$/;"	e	enum:SignificanceMapContextType
CONTEXT_TYPE_NxN	TypeDef.h	/^  CONTEXT_TYPE_NxN    = 2,$/;"	e	enum:SignificanceMapContextType
CONTEXT_TYPE_SINGLE	TypeDef.h	/^  CONTEXT_TYPE_SINGLE = 3,$/;"	e	enum:SignificanceMapContextType
COST_LOSSLESS_CODING	TypeDef.h	/^  COST_LOSSLESS_CODING             = 2,$/;"	e	enum:CostMode
COST_MIXED_LOSSLESS_LOSSY_CODING	TypeDef.h	/^  COST_MIXED_LOSSLESS_LOSSY_CODING = 3$/;"	e	enum:CostMode
COST_SEQUENCE_LEVEL_LOSSLESS	TypeDef.h	/^  COST_SEQUENCE_LEVEL_LOSSLESS     = 1,$/;"	e	enum:CostMode
COST_STANDARD_LOSSY	TypeDef.h	/^  COST_STANDARD_LOSSY              = 0,$/;"	e	enum:CostMode
COUNTER_END	TComRom.h	139;"	d
COUNTER_START	TComRom.h	138;"	d
CRIlut	SEI.h	/^  struct CRIlut$/;"	s	class:SEIColourRemappingInfo
CUBEMAP_PROJECTION	SEI.h	/^    CUBEMAP_PROJECTION                   = 151,$/;"	e	enum:SEI::PayloadType
CUIsFromSameSlice	TComDataCU.h	/^  Bool          CUIsFromSameSlice             ( const TComDataCU *pCU \/* Can be NULL *\/ ) const            { return ( pCU!=NULL && pCU->getSlice()->getSliceCurStartCtuTsAddr() == getSlice()->getSliceCurStartCtuTsAddr() ); }$/;"	f	class:TComDataCU
CUIsFromSameSliceAndTile	TComDataCU.cpp	/^Bool TComDataCU::CUIsFromSameSliceAndTile    ( const TComDataCU *pCU \/* Can be NULL *\/) const$/;"	f	class:TComDataCU
CUIsFromSameSliceTileAndWavefrontRow	TComDataCU.cpp	/^Bool TComDataCU::CUIsFromSameSliceTileAndWavefrontRow( const TComDataCU *pCU \/* Can be NULL *\/) const$/;"	f	class:TComDataCU
CUIsFromSameTile	TComDataCU.cpp	/^Bool TComDataCU::CUIsFromSameTile            ( const TComDataCU *pCU \/* Can be NULL *\/) const$/;"	f	class:TComDataCU
CU_DQP_EG_k	CommonDef.h	/^static const Int CU_DQP_EG_k =                                      0; \/\/\/< expgolomb order$/;"	v
CU_DQP_TU_CMAX	CommonDef.h	/^static const Int CU_DQP_TU_CMAX =                                   5; \/\/\/< max number bins for truncated unary$/;"	v
CbOffset	TComSlice.h	/^      Int CbOffset;$/;"	m	struct:ChromaQpAdj::__anon5::__anon6
ChannelType	TypeDef.h	/^enum ChannelType$/;"	g
Check3	CommonDef.h	/^template <typename T> inline Void Check3( T minVal, T maxVal, T a)$/;"	f
ChromaFormat	TypeDef.h	/^enum ChromaFormat$/;"	g
ChromaQpAdj	TComSlice.h	/^struct ChromaQpAdj$/;"	s
Clip3	CommonDef.h	/^template <typename T> inline T Clip3 (const T minVal, const T maxVal, const T a) { return std::min<T> (std::max<T> (minVal, a) , maxVal); }  \/\/\/< general min\/max clip$/;"	f
ClipBD	CommonDef.h	/^template <typename T> inline T ClipBD(const T x, const Int bitDepth)             { return Clip3(T(0), T((1 << bitDepth)-1), x);           }$/;"	f
CompModel	SEI.h	/^  struct CompModel$/;"	s	class:SEIFilmGrainCharacteristics
CompModelIntensityValues	SEI.h	/^  struct CompModelIntensityValues$/;"	s	class:SEIFilmGrainCharacteristics
ComponentID	TypeDef.h	/^enum ComponentID$/;"	g
ContextModel	ContextModel.h	/^  ContextModel  ()                        { m_ucState = 0; m_binsCoded = 0; }$/;"	f	class:ContextModel
ContextModel	ContextModel.h	/^class ContextModel$/;"	c
ContextModel3DBuffer	ContextModel3DBuffer.cpp	/^ContextModel3DBuffer::ContextModel3DBuffer( UInt uiSizeZ, UInt uiSizeY, UInt uiSizeX, ContextModel *basePtr, Int &count )$/;"	f	class:ContextModel3DBuffer
ContextModel3DBuffer	ContextModel3DBuffer.h	/^class ContextModel3DBuffer$/;"	c
CostMode	TypeDef.h	/^enum CostMode$/;"	g
CrOffset	TComSlice.h	/^      Int CrOffset;$/;"	m	struct:ChromaQpAdj::__anon5::__anon6
DATA_ALIGN	CommonDef.h	270;"	d
DATA_BASE_SIZE	SEIFilmGrainSynthesizer.h	80;"	d
DC_IDX	CommonDef.h	/^static const Int DC_IDX =                                           1; \/\/\/< index for intra DC mode$/;"	v
DEBLOCK_SMALLEST_BLOCK	TComLoopFilter.h	47;"	d
DEBUG_CABAC_BINS	TypeDef.h	58;"	d
DEBUG_ENCODER_SEARCH_BINS	TypeDef.h	57;"	d
DEBUG_INTRA_SEARCH_COSTS	TypeDef.h	59;"	d
DEBUG_STRING	TypeDef.h	56;"	d
DEBUG_STRING_APPEND	TypeDef.h	170;"	d
DEBUG_STRING_APPEND	TypeDef.h	182;"	d
DEBUG_STRING_CHANNEL_CONDITION	TypeDef.h	172;"	d
DEBUG_STRING_CHANNEL_CONDITION	TypeDef.h	184;"	d
DEBUG_STRING_FN_DECLARE	TypeDef.h	166;"	d
DEBUG_STRING_FN_DECLARE	TypeDef.h	178;"	d
DEBUG_STRING_FN_DECLAREP	TypeDef.h	167;"	d
DEBUG_STRING_FN_DECLAREP	TypeDef.h	179;"	d
DEBUG_STRING_NEW	TypeDef.h	168;"	d
DEBUG_STRING_NEW	TypeDef.h	180;"	d
DEBUG_STRING_OUTPUT	TypeDef.h	169;"	d
DEBUG_STRING_OUTPUT	TypeDef.h	181;"	d
DEBUG_STRING_PASS_INTO	TypeDef.h	164;"	d
DEBUG_STRING_PASS_INTO	TypeDef.h	176;"	d
DEBUG_STRING_PASS_INTO_OPTIONAL	TypeDef.h	165;"	d
DEBUG_STRING_PASS_INTO_OPTIONAL	TypeDef.h	177;"	d
DEBUG_STRING_SWAP	TypeDef.h	171;"	d
DEBUG_STRING_SWAP	TypeDef.h	183;"	d
DEBUG_TRANSFORM_AND_QUANTISE	TypeDef.h	60;"	d
DECODED_PICTURE_HASH	SEI.h	/^    DECODED_PICTURE_HASH                 = 132,$/;"	e	enum:SEI::PayloadType
DECODER_CHECK_SUBSTREAM_AND_SLICE_TRAILING_BYTES	TypeDef.h	89;"	d
DECODING_UNIT_INFO	SEI.h	/^    DECODING_UNIT_INFO                   = 130,$/;"	e	enum:SEI::PayloadType
DEC_NUH_TRACE	TypeDef.h	75;"	d
DEFAULT_HORZ_CUT_OFF_FREQUENCY	SEIFilmGrainSynthesizer.h	60;"	d
DEFAULT_INTRA_TC_OFFSET	TComLoopFilter.cpp	53;"	d	file:
DEFINE_DCT16x16_MATRIX	TComRom.cpp	396;"	d	file:
DEFINE_DCT16x16_MATRIX	TComRom.cpp	526;"	d	file:
DEFINE_DCT32x32_MATRIX	TComRom.cpp	416;"	d	file:
DEFINE_DCT32x32_MATRIX	TComRom.cpp	527;"	d	file:
DEFINE_DCT4x4_MATRIX	TComRom.cpp	376;"	d	file:
DEFINE_DCT4x4_MATRIX	TComRom.cpp	524;"	d	file:
DEFINE_DCT8x8_MATRIX	TComRom.cpp	384;"	d	file:
DEFINE_DCT8x8_MATRIX	TComRom.cpp	525;"	d	file:
DEFINE_DST4x4_MATRIX	TComRom.cpp	368;"	d	file:
DEFINE_DST4x4_MATRIX	TComRom.cpp	523;"	d	file:
DEINTERLACE_FIELD_IDENTIFICATION	SEI.h	/^    DEINTERLACE_FIELD_IDENTIFICATION     = 143, \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
DEPENDENT_RAP_INDICATION	SEI.h	/^    DEPENDENT_RAP_INDICATION             = 145, \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
DF_DEFAULT	TypeDef.h	/^  DF_DEFAULT         = 0,$/;"	e	enum:DFunc
DF_HADS	TypeDef.h	/^  DF_HADS            = 22,     \/\/\/< general size Hadamard with step$/;"	e	enum:DFunc
DF_HADS16	TypeDef.h	/^  DF_HADS16          = 25,     \/\/\/<  16xM HAD with step$/;"	e	enum:DFunc
DF_HADS16N	TypeDef.h	/^  DF_HADS16N         = 28,     \/\/\/< 16NxM HAD with step$/;"	e	enum:DFunc
DF_HADS32	TypeDef.h	/^  DF_HADS32          = 26,     \/\/\/<  32xM HAD with step$/;"	e	enum:DFunc
DF_HADS4	TypeDef.h	/^  DF_HADS4           = 23,     \/\/\/<   4xM HAD with step$/;"	e	enum:DFunc
DF_HADS64	TypeDef.h	/^  DF_HADS64          = 27,     \/\/\/<  64xM HAD with step$/;"	e	enum:DFunc
DF_HADS8	TypeDef.h	/^  DF_HADS8           = 24,     \/\/\/<   8xM HAD with step$/;"	e	enum:DFunc
DF_SAD	TypeDef.h	/^  DF_SAD             = 8,      \/\/\/< general size SAD$/;"	e	enum:DFunc
DF_SAD12	TypeDef.h	/^  DF_SAD12           = 43,$/;"	e	enum:DFunc
DF_SAD16	TypeDef.h	/^  DF_SAD16           = 11,     \/\/\/<  16xM SAD$/;"	e	enum:DFunc
DF_SAD16N	TypeDef.h	/^  DF_SAD16N          = 14,     \/\/\/< 16NxM SAD$/;"	e	enum:DFunc
DF_SAD24	TypeDef.h	/^  DF_SAD24           = 44,$/;"	e	enum:DFunc
DF_SAD32	TypeDef.h	/^  DF_SAD32           = 12,     \/\/\/<  32xM SAD$/;"	e	enum:DFunc
DF_SAD4	TypeDef.h	/^  DF_SAD4            = 9,      \/\/\/<   4xM SAD$/;"	e	enum:DFunc
DF_SAD48	TypeDef.h	/^  DF_SAD48           = 45,$/;"	e	enum:DFunc
DF_SAD64	TypeDef.h	/^  DF_SAD64           = 13,     \/\/\/<  64xM SAD$/;"	e	enum:DFunc
DF_SAD8	TypeDef.h	/^  DF_SAD8            = 10,     \/\/\/<   8xM SAD$/;"	e	enum:DFunc
DF_SADS	TypeDef.h	/^  DF_SADS            = 15,     \/\/\/< general size SAD with step$/;"	e	enum:DFunc
DF_SADS12	TypeDef.h	/^  DF_SADS12          = 46,$/;"	e	enum:DFunc
DF_SADS16	TypeDef.h	/^  DF_SADS16          = 18,     \/\/\/<  16xM SAD with step$/;"	e	enum:DFunc
DF_SADS16N	TypeDef.h	/^  DF_SADS16N         = 21,     \/\/\/< 16NxM SAD with step$/;"	e	enum:DFunc
DF_SADS24	TypeDef.h	/^  DF_SADS24          = 47,$/;"	e	enum:DFunc
DF_SADS32	TypeDef.h	/^  DF_SADS32          = 19,     \/\/\/<  32xM SAD with step$/;"	e	enum:DFunc
DF_SADS4	TypeDef.h	/^  DF_SADS4           = 16,     \/\/\/<   4xM SAD with step$/;"	e	enum:DFunc
DF_SADS48	TypeDef.h	/^  DF_SADS48          = 48,$/;"	e	enum:DFunc
DF_SADS64	TypeDef.h	/^  DF_SADS64          = 20,     \/\/\/<  64xM SAD with step$/;"	e	enum:DFunc
DF_SADS8	TypeDef.h	/^  DF_SADS8           = 17,     \/\/\/<   8xM SAD with step$/;"	e	enum:DFunc
DF_SSE	TypeDef.h	/^  DF_SSE             = 1,      \/\/\/< general size SSE$/;"	e	enum:DFunc
DF_SSE16	TypeDef.h	/^  DF_SSE16           = 4,      \/\/\/<  16xM SSE$/;"	e	enum:DFunc
DF_SSE16N	TypeDef.h	/^  DF_SSE16N          = 7,      \/\/\/< 16NxM SSE$/;"	e	enum:DFunc
DF_SSE32	TypeDef.h	/^  DF_SSE32           = 5,      \/\/\/<  32xM SSE$/;"	e	enum:DFunc
DF_SSE4	TypeDef.h	/^  DF_SSE4            = 2,      \/\/\/<   4xM SSE$/;"	e	enum:DFunc
DF_SSE64	TypeDef.h	/^  DF_SSE64           = 6,      \/\/\/<  64xM SSE$/;"	e	enum:DFunc
DF_SSE8	TypeDef.h	/^  DF_SSE8            = 3,      \/\/\/<   8xM SSE$/;"	e	enum:DFunc
DF_SSE_FRAME	TypeDef.h	/^  DF_SSE_FRAME       = 50,     \/\/\/< Frame-based SSE$/;"	e	enum:DFunc
DF_TOTAL_FUNCTIONS	TypeDef.h	/^  DF_TOTAL_FUNCTIONS = 64$/;"	e	enum:DFunc
DFunc	TypeDef.h	/^enum DFunc$/;"	g
DISABLED	ProfileLevelTierFeatures.h	/^    DISABLED=0,$/;"	e	enum:ProfileFeatures::TRISTATE
DISPLAY_ORIENTATION	SEI.h	/^    DISPLAY_ORIENTATION                  = 47,$/;"	e	enum:SEI::PayloadType
DISTORTION_PRECISION_ADJUSTMENT	TypeDef.h	158;"	d
DISTORTION_PRECISION_ADJUSTMENT	TypeDef.h	160;"	d
DM_CHROMA_IDX	CommonDef.h	/^static const Int DM_CHROMA_IDX =                                   36; \/\/\/< chroma mode index for derived from luma intra mode$/;"	v
DONT_SPLIT	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	e	enum:TComTU::TU_SPLIT_MODE
DPBPerCtuData	TComPicSym.h	/^  struct DPBPerCtuData$/;"	s	class:TComPicSym
DPB_ENCODER_USAGE_CHECK	TypeDef.h	93;"	d
DTRACE_CABAC_F	TComRom.h	141;"	d
DTRACE_CABAC_F	TComRom.h	151;"	d
DTRACE_CABAC_N	TComRom.h	147;"	d
DTRACE_CABAC_N	TComRom.h	157;"	d
DTRACE_CABAC_R	TComRom.h	146;"	d
DTRACE_CABAC_R	TComRom.h	156;"	d
DTRACE_CABAC_T	TComRom.h	144;"	d
DTRACE_CABAC_T	TComRom.h	154;"	d
DTRACE_CABAC_V	TComRom.h	142;"	d
DTRACE_CABAC_V	TComRom.h	152;"	d
DTRACE_CABAC_VL	TComRom.h	143;"	d
DTRACE_CABAC_VL	TComRom.h	153;"	d
DTRACE_CABAC_X	TComRom.h	145;"	d
DTRACE_CABAC_X	TComRom.h	155;"	d
DeblockEdgeDir	TypeDef.h	/^enum DeblockEdgeDir$/;"	g
DebugInterPredResiReco	Debug.cpp	/^Void DebugInterPredResiReco(std::string &sDebug, TComYuv &pred, TComYuv &resi, TComYuv &reco, Int predmode_mask)$/;"	f
DebugOptionList	Debug.h	/^namespace DebugOptionList$/;"	n
DebugStringGetPredModeMask	Debug.cpp	/^Int DebugStringGetPredModeMask(PredMode mode)$/;"	f
DistFunc	TComRdCost.h	/^  FpDistFunc            DistFunc;$/;"	m	class:DistParam
DistParam	TComRdCost.h	/^  DistParam()$/;"	f	class:DistParam
DistParam	TComRdCost.h	/^class DistParam$/;"	c
Distortion	TypeDef.h	/^typedef       UInt            Distortion;        \/\/\/< distortion measurement$/;"	t
Distortion	TypeDef.h	/^typedef       UInt64          Distortion;        \/\/\/< distortion measurement$/;"	t
Double	TypeDef.h	/^typedef       double              Double;$/;"	t
EDGE_HOR	TypeDef.h	/^  EDGE_HOR     = 1,$/;"	e	enum:DeblockEdgeDir
EDGE_VER	TypeDef.h	/^  EDGE_VER     = 0,$/;"	e	enum:DeblockEdgeDir
ENABLED	ProfileLevelTierFeatures.h	/^    ENABLED=2$/;"	e	enum:ProfileFeatures::TRISTATE
ENC_DEC_TRACE	TypeDef.h	73;"	d
ENVIRONMENT_VARIABLE_DEBUG_AND_TEST	TypeDef.h	62;"	d
EQUIRECTANGULAR_PROJECTION	SEI.h	/^    EQUIRECTANGULAR_PROJECTION           = 150,$/;"	e	enum:SEI::PayloadType
EXTENSION_360_VIDEO	TypeDef.h	103;"	d
EnvVar	Debug.cpp	/^EnvVar::EnvVar(const std::string &sName, const std::string &sDefault, const std::string &sHelp) :$/;"	f	class:EnvVar
EnvVar	Debug.h	/^class EnvVar$/;"	c
FASTINTERSEARCH_DISABLED	TypeDef.h	/^  FASTINTERSEARCH_DISABLED = 0,$/;"	e	enum:FastInterSearchMode
FASTINTERSEARCH_MODE1	TypeDef.h	/^  FASTINTERSEARCH_MODE1    = 1, \/\/ TODO: assign better names to these.$/;"	e	enum:FastInterSearchMode
FASTINTERSEARCH_MODE2	TypeDef.h	/^  FASTINTERSEARCH_MODE2    = 2,$/;"	e	enum:FastInterSearchMode
FASTINTERSEARCH_MODE3	TypeDef.h	/^  FASTINTERSEARCH_MODE3    = 3$/;"	e	enum:FastInterSearchMode
FAST_BIT_EST	TypeDef.h	115;"	d
FAST_UDI_MAX_RDMODE_NUM	CommonDef.h	/^static const Int FAST_UDI_MAX_RDMODE_NUM =                         35; \/\/\/< maximum number of RD comparison in fast-UDI estimation loop$/;"	v
FATAL_ERROR_0	CommonDef.h	279;"	d
FGS_ERROR_T	SEIFilmGrainSynthesizer.h	/^}FGS_ERROR_T;$/;"	t	typeref:enum:__anon4
FGS_FAIL	SEIFilmGrainSynthesizer.h	/^  FGS_FAIL = 0xFF$/;"	e	enum:__anon4
FGS_FILE_IO_ERROR	SEIFilmGrainSynthesizer.h	109;"	d
FGS_INVALID_BIT_DEPTH	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_BIT_DEPTH = FGS_FILE_IO_ERROR + 0x04,$/;"	e	enum:__anon4
FGS_INVALID_BLEND_MODE	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_BLEND_MODE = FGS_PARAM_ERROR + 0x04,$/;"	e	enum:__anon4
FGS_INVALID_CHROMA_FORMAT	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_CHROMA_FORMAT = FGS_FILE_IO_ERROR + 0x03,$/;"	e	enum:__anon4
FGS_INVALID_COMP_MODEL_PRESENT_FLAG	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_COMP_MODEL_PRESENT_FLAG = FGS_PARAM_ERROR + 0x06,$/;"	e	enum:__anon4
FGS_INVALID_CUT_OFF_FREQUENCIES	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_CUT_OFF_FREQUENCIES = FGS_PARAM_ERROR + 0x0A,$/;"	e	enum:__anon4
FGS_INVALID_FGC_CANCEL_FLAG	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_FGC_CANCEL_FLAG = FGS_PARAM_ERROR + 0x01,$/;"	e	enum:__anon4
FGS_INVALID_FGC_REPETETION_PERIOD	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_FGC_REPETETION_PERIOD = FGS_PARAM_ERROR + 0x0C,$/;"	e	enum:__anon4
FGS_INVALID_GRAIN_MODEL_ID	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_GRAIN_MODEL_ID = FGS_PARAM_ERROR + 0x02,$/;"	e	enum:__anon4
FGS_INVALID_HEIGHT	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_HEIGHT = FGS_FILE_IO_ERROR + 0x02,$/;"	e	enum:__anon4
FGS_INVALID_INTENSITY_BOUNDARY_VALUES	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_INTENSITY_BOUNDARY_VALUES = FGS_PARAM_ERROR + 0x08,$/;"	e	enum:__anon4
FGS_INVALID_LOG2_SCALE_FACTOR	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_LOG2_SCALE_FACTOR = FGS_PARAM_ERROR + 0x05,$/;"	e	enum:__anon4
FGS_INVALID_NUM_CUT_OFF_FREQ_PAIRS	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_NUM_CUT_OFF_FREQ_PAIRS = FGS_PARAM_ERROR + 0x0B,$/;"	e	enum:__anon4
FGS_INVALID_NUM_MODEL_VALUES	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_NUM_MODEL_VALUES = FGS_PARAM_ERROR + 0x07,$/;"	e	enum:__anon4
FGS_INVALID_SEP_COL_DES_FLAG	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_SEP_COL_DES_FLAG = FGS_PARAM_ERROR + 0x03,$/;"	e	enum:__anon4
FGS_INVALID_STANDARD_DEVIATION	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_STANDARD_DEVIATION = FGS_PARAM_ERROR + 0x09,$/;"	e	enum:__anon4
FGS_INVALID_WIDTH	SEIFilmGrainSynthesizer.h	/^  FGS_INVALID_WIDTH = FGS_FILE_IO_ERROR + 0x01,$/;"	e	enum:__anon4
FGS_PARAM_ERROR	SEIFilmGrainSynthesizer.h	110;"	d
FGS_RDD5_ENABLE	TypeDef.h	94;"	d
FGS_SUCCESS	SEIFilmGrainSynthesizer.h	/^  FGS_SUCCESS = 0,$/;"	e	enum:__anon4
FILLER_PAYLOAD	SEI.h	/^    FILLER_PAYLOAD                       = 3,   \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
FILM_GRAIN_CHARACTERISTICS	SEI.h	/^    FILM_GRAIN_CHARACTERISTICS           = 19,  \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
FILM_GRAIN_MODEL_ID_VALUE	SEIFilmGrainSynthesizer.h	55;"	d
FIRST_CBF_CTX_CHROMA	ContextTables.h	147;"	d
FIRST_CBF_CTX_LUMA	ContextTables.h	145;"	d
FIRST_CTX_SET_CHROMA	ContextTables.h	135;"	d
FIRST_CTX_SET_LUMA	ContextTables.h	122;"	d
FIRST_SIG_FLAG_CTX_CHROMA	ContextTables.h	98;"	d
FIRST_SIG_FLAG_CTX_LUMA	ContextTables.h	97;"	d
FISHEYE_VIDEO_INFO	SEI.h	/^    FISHEYE_VIDEO_INFO                   = 152,$/;"	e	enum:SEI::PayloadType
FIXED_NUMBER_OF_BYTES	TypeDef.h	/^  FIXED_NUMBER_OF_BYTES  = 2,          \/\/\/< Limit maximum number of bytes in a slice \/ slice segment$/;"	e	enum:SliceConstraint
FIXED_NUMBER_OF_CTU	TypeDef.h	/^  FIXED_NUMBER_OF_CTU    = 1,          \/\/\/< Limit maximum number of largest coding tree units in a slice \/ slice segments$/;"	e	enum:SliceConstraint
FIXED_NUMBER_OF_TILES	TypeDef.h	/^  FIXED_NUMBER_OF_TILES  = 3,          \/\/\/< slices \/ slice segments span an integer number of tiles$/;"	e	enum:SliceConstraint
FRAME_PACKING	SEI.h	/^    FRAME_PACKING                        = 45,$/;"	e	enum:SEI::PayloadType
FULL_NBIT	TypeDef.h	150;"	d
FULL_NBIT	TypeDef.h	153;"	d
FastInterSearchMode	TypeDef.h	/^enum FastInterSearchMode$/;"	g
Float	TypeDef.h	/^typedef       float               Float;$/;"	t
FpDistFunc	TComRdCost.h	/^typedef Distortion (*FpDistFunc) (DistParam*); \/\/ TODO: can this pointer be replaced with a reference? - there are no NULL checks on pointer.$/;"	t
GCC_VERSION	TComRdCost.cpp	428;"	d	file:
GRAIN_SCALE	SEIFilmGrainSynthesizer.h	65;"	d
GREEN_METADATA	SEI.h	/^    GREEN_METADATA                       = 56,$/;"	e	enum:SEI::PayloadType
GetAbsPartIdxCU	TComTU.h	/^    UInt GetAbsPartIdxCU()                                     const { return mAbsPartIdxCU; }$/;"	f	class:TComTU
GetAbsPartIdxNumParts	TComTU.h	/^    UInt GetAbsPartIdxNumParts()                               const { return mAbsPartIdxStep; }$/;"	f	class:TComTU
GetAbsPartIdxNumParts	TComTU.h	/^    UInt GetAbsPartIdxNumParts(const ComponentID compID)       const { return ProcessingAllQuadrants(compID) ? mAbsPartIdxStep : (mAbsPartIdxStep * NUMBER_OF_SECTIONS[mSplitMode]); }$/;"	f	class:TComTU
GetAbsPartIdxTU	TComTU.h	/^    UInt GetAbsPartIdxTU()                                     const { return GetAbsPartIdxCU() + GetRelPartIdxTU(); }$/;"	f	class:TComTU
GetAbsPartIdxTU	TComTU.h	/^    UInt GetAbsPartIdxTU(const ComponentID compID)             const { return GetAbsPartIdxCU() + GetRelPartIdxTU(compID); }$/;"	f	class:TComTU
GetChromaFormat	TComTU.h	/^    ChromaFormat GetChromaFormat()                             const { return mChromaFormat; }$/;"	f	class:TComTU
GetCurrentX	TComRom.cpp	/^  UInt GetCurrentX() const { return m_column; }$/;"	f	class:ScanGenerator
GetCurrentY	TComRom.cpp	/^  UInt GetCurrentY() const { return m_line; }$/;"	f	class:ScanGenerator
GetEquivalentLog2TrSize	TComTU.cpp	/^UInt TComTU::GetEquivalentLog2TrSize(const ComponentID compID)     const$/;"	f	class:TComTU
GetLog2LumaTrSize	TComTU.h	/^    UInt GetLog2LumaTrSize()                                   const { return mLog2TrLumaSize; }$/;"	f	class:TComTU
GetNextIndex	TComRom.cpp	/^  UInt GetNextIndex(UInt blockOffsetX, UInt blockOffsetY)$/;"	f	class:ScanGenerator
GetRelPartIdxTU	TComTU.h	/^    UInt GetRelPartIdxTU()                                     const { return mAbsPartIdxTURelCU; }$/;"	f	class:TComTU
GetRelPartIdxTU	TComTU.h	/^    UInt GetRelPartIdxTU(const ComponentID compID)             const { return ProcessingAllQuadrants(compID) ? mAbsPartIdxTURelCU : (mAbsPartIdxTURelCU & (~0x3)); }$/;"	f	class:TComTU
GetSectionNumber	TComTU.h	/^    UInt GetSectionNumber()                                    const { return mSection; }$/;"	f	class:TComTU
GetSingletonInstance	TComCodingStatistics.h	/^    static TComCodingStatistics& GetSingletonInstance()$/;"	f	class:TComCodingStatistics
GetSplitMode	TComTU.h	/^    TU_SPLIT_MODE GetSplitMode()                               const { return mSplitMode; }$/;"	f	class:TComTU
GetStatisticEP	TComCodingStatistics.h	/^    static SStat &GetStatisticEP(const TChar *pKey) {return GetStatisticEP(std::string(pKey)); }$/;"	f	class:TComCodingStatistics
GetStatisticEP	TComCodingStatistics.h	/^    static SStat &GetStatisticEP(const TComCodingStatisticsClassType &stat) { return GetSingletonInstance().data.statistics_ep[stat.type][stat.subClass]; }$/;"	f	class:TComCodingStatistics
GetStatisticEP	TComCodingStatistics.h	/^    static SStat &GetStatisticEP(const std::string &str) { return GetSingletonInstance().data.mappings_ep[str]; }$/;"	f	class:TComCodingStatistics
GetStatistics	TComCodingStatistics.h	/^    static const TComCodingStatisticsData &GetStatistics()         { return GetSingletonInstance().data; }$/;"	f	class:TComCodingStatistics
GetSubClassString	TComCodingStatistics.h	/^  static const TChar *GetSubClassString(const UInt subClass)$/;"	f	class:TComCodingStatisticsClassType
GetSubClassWidth	TComCodingStatistics.h	/^  static UInt GetSubClassWidth(const UInt subClass)$/;"	f	class:TComCodingStatisticsClassType
GetTransformDepthRel	TComTU.h	/^    UInt GetTransformDepthRel()                                const { return mTrDepthRelCU[COMPONENT_Y]; }$/;"	f	class:TComTU
GetTransformDepthRelAdj	TComTU.h	/^    UInt GetTransformDepthRelAdj(const ChannelType chType)     const$/;"	f	class:TComTU
GetTransformDepthRelAdj	TComTU.h	/^    UInt GetTransformDepthRelAdj(const ComponentID compID)     const { return mTrDepthRelCU[compID]; }$/;"	f	class:TComTU
GetTransformDepthTotal	TComTU.h	/^    UInt GetTransformDepthTotal()                              const { return mCuDepth+GetTransformDepthRel(); }$/;"	f	class:TComTU
GetTransformDepthTotalAdj	TComTU.h	/^    UInt GetTransformDepthTotalAdj(const ComponentID compID)   const { return mCuDepth+GetTransformDepthRelAdj(compID); }$/;"	f	class:TComTU
GrainSynthesisStruct	SEIFilmGrainSynthesizer.h	/^}GrainSynthesisStruct;$/;"	t	typeref:struct:GrainSynthesisStruct_t
GrainSynthesisStruct_t	SEIFilmGrainSynthesizer.h	/^typedef struct GrainSynthesisStruct_t$/;"	s
HASHTYPE_CHECKSUM	TypeDef.h	/^  HASHTYPE_CHECKSUM        = 2,$/;"	e	enum:HashType
HASHTYPE_CRC	TypeDef.h	/^  HASHTYPE_CRC             = 1,$/;"	e	enum:HashType
HASHTYPE_MD5	TypeDef.h	/^  HASHTYPE_MD5             = 0,$/;"	e	enum:HashType
HASHTYPE_NONE	TypeDef.h	/^  HASHTYPE_NONE            = 3,$/;"	e	enum:HashType
HBRFACTOREQN	ProfileLevelTierFeatures.h	/^typedef enum HBRFACTOREQN$/;"	g
HBRFACTOREQN	ProfileLevelTierFeatures.h	/^} HBRFACTOREQN;$/;"	t	typeref:enum:HBRFACTOREQN
HBR_1	ProfileLevelTierFeatures.h	/^  HBR_1 = 0,$/;"	e	enum:HBRFACTOREQN
HBR_12_OR_24	ProfileLevelTierFeatures.h	/^  HBR_12_OR_24 = 2$/;"	e	enum:HBRFACTOREQN
HBR_1_OR_2	ProfileLevelTierFeatures.h	/^  HBR_1_OR_2 = 1,$/;"	e	enum:HBRFACTOREQN
HHI_RQT_INTRA_SPEEDUP	TypeDef.h	117;"	d
HHI_RQT_INTRA_SPEEDUP_MOD	TypeDef.h	118;"	d
HIGH	TypeDef.h	/^    HIGH = 1,$/;"	e	enum:Level::Tier
HIGHTHROUGHPUTREXT	TypeDef.h	/^    HIGHTHROUGHPUTREXT = 5$/;"	e	enum:Profile::Name
HOR_IDX	CommonDef.h	/^static const Int HOR_IDX =                                         10; \/\/\/< index for intra HORIZONTAL mode$/;"	v
HashType	TypeDef.h	/^enum HashType$/;"	g
HrdSubLayerInfo	TComSlice.h	/^struct HrdSubLayerInfo$/;"	s
IF_FILTER_PREC	TComInterpolationFilter.h	50;"	d
IF_INTERNAL_OFFS	TComInterpolationFilter.h	51;"	d
IF_INTERNAL_PREC	TComInterpolationFilter.h	49;"	d
INIT_ABS_FLAG	ContextTables.h	/^INIT_ABS_FLAG[NUMBER_OF_SLICE_TYPES][NUM_ABS_FLAG_CTX] =$/;"	v
INIT_CHROMA_PRED_MODE	ContextTables.h	/^INIT_CHROMA_PRED_MODE[NUMBER_OF_SLICE_TYPES][NUM_CHROMA_PRED_CTX] =$/;"	v
INIT_CHROMA_QP_ADJ_FLAG	ContextTables.h	/^INIT_CHROMA_QP_ADJ_FLAG[NUMBER_OF_SLICE_TYPES][NUM_CHROMA_QP_ADJ_FLAG_CTX] =$/;"	v
INIT_CHROMA_QP_ADJ_IDC	ContextTables.h	/^INIT_CHROMA_QP_ADJ_IDC[NUMBER_OF_SLICE_TYPES][NUM_CHROMA_QP_ADJ_IDC_CTX] =$/;"	v
INIT_CROSS_COMPONENT_PREDICTION	ContextTables.h	/^INIT_CROSS_COMPONENT_PREDICTION[NUMBER_OF_SLICE_TYPES][NUM_CROSS_COMPONENT_PREDICTION_CTX] =$/;"	v
INIT_CU_TRANSQUANT_BYPASS_FLAG	ContextTables.h	/^INIT_CU_TRANSQUANT_BYPASS_FLAG[NUMBER_OF_SLICE_TYPES][NUM_CU_TRANSQUANT_BYPASS_FLAG_CTX] =$/;"	v
INIT_DQP	ContextTables.h	/^INIT_DQP[NUMBER_OF_SLICE_TYPES][NUM_DELTA_QP_CTX] =$/;"	v
INIT_EXPLICIT_RDPCM_DIR	ContextTables.h	/^INIT_EXPLICIT_RDPCM_DIR[NUMBER_OF_SLICE_TYPES][2*NUM_EXPLICIT_RDPCM_DIR_CTX] =$/;"	v
INIT_EXPLICIT_RDPCM_FLAG	ContextTables.h	/^INIT_EXPLICIT_RDPCM_FLAG[NUMBER_OF_SLICE_TYPES][2*NUM_EXPLICIT_RDPCM_FLAG_CTX] =$/;"	v
INIT_INTER_DIR	ContextTables.h	/^INIT_INTER_DIR[NUMBER_OF_SLICE_TYPES][NUM_INTER_DIR_CTX] =$/;"	v
INIT_INTRA_PRED_MODE	ContextTables.h	/^INIT_INTRA_PRED_MODE[NUMBER_OF_SLICE_TYPES][NUM_INTRA_PREDICT_CTX] =$/;"	v
INIT_LAST	ContextTables.h	/^INIT_LAST[NUMBER_OF_SLICE_TYPES][NUM_CTX_LAST_FLAG_SETS * NUM_CTX_LAST_FLAG_XY] =$/;"	v
INIT_MERGE_FLAG_EXT	ContextTables.h	/^INIT_MERGE_FLAG_EXT[NUMBER_OF_SLICE_TYPES][NUM_MERGE_FLAG_EXT_CTX] =$/;"	v
INIT_MERGE_IDX_EXT	ContextTables.h	/^INIT_MERGE_IDX_EXT[NUMBER_OF_SLICE_TYPES][NUM_MERGE_IDX_EXT_CTX] =$/;"	v
INIT_MVD	ContextTables.h	/^INIT_MVD[NUMBER_OF_SLICE_TYPES][NUM_MV_RES_CTX] =$/;"	v
INIT_MVP_IDX	ContextTables.h	/^INIT_MVP_IDX[NUMBER_OF_SLICE_TYPES][NUM_MVP_IDX_CTX] =$/;"	v
INIT_ONE_FLAG	ContextTables.h	/^INIT_ONE_FLAG[NUMBER_OF_SLICE_TYPES][NUM_ONE_FLAG_CTX] =$/;"	v
INIT_PART_SIZE	ContextTables.h	/^INIT_PART_SIZE[NUMBER_OF_SLICE_TYPES][NUM_PART_SIZE_CTX] =$/;"	v
INIT_PRED_MODE	ContextTables.h	/^INIT_PRED_MODE[NUMBER_OF_SLICE_TYPES][NUM_PRED_MODE_CTX] =$/;"	v
INIT_QT_CBF	ContextTables.h	/^INIT_QT_CBF[NUMBER_OF_SLICE_TYPES][NUM_QT_CBF_CTX_SETS * NUM_QT_CBF_CTX_PER_SET] =$/;"	v
INIT_QT_ROOT_CBF	ContextTables.h	/^INIT_QT_ROOT_CBF[NUMBER_OF_SLICE_TYPES][NUM_QT_ROOT_CBF_CTX] =$/;"	v
INIT_REF_PIC	ContextTables.h	/^INIT_REF_PIC[NUMBER_OF_SLICE_TYPES][NUM_REF_NO_CTX] =$/;"	v
INIT_SAO_MERGE_FLAG	ContextTables.h	/^INIT_SAO_MERGE_FLAG[NUMBER_OF_SLICE_TYPES][NUM_SAO_MERGE_FLAG_CTX] =$/;"	v
INIT_SAO_TYPE_IDX	ContextTables.h	/^INIT_SAO_TYPE_IDX[NUMBER_OF_SLICE_TYPES][NUM_SAO_TYPE_IDX_CTX] =$/;"	v
INIT_SIG_CG_FLAG	ContextTables.h	/^INIT_SIG_CG_FLAG[NUMBER_OF_SLICE_TYPES][2 * NUM_SIG_CG_FLAG_CTX] =$/;"	v
INIT_SIG_FLAG	ContextTables.h	/^INIT_SIG_FLAG[NUMBER_OF_SLICE_TYPES][NUM_SIG_FLAG_CTX] =$/;"	v
INIT_SKIP_FLAG	ContextTables.h	/^INIT_SKIP_FLAG[NUMBER_OF_SLICE_TYPES][NUM_SKIP_FLAG_CTX] =$/;"	v
INIT_SPLIT_FLAG	ContextTables.h	/^INIT_SPLIT_FLAG[NUMBER_OF_SLICE_TYPES][NUM_SPLIT_FLAG_CTX] =$/;"	v
INIT_TRANSFORMSKIP_FLAG	ContextTables.h	/^INIT_TRANSFORMSKIP_FLAG[NUMBER_OF_SLICE_TYPES][2*NUM_TRANSFORMSKIP_FLAG_CTX] =$/;"	v
INIT_TRANS_SUBDIV_FLAG	ContextTables.h	/^INIT_TRANS_SUBDIV_FLAG[NUMBER_OF_SLICE_TYPES][NUM_TRANS_SUBDIV_FLAG_CTX] =$/;"	v
INTENSITY_INTERVAL_MATCH_FAIL	SEIFilmGrainSynthesizer.h	74;"	d
INTENSITY_INTERVAL_MATCH_FAIL	SEIFilmGrainSynthesizer.h	95;"	d
IPCOLOURSPACE_RGBtoGBR	TypeDef.h	/^  IPCOLOURSPACE_RGBtoGBR                = 3,$/;"	e	enum:InputColourSpaceConversion
IPCOLOURSPACE_UNCHANGED	TypeDef.h	/^  IPCOLOURSPACE_UNCHANGED               = 0,$/;"	e	enum:InputColourSpaceConversion
IPCOLOURSPACE_YCbCrtoYCrCb	TypeDef.h	/^  IPCOLOURSPACE_YCbCrtoYCrCb            = 1, \/\/ Mainly used for debug!$/;"	e	enum:InputColourSpaceConversion
IPCOLOURSPACE_YCbCrtoYYY	TypeDef.h	/^  IPCOLOURSPACE_YCbCrtoYYY              = 2, \/\/ Mainly used for debug!$/;"	e	enum:InputColourSpaceConversion
IQUANT_SHIFT	CommonDef.h	/^static const Int IQUANT_SHIFT =                                     6;$/;"	v
ISLICE_CHROMA_ABS_CONTEXT	ContextTables.h	412;"	d
ISLICE_CHROMA_CBF_CONTEXT	ContextTables.h	303;"	d
ISLICE_CHROMA_LAST_POSITION_CONTEXT	ContextTables.h	337;"	d
ISLICE_CHROMA_ONE_CONTEXT	ContextTables.h	408;"	d
ISLICE_CHROMA_SIGNIFICANCE_CONTEXT	ContextTables.h	379;"	d
ISLICE_LUMA_ABS_CONTEXT	ContextTables.h	403;"	d
ISLICE_LUMA_CBF_CONTEXT	ContextTables.h	299;"	d
ISLICE_LUMA_LAST_POSITION_CONTEXT	ContextTables.h	333;"	d
ISLICE_LUMA_ONE_CONTEXT	ContextTables.h	399;"	d
ISLICE_LUMA_SIGNIFICANCE_CONTEXT	ContextTables.h	374;"	d
ISO_IEC_11578_LEN	SEI.h	/^static const UInt ISO_IEC_11578_LEN=16;$/;"	v
I_SLICE	TypeDef.h	/^  I_SLICE               = 2,$/;"	e	enum:SliceType
IncrementStatisticEP	TComCodingStatistics.h	/^    static Void IncrementStatisticEP(const TChar *pKey, const Int numBits, const Int value)$/;"	f	class:TComCodingStatistics
IncrementStatisticEP	TComCodingStatistics.h	/^    static Void IncrementStatisticEP(const TComCodingStatisticsClassType &stat, const Int numBits, const Int value)$/;"	f	class:TComCodingStatistics
IncrementStatisticEP	TComCodingStatistics.h	/^    static Void IncrementStatisticEP(const std::string &str, const Int numBits, const Int value)$/;"	f	class:TComCodingStatistics
InputColourSpaceConversion	TypeDef.h	/^enum InputColourSpaceConversion \/\/ defined in terms of conversion prior to input of encoder.$/;"	g
Int	TypeDef.h	/^typedef       int                 Int;$/;"	t
Int64	TypeDef.h	/^typedef       __int64             Int64;$/;"	t
Int64	TypeDef.h	/^typedef       long long           Int64;$/;"	t
Intermediate_Int	TypeDef.h	/^typedef       Int             Intermediate_Int;  \/\/\/< used as intermediate value in calculations$/;"	t
Intermediate_Int	TypeDef.h	/^typedef       Int64           Intermediate_Int;  \/\/\/< used as intermediate value in calculations$/;"	t
Intermediate_UInt	TypeDef.h	/^typedef       UInt            Intermediate_UInt; \/\/\/< used as intermediate value in calculations$/;"	t
Intermediate_UInt	TypeDef.h	/^typedef       UInt64          Intermediate_UInt; \/\/\/< used as intermediate value in calculations$/;"	t
IsLastSection	TComTU.h	/^    Bool IsLastSection() const { return mSection+1>=((1<<mSplitMode)); }$/;"	f	class:TComTU
JVET_K0390_RATE_CTRL	TypeDef.h	85;"	d
JVET_M0600_RATE_CTRL	TypeDef.h	87;"	d
KNEE_FUNCTION_INFO	SEI.h	/^    KNEE_FUNCTION_INFO                   = 141,$/;"	e	enum:SEI::PayloadType
LAST_SIGNIFICANT_GROUPS	CommonDef.h	/^static const Int LAST_SIGNIFICANT_GROUPS =                        10 ;$/;"	v
LEVEL1	TypeDef.h	/^    LEVEL1   = 30,$/;"	e	enum:Level::Name
LEVEL2	TypeDef.h	/^    LEVEL2   = 60,$/;"	e	enum:Level::Name
LEVEL2_1	TypeDef.h	/^    LEVEL2_1 = 63,$/;"	e	enum:Level::Name
LEVEL3	TypeDef.h	/^    LEVEL3   = 90,$/;"	e	enum:Level::Name
LEVEL3_1	TypeDef.h	/^    LEVEL3_1 = 93,$/;"	e	enum:Level::Name
LEVEL4	TypeDef.h	/^    LEVEL4   = 120,$/;"	e	enum:Level::Name
LEVEL4_1	TypeDef.h	/^    LEVEL4_1 = 123,$/;"	e	enum:Level::Name
LEVEL5	TypeDef.h	/^    LEVEL5   = 150,$/;"	e	enum:Level::Name
LEVEL5_1	TypeDef.h	/^    LEVEL5_1 = 153,$/;"	e	enum:Level::Name
LEVEL5_2	TypeDef.h	/^    LEVEL5_2 = 156,$/;"	e	enum:Level::Name
LEVEL6	TypeDef.h	/^    LEVEL6   = 180,$/;"	e	enum:Level::Name
LEVEL6_1	TypeDef.h	/^    LEVEL6_1 = 183,$/;"	e	enum:Level::Name
LEVEL6_2	TypeDef.h	/^    LEVEL6_2 = 186,$/;"	e	enum:Level::Name
LEVEL8_5	TypeDef.h	/^    LEVEL8_5 = 255,$/;"	e	enum:Level::Name
LEVEL_RANGE	CommonDef.h	/^static const Int LEVEL_RANGE =                                     30; \/\/\/< G382: max coefficient level in statistics collection$/;"	v
LFCUParam	TypeDef.h	/^} LFCUParam;$/;"	t	typeref:struct:_LFCUParam
LOG2_MAX_NUM_COLUMNS_MINUS1	CommonDef.h	/^static const Int LOG2_MAX_NUM_COLUMNS_MINUS1 =                      7;$/;"	v
LOG2_MAX_NUM_ROWS_MINUS1	CommonDef.h	/^static const Int LOG2_MAX_NUM_ROWS_MINUS1 =                         7;$/;"	v
LOG2_SCALING_LIST_NEUTRAL_VALUE	CommonDef.h	/^static const Int LOG2_SCALING_LIST_NEUTRAL_VALUE =                 4 ; \/\/\/< log2 of the value that, when used in a scaling list, has no effect on quantisation$/;"	v
LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP	CommonDef.h	/^static const Int LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP =      0; \/\/\/< QP to use for lossless coding.$/;"	v
LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP_PRIME	CommonDef.h	/^static const Int LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP_PRIME =4; \/\/\/< QP' to use for mixed_lossy_lossless coding.$/;"	v
LSB16	SEIFilmGrainSynthesizer.h	103;"	d
LUMALVL_TO_DQP_AVG_METHOD	TypeDef.h	/^  LUMALVL_TO_DQP_AVG_METHOD = 1, \/\/ use average of CTU to determine luma level$/;"	e	enum:LumaLevelToDQPMode
LUMALVL_TO_DQP_DISABLED	TypeDef.h	/^  LUMALVL_TO_DQP_DISABLED   = 0,$/;"	e	enum:LumaLevelToDQPMode
LUMALVL_TO_DQP_MAX_METHOD	TypeDef.h	/^  LUMALVL_TO_DQP_MAX_METHOD = 2,  \/\/ use maximum value of CTU to determine luma level$/;"	e	enum:LumaLevelToDQPMode
LUMALVL_TO_DQP_NUM_MODES	TypeDef.h	/^  LUMALVL_TO_DQP_NUM_MODES  = 3$/;"	e	enum:LumaLevelToDQPMode
LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS	CommonDef.h	/^static const Int LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS =   4;$/;"	v
LUMA_LEVEL_TO_DQP_LUT_MAXSIZE	CommonDef.h	/^static const UInt LUMA_LEVEL_TO_DQP_LUT_MAXSIZE =                1024; \/\/\/< max LUT size for QP offset based on luma$/;"	v
Level	TypeDef.h	/^namespace Level$/;"	n
LevelTierFeatures	ProfileLevelTierFeatures.h	/^struct LevelTierFeatures$/;"	s
LumaLevelToDQPMode	TypeDef.h	/^enum LumaLevelToDQPMode$/;"	g
LumaLevelToDeltaQPMapping	TypeDef.h	/^struct LumaLevelToDeltaQPMapping$/;"	s
MAIN	TypeDef.h	/^    MAIN = 0,$/;"	e	enum:Level::Tier
MAIN	TypeDef.h	/^    MAIN = 1,$/;"	e	enum:Profile::Name
MAIN10	TypeDef.h	/^    MAIN10 = 2,$/;"	e	enum:Profile::Name
MAINREXT	TypeDef.h	/^    MAINREXT = 4,$/;"	e	enum:Profile::Name
MAINSTILLPICTURE	TypeDef.h	/^    MAINSTILLPICTURE = 3,$/;"	e	enum:Profile::Name
MASTERING_DISPLAY_COLOUR_VOLUME	SEI.h	/^    MASTERING_DISPLAY_COLOUR_VOLUME      = 137,$/;"	e	enum:SEI::PayloadType
MATRIX_COEFFICIENTS	TypeDef.h	/^enum MATRIX_COEFFICIENTS \/\/ Table E.5 (Matrix coefficients)$/;"	g
MATRIX_COEFFICIENTS_BT2020_CONSTANT_LUMINANCE	TypeDef.h	/^  MATRIX_COEFFICIENTS_BT2020_CONSTANT_LUMINANCE     = 10,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_BT2020_NON_CONSTANT_LUMINANCE	TypeDef.h	/^  MATRIX_COEFFICIENTS_BT2020_NON_CONSTANT_LUMINANCE = 9,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_BT601_525	TypeDef.h	/^  MATRIX_COEFFICIENTS_BT601_525                     = 6,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_BT601_625	TypeDef.h	/^  MATRIX_COEFFICIENTS_BT601_625                     = 5,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_BT709	TypeDef.h	/^  MATRIX_COEFFICIENTS_BT709                         = 1,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_RESERVED_BY_ITUISOIEC	TypeDef.h	/^  MATRIX_COEFFICIENTS_RESERVED_BY_ITUISOIEC         = 3,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_RGB	TypeDef.h	/^  MATRIX_COEFFICIENTS_RGB                           = 0,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_SMPTE240	TypeDef.h	/^  MATRIX_COEFFICIENTS_SMPTE240                      = 7,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_UNSPECIFIED	TypeDef.h	/^  MATRIX_COEFFICIENTS_UNSPECIFIED                   = 2,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_USFCCT47	TypeDef.h	/^  MATRIX_COEFFICIENTS_USFCCT47                      = 4,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_COEFFICIENTS_YCGCO	TypeDef.h	/^  MATRIX_COEFFICIENTS_YCGCO                         = 8,$/;"	e	enum:MATRIX_COEFFICIENTS
MATRIX_MULT	TypeDef.h	124;"	d
MAXIMUM_INTRA_FILTERED_HEIGHT	CommonDef.h	/^static const Int MAXIMUM_INTRA_FILTERED_HEIGHT =                   16;$/;"	v
MAXIMUM_INTRA_FILTERED_WIDTH	CommonDef.h	/^static const Int MAXIMUM_INTRA_FILTERED_WIDTH =                    16;$/;"	v
MAX_ALLOWED_COMP_MODEL_PAIRS	SEIFilmGrainSynthesizer.h	61;"	d
MAX_ALLOWED_MODEL_VALUES	SEIFilmGrainSynthesizer.h	52;"	d
MAX_BIT_DEPTH	SEIFilmGrainSynthesizer.h	69;"	d
MAX_BIT_DEPTH	SEIFilmGrainSynthesizer.h	90;"	d
MAX_CHROMA_FORMAT_IDC	SEIFilmGrainSynthesizer.h	67;"	d
MAX_CHROMA_FORMAT_IDC	SEIFilmGrainSynthesizer.h	88;"	d
MAX_CNFUINT64	ProfileLevelTierFeatures.cpp	/^static const UInt64 MAX_CNFUINT64 = std::numeric_limits<UInt64>::max();$/;"	v	file:
MAX_CPB_CNT	CommonDef.h	/^static const Int MAX_CPB_CNT =                                     32; \/\/\/< Upper bound of (cpb_cnt_minus1 + 1)$/;"	v
MAX_CUT_OFF_FREQUENCY	SEIFilmGrainSynthesizer.h	59;"	d
MAX_CU_DEPTH	CommonDef.h	/^static const Int MAX_CU_DEPTH =                                     6; \/\/\/< log2(CTUSize)$/;"	v
MAX_CU_SIZE	CommonDef.h	/^static const Int MAX_CU_SIZE =                                     64; \/\/\/< = 1<<(MAX_CU_DEPTH)$/;"	v
MAX_DOUBLE	CommonDef.h	/^static const Double MAX_DOUBLE =                             1.7e+308; \/\/\/< max. value of Double-type value$/;"	v
MAX_ENCODER_DEBLOCKING_QUALITY_LAYERS	CommonDef.h	/^static const Int MAX_ENCODER_DEBLOCKING_QUALITY_LAYERS =           8 ;$/;"	v
MAX_GOP	CommonDef.h	/^static const Int MAX_GOP =                                         64; \/\/\/< max. value of hierarchical GOP size$/;"	v
MAX_HEIGHT	SEIFilmGrainSynthesizer.h	85;"	d
MAX_INT	CommonDef.h	/^static const Int    MAX_INT =                              2147483647; \/\/\/< max. value of signed 32-bit integer$/;"	v
MAX_INTRA_FILTER_DEPTHS	TComPrediction.h	/^static const UInt MAX_INTRA_FILTER_DEPTHS=5;$/;"	v
MAX_LOG2SCALE_VALUE	SEIFilmGrainSynthesizer.h	54;"	d
MAX_MATRIX_COEF_NUM	CommonDef.h	/^static const Int MAX_MATRIX_COEF_NUM =                            64 ; \/\/\/< max coefficient number for quantization matrix$/;"	v
MAX_MATRIX_SIZE_NUM	CommonDef.h	/^static const Int MAX_MATRIX_SIZE_NUM =                             8 ; \/\/\/< max size number for quantization matrix$/;"	v
MAX_NESTING_NUM_LAYER	CommonDef.h	/^static const Int MAX_NESTING_NUM_LAYER =                           64;$/;"	v
MAX_NESTING_NUM_OPS	CommonDef.h	/^static const Int MAX_NESTING_NUM_OPS =                           1024;$/;"	v
MAX_NUM_CHANNEL_TYPE	TypeDef.h	/^  MAX_NUM_CHANNEL_TYPE = 2$/;"	e	enum:ChannelType
MAX_NUM_COMPONENT	TypeDef.h	/^  MAX_NUM_COMPONENT = 3$/;"	e	enum:ComponentID
MAX_NUM_CTX_MOD	ContextTables.h	49;"	d
MAX_NUM_INTENSITIES	CommonDef.h	/^static const Int MAX_NUM_INTENSITIES =                            256; \/\/ Maximum nuber of intensity intervals supported in FGC SEI$/;"	v
MAX_NUM_LAYER_IDS	CommonDef.h	/^static const Int MAX_NUM_LAYER_IDS =                               64;$/;"	v
MAX_NUM_LONG_TERM_REF_PICS	CommonDef.h	/^static const Int MAX_NUM_LONG_TERM_REF_PICS =                      33;$/;"	v
MAX_NUM_MODEL_VALUES	CommonDef.h	/^static const Int MAX_NUM_MODEL_VALUES =                             6; \/\/ Maximum nuber of model values supported in FGC SEI $/;"	v
MAX_NUM_PART_IDXS_IN_CTU_WIDTH	CommonDef.h	/^static const Int MAX_NUM_PART_IDXS_IN_CTU_WIDTH = MAX_CU_SIZE\/MIN_PU_SIZE; \/\/\/< maximum number of partition indices across the width of a CTU (or height of a CTU)$/;"	v
MAX_NUM_PICS_IN_SOP	CommonDef.h	/^static const Int MAX_NUM_PICS_IN_SOP =                           1024;$/;"	v
MAX_NUM_PPS	CommonDef.h	/^static const Int MAX_NUM_PPS =                                     64;$/;"	v
MAX_NUM_REF	CommonDef.h	/^static const Int MAX_NUM_REF =                                     16; \/\/\/< max. number of entries in picture reference list$/;"	v
MAX_NUM_REF_PICS	CommonDef.h	/^static const Int MAX_NUM_REF_PICS =                                16; \/\/\/< max. number of pictures used for reference$/;"	v
MAX_NUM_SAO_CLASSES	TypeDef.h	753;"	d
MAX_NUM_SPS	CommonDef.h	/^static const Int MAX_NUM_SPS =                                     16;$/;"	v
MAX_NUM_VPS	CommonDef.h	/^static const Int MAX_NUM_VPS =                                     16;$/;"	v
MAX_QP	CommonDef.h	/^static const Int MAX_QP =                                          51;$/;"	v
MAX_QP_OFFSET_LIST_SIZE	CommonDef.h	/^static const Int MAX_QP_OFFSET_LIST_SIZE =                          6; \/\/\/< Maximum size of QP offset list is 6 entries$/;"	v
MAX_SAO_TRUNCATED_BITDEPTH	TComSampleAdaptiveOffset.h	52;"	d
MAX_STANDARD_DEVIATION	SEIFilmGrainSynthesizer.h	57;"	d
MAX_TIMECODE_SEI_SETS	CommonDef.h	/^static const Int MAX_TIMECODE_SEI_SETS =                            3; \/\/\/< Maximum number of time sets$/;"	v
MAX_TLAYER	CommonDef.h	/^static const Int MAX_TLAYER =                                       7; \/\/\/< Explicit temporal layer QP offset - max number of temporal layer$/;"	v
MAX_TU_SIZE	CommonDef.h	/^static const Int MAX_TU_SIZE =                                     32;$/;"	v
MAX_UINT	CommonDef.h	/^static const UInt   MAX_UINT =                            0xFFFFFFFFU; \/\/\/< max. value of unsigned 32-bit integer$/;"	v
MAX_VPS_NUH_RESERVED_ZERO_LAYER_ID_PLUS1	CommonDef.h	/^static const Int MAX_VPS_NUH_RESERVED_ZERO_LAYER_ID_PLUS1 =         1;$/;"	v
MAX_VPS_NUM_HRD_PARAMETERS	CommonDef.h	/^static const Int MAX_VPS_NUM_HRD_PARAMETERS =                       1;$/;"	v
MAX_VPS_OP_SETS_PLUS1	CommonDef.h	/^static const Int MAX_VPS_OP_SETS_PLUS1 =                         1024;$/;"	v
MAX_WIDTH	SEIFilmGrainSynthesizer.h	83;"	d
MCTSExtractionInfo	SEI.h	/^  struct MCTSExtractionInfo$/;"	s	class:SEIMCTSExtractionInfoSet
MCTS_ENC_CHECK	TypeDef.h	90;"	d
MCTS_EXTRACTION	TypeDef.h	79;"	d
MCTS_EXTRACTION_INFO_SET	SEI.h	/^    MCTS_EXTRACTION_INFO_SET             = 158,$/;"	e	enum:SEI::PayloadType
MDCS_ANGLE_LIMIT	CommonDef.h	/^static const Int MDCS_ANGLE_LIMIT =                                 4; \/\/\/< 0 = Horizontal\/vertical only, 1 = Horizontal\/vertical +\/- 1, 2 = Horizontal\/vertical +\/- 2 etc...$/;"	v
MDCS_MAXIMUM_HEIGHT	CommonDef.h	/^static const Int MDCS_MAXIMUM_HEIGHT =                              8; \/\/\/< (measured in pixels) TUs with height greater than this can only use diagonal scan$/;"	v
MDCS_MAXIMUM_WIDTH	CommonDef.h	/^static const Int MDCS_MAXIMUM_WIDTH =                               8; \/\/\/< (measured in pixels) TUs with width greater than this can only use diagonal scan$/;"	v
MD_ABOVE	TypeDef.h	/^  MD_ABOVE,             \/\/\/< MVP of above block$/;"	e	enum:MVP_DIR
MD_ABOVE_LEFT	TypeDef.h	/^  MD_ABOVE_LEFT         \/\/\/< MVP of above left block$/;"	e	enum:MVP_DIR
MD_ABOVE_RIGHT	TypeDef.h	/^  MD_ABOVE_RIGHT,       \/\/\/< MVP of above right block$/;"	e	enum:MVP_DIR
MD_BELOW_LEFT	TypeDef.h	/^  MD_BELOW_LEFT,        \/\/\/< MVP of below left block$/;"	e	enum:MVP_DIR
MD_LEFT	TypeDef.h	/^  MD_LEFT = 0,          \/\/\/< MVP of left block$/;"	e	enum:MVP_DIR
MESEARCH_DIAMOND	TypeDef.h	/^  MESEARCH_DIAMOND           = 1,$/;"	e	enum:MESearchMethod
MESEARCH_DIAMOND_ENHANCED	TypeDef.h	/^  MESEARCH_DIAMOND_ENHANCED  = 3,$/;"	e	enum:MESearchMethod
MESEARCH_FULL	TypeDef.h	/^  MESEARCH_FULL              = 0,$/;"	e	enum:MESearchMethod
MESEARCH_NUMBER_OF_METHODS	TypeDef.h	/^  MESEARCH_NUMBER_OF_METHODS = 4$/;"	e	enum:MESearchMethod
MESEARCH_SELECTIVE	TypeDef.h	/^  MESEARCH_SELECTIVE         = 2,$/;"	e	enum:MESearchMethod
MESearchMethod	TypeDef.h	/^enum MESearchMethod$/;"	g
ME_ENABLE_ROUNDING_OF_MVS	TypeDef.h	128;"	d
MIN	SEIFilmGrainSynthesizer.h	101;"	d
MIN_BIT_DEPTH	SEIFilmGrainSynthesizer.h	68;"	d
MIN_BIT_DEPTH	SEIFilmGrainSynthesizer.h	89;"	d
MIN_CHROMA_FORMAT_IDC	SEIFilmGrainSynthesizer.h	66;"	d
MIN_CHROMA_FORMAT_IDC	SEIFilmGrainSynthesizer.h	87;"	d
MIN_CUT_OFF_FREQUENCY	SEIFilmGrainSynthesizer.h	58;"	d
MIN_HEIGHT	SEIFilmGrainSynthesizer.h	84;"	d
MIN_LOG2SCALE_VALUE	SEIFilmGrainSynthesizer.h	53;"	d
MIN_PU_SIZE	CommonDef.h	/^static const Int MIN_PU_SIZE =                                      4;$/;"	v
MIN_TU_SIZE	CommonDef.h	/^static const Int MIN_TU_SIZE =                                      4;$/;"	v
MIN_WIDTH	SEIFilmGrainSynthesizer.h	82;"	d
MLS_CG_LOG2_HEIGHT	CommonDef.h	/^static const Int MLS_CG_LOG2_HEIGHT =                               2;$/;"	v
MLS_CG_LOG2_WIDTH	CommonDef.h	/^static const Int MLS_CG_LOG2_WIDTH =                                2;$/;"	v
MLS_CG_SIZE	CommonDef.h	/^static const Int MLS_CG_SIZE =                                      4; \/\/\/< Coefficient group size of 4x4; = MLS_CG_LOG2_WIDTH + MLS_CG_LOG2_HEIGHT$/;"	v
MLS_GRP_NUM	CommonDef.h	/^static const Int MLS_GRP_NUM =                                     64; \/\/\/< Max number of coefficient groups, max(16, 64)$/;"	v
MODE_INTER	TypeDef.h	/^  MODE_INTER                 = 0,     \/\/\/< inter-prediction mode$/;"	e	enum:PredMode
MODE_INTRA	TypeDef.h	/^  MODE_INTRA                 = 1,     \/\/\/< intra-prediction mode$/;"	e	enum:PredMode
MRG_MAX_NUM_CANDS	CommonDef.h	/^static const Int MRG_MAX_NUM_CANDS =                                5; \/\/\/< MERGE$/;"	v
MSB16	SEIFilmGrainSynthesizer.h	102;"	d
MVP_DIR	TypeDef.h	/^enum MVP_DIR$/;"	g
MapData	TComSlice.h	/^  struct MapData$/;"	s	class:ParameterSetMap
MatrixType	TComRom.cpp	/^const TChar *MatrixType[SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM] =$/;"	v
MatrixType_DC	TComRom.cpp	/^const TChar *MatrixType_DC[SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM] =$/;"	v
MctsExtractorTComPicSym	TComPicSym.h	/^class MctsExtractorTComPicSym {$/;"	c
NALUnit	NAL.h	/^  NALUnit($/;"	f	struct:NALUnit
NALUnit	NAL.h	/^  NALUnit() {}$/;"	f	struct:NALUnit
NALUnit	NAL.h	/^  NALUnit(const NALUnit &src)$/;"	f	struct:NALUnit
NALUnit	NAL.h	/^struct NALUnit$/;"	s
NALUnitEBSP	NAL.h	/^struct NALUnitEBSP : public NALUnit$/;"	s
NAL_UNIT_ACCESS_UNIT_DELIMITER	TypeDef.h	/^  NAL_UNIT_ACCESS_UNIT_DELIMITER,   \/\/ 35$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_BLA_N_LP	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_BLA_N_LP,    \/\/ 18$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_BLA_W_LP	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_BLA_W_LP,    \/\/ 16$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_BLA_W_RADL	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_BLA_W_RADL,  \/\/ 17$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_CRA	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_CRA,         \/\/ 21$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_IDR_N_LP	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_IDR_N_LP,    \/\/ 20$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_IDR_W_RADL	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_IDR_W_RADL,  \/\/ 19$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_RADL_N	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_RADL_N,      \/\/ 6$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_RADL_R	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_RADL_R,      \/\/ 7$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_RASL_N	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_RASL_N,      \/\/ 8$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_RASL_R	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_RASL_R,      \/\/ 9$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_STSA_N	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_STSA_N,      \/\/ 4$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_STSA_R	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_STSA_R,      \/\/ 5$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_TRAIL_N	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_TRAIL_N = 0, \/\/ 0$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_TRAIL_R	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_TRAIL_R,     \/\/ 1$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_TSA_N	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_TSA_N,       \/\/ 2$/;"	e	enum:NalUnitType
NAL_UNIT_CODED_SLICE_TSA_R	TypeDef.h	/^  NAL_UNIT_CODED_SLICE_TSA_R,       \/\/ 3$/;"	e	enum:NalUnitType
NAL_UNIT_EOB	TypeDef.h	/^  NAL_UNIT_EOB,                     \/\/ 37$/;"	e	enum:NalUnitType
NAL_UNIT_EOS	TypeDef.h	/^  NAL_UNIT_EOS,                     \/\/ 36$/;"	e	enum:NalUnitType
NAL_UNIT_FILLER_DATA	TypeDef.h	/^  NAL_UNIT_FILLER_DATA,             \/\/ 38$/;"	e	enum:NalUnitType
NAL_UNIT_INVALID	TypeDef.h	/^  NAL_UNIT_INVALID,$/;"	e	enum:NalUnitType
NAL_UNIT_PPS	TypeDef.h	/^  NAL_UNIT_PPS,                     \/\/ 34$/;"	e	enum:NalUnitType
NAL_UNIT_PREFIX_SEI	TypeDef.h	/^  NAL_UNIT_PREFIX_SEI,              \/\/ 39$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_IRAP_VCL22	TypeDef.h	/^  NAL_UNIT_RESERVED_IRAP_VCL22,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_IRAP_VCL23	TypeDef.h	/^  NAL_UNIT_RESERVED_IRAP_VCL23,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL41	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL41,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL42	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL42,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL43	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL43,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL44	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL44,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL45	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL45,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL46	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL46,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_NVCL47	TypeDef.h	/^  NAL_UNIT_RESERVED_NVCL47,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL24	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL24,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL25	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL25,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL26	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL26,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL27	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL27,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL28	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL28,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL29	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL29,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL30	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL30,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL31	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL31,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_N10	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_N10,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_N12	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_N12,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_N14	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_N14,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_R11	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_R11,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_R13	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_R13,$/;"	e	enum:NalUnitType
NAL_UNIT_RESERVED_VCL_R15	TypeDef.h	/^  NAL_UNIT_RESERVED_VCL_R15,$/;"	e	enum:NalUnitType
NAL_UNIT_SPS	TypeDef.h	/^  NAL_UNIT_SPS,                     \/\/ 33$/;"	e	enum:NalUnitType
NAL_UNIT_SUFFIX_SEI	TypeDef.h	/^  NAL_UNIT_SUFFIX_SEI,              \/\/ 40$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_48	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_48,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_49	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_49,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_50	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_50,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_51	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_51,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_52	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_52,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_53	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_53,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_54	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_54,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_55	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_55,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_56	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_56,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_57	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_57,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_58	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_58,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_59	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_59,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_60	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_60,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_61	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_61,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_62	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_62,$/;"	e	enum:NalUnitType
NAL_UNIT_UNSPECIFIED_63	TypeDef.h	/^  NAL_UNIT_UNSPECIFIED_63,$/;"	e	enum:NalUnitType
NAL_UNIT_VPS	TypeDef.h	/^  NAL_UNIT_VPS,                     \/\/ 32$/;"	e	enum:NalUnitType
NDEBUG	CommonDef.h	43;"	d
NEIGHBOURHOOD_00_CONTEXT_1_THRESHOLD_4x4	ContextTables.h	92;"	d
NEIGHBOURHOOD_00_CONTEXT_2_THRESHOLD_4x4	ContextTables.h	93;"	d
NONE	TypeDef.h	/^    NONE     = 0,$/;"	e	enum:Level::Name
NONE	TypeDef.h	/^    NONE = 0,$/;"	e	enum:Profile::Name
NOT_VALID	CommonDef.h	/^static const Int NOT_VALID =                                       -1;$/;"	v
NO_DISPLAY	SEI.h	/^    NO_DISPLAY                           = 135,$/;"	e	enum:SEI::PayloadType
NO_SLICES	TypeDef.h	/^  NO_SLICES              = 0,          \/\/\/< don't use slices \/ slice segments$/;"	e	enum:SliceConstraint
NTAPS_CHROMA	TComInterpolationFilter.h	48;"	d
NTAPS_LUMA	TComInterpolationFilter.h	47;"	d
NULL	CommonDef.h	108;"	d
NUMBER_INPUT_COLOUR_SPACE_CONVERSIONS	TypeDef.h	/^  NUMBER_INPUT_COLOUR_SPACE_CONVERSIONS = 4$/;"	e	enum:InputColourSpaceConversion
NUMBER_OF_HASHTYPES	TypeDef.h	/^  NUMBER_OF_HASHTYPES      = 4$/;"	e	enum:HashType
NUMBER_OF_PART_SIZES	TypeDef.h	/^  NUMBER_OF_PART_SIZES = 8$/;"	e	enum:PartSize
NUMBER_OF_PREDICTION_MODES	TypeDef.h	/^  NUMBER_OF_PREDICTION_MODES = 2,$/;"	e	enum:PredMode
NUMBER_OF_RDPCM_MODES	TypeDef.h	/^  NUMBER_OF_RDPCM_MODES = 3$/;"	e	enum:RDPCMMode
NUMBER_OF_RDPCM_SIGNALLING_MODES	TypeDef.h	/^  NUMBER_OF_RDPCM_SIGNALLING_MODES = 2$/;"	e	enum:RDPCMSignallingMode
NUMBER_OF_SECTIONS	TComTU.cpp	/^\/*static*\/ const UInt TComTU::NUMBER_OF_SECTIONS[TComTU::NUMBER_OF_SPLIT_MODES] = { 1, 2, 4 };$/;"	m	class:TComTU	file:
NUMBER_OF_SECTIONS	TComTU.h	/^    static const UInt NUMBER_OF_SECTIONS[NUMBER_OF_SPLIT_MODES];$/;"	m	class:TComTU
NUMBER_OF_SLICE_CONSTRAINT_MODES	TypeDef.h	/^  NUMBER_OF_SLICE_CONSTRAINT_MODES = 4$/;"	e	enum:SliceConstraint
NUMBER_OF_SLICE_TYPES	TypeDef.h	/^  NUMBER_OF_SLICE_TYPES = 3$/;"	e	enum:SliceType
NUMBER_OF_SPLIT_MODES	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	e	enum:TComTU::TU_SPLIT_MODE
NUMBER_OF_STORED_RESIDUAL_TYPES	TypeDef.h	/^  NUMBER_OF_STORED_RESIDUAL_TYPES = 2$/;"	e	enum:StoredResidualType
NUMBER_OF_TIERS	TypeDef.h	/^    NUMBER_OF_TIERS = 2$/;"	e	enum:Level::Tier
NUM_8x8_BLKS_16x16	SEIFilmGrainSynthesizer.h	71;"	d
NUM_8x8_BLKS_16x16	SEIFilmGrainSynthesizer.h	92;"	d
NUM_ABS_FLAG_CTX	ContextTables.h	133;"	d
NUM_ABS_FLAG_CTX_CHROMA	ContextTables.h	130;"	d
NUM_ABS_FLAG_CTX_LUMA	ContextTables.h	129;"	d
NUM_ABS_FLAG_CTX_PER_SET	ContextTables.h	115;"	d
NUM_CHROMA_FORMAT	TypeDef.h	/^  NUM_CHROMA_FORMAT = 4$/;"	e	enum:ChromaFormat
NUM_CHROMA_MODE	CommonDef.h	/^static const Int NUM_CHROMA_MODE =                                  5; \/\/\/< total number of chroma modes$/;"	v
NUM_CHROMA_PRED_CTX	ContextTables.h	62;"	d
NUM_CHROMA_QP_ADJ_FLAG_CTX	ContextTables.h	65;"	d
NUM_CHROMA_QP_ADJ_IDC_CTX	ContextTables.h	66;"	d
NUM_CROSS_COMPONENT_PREDICTION_CTX	ContextTables.h	161;"	d
NUM_CTX_LAST_FLAG_SETS	ContextTables.h	106;"	d
NUM_CTX_LAST_FLAG_XY	ContextTables.h	108;"	d
NUM_CTX_SETS_CHROMA	ContextTables.h	120;"	d
NUM_CTX_SETS_LUMA	ContextTables.h	119;"	d
NUM_CUT_OFF_FREQ	SEIFilmGrainSynthesizer.h	79;"	d
NUM_CU_TRANSQUANT_BYPASS_FLAG_CTX	ContextTables.h	159;"	d
NUM_DELTA_QP_CTX	ContextTables.h	71;"	d
NUM_EDGE_DIR	TypeDef.h	/^  NUM_EDGE_DIR = 2$/;"	e	enum:DeblockEdgeDir
NUM_EXPLICIT_RDPCM_DIR_CTX	ContextTables.h	75;"	d
NUM_EXPLICIT_RDPCM_FLAG_CTX	ContextTables.h	74;"	d
NUM_INTER_DIR_CTX	ContextTables.h	63;"	d
NUM_INTRA_MODE	CommonDef.h	/^static const Int NUM_INTRA_MODE =                                  36;$/;"	v
NUM_INTRA_PREDICT_CTX	ContextTables.h	60;"	d
NUM_LONG_TERM_REF_PIC_SPS	CommonDef.h	/^static const Int NUM_LONG_TERM_REF_PIC_SPS =                        0;$/;"	v
NUM_MERGE_FLAG_EXT_CTX	ContextTables.h	54;"	d
NUM_MERGE_IDX_EXT_CTX	ContextTables.h	55;"	d
NUM_MOST_PROBABLE_MODES	TComDataCU.h	/^static const UInt NUM_MOST_PROBABLE_MODES=3;$/;"	v
NUM_MVP_IDX_CTX	ContextTables.h	152;"	d
NUM_MV_RES_CTX	ContextTables.h	64;"	d
NUM_ONE_FLAG_CTX	ContextTables.h	132;"	d
NUM_ONE_FLAG_CTX_CHROMA	ContextTables.h	127;"	d
NUM_ONE_FLAG_CTX_LUMA	ContextTables.h	126;"	d
NUM_ONE_FLAG_CTX_PER_SET	ContextTables.h	114;"	d
NUM_PART_SIZE_CTX	ContextTables.h	57;"	d
NUM_PIC_YUV	TComPic.h	/^  typedef enum { PIC_YUV_ORG=0, PIC_YUV_REC=1, PIC_YUV_TRUE_ORG=2, NUM_PIC_YUV=3 } PIC_YUV_T;$/;"	e	enum:TComPic::__anon2
NUM_PPS_EXTENSION_FLAGS	TypeDef.h	/^  NUM_PPS_EXTENSION_FLAGS = 8$/;"	e	enum:PPSExtensionFlagIndex
NUM_PRED_BUF	TComPrediction.h	/^  NUM_PRED_BUF=2$/;"	e	enum:PRED_BUF_E
NUM_PRED_MODE_CTX	ContextTables.h	58;"	d
NUM_QT_CBF_CTX_PER_SET	ContextTables.h	143;"	d
NUM_QT_CBF_CTX_SETS	ContextTables.h	141;"	d
NUM_QT_ROOT_CBF_CTX	ContextTables.h	70;"	d
NUM_REF_NO_CTX	ContextTables.h	68;"	d
NUM_REF_PIC_LIST_01	TypeDef.h	/^  NUM_REF_PIC_LIST_01          = 2,$/;"	e	enum:RefPicList
NUM_SAO_BO_CLASSES	TypeDef.h	571;"	d
NUM_SAO_BO_CLASSES_LOG2	TypeDef.h	570;"	d
NUM_SAO_EO_CLASSES	TypeDef.h	/^  NUM_SAO_EO_CLASSES,$/;"	e	enum:SAOEOClasses
NUM_SAO_EO_TYPES_LOG2	TypeDef.h	558;"	d
NUM_SAO_MERGE_FLAG_CTX	ContextTables.h	154;"	d
NUM_SAO_MERGE_TYPES	TypeDef.h	/^  NUM_SAO_MERGE_TYPES$/;"	e	enum:SAOModeMergeTypes
NUM_SAO_MODES	TypeDef.h	/^  NUM_SAO_MODES$/;"	e	enum:SAOMode
NUM_SAO_NEW_TYPES	TypeDef.h	/^  NUM_SAO_NEW_TYPES$/;"	e	enum:SAOModeNewTypes
NUM_SAO_TYPE_IDX_CTX	ContextTables.h	155;"	d
NUM_SIG_CG_FLAG_CTX	ContextTables.h	73;"	d
NUM_SIG_FLAG_CTX	ContextTables.h	100;"	d
NUM_SIG_FLAG_CTX_CHROMA	ContextTables.h	82;"	d
NUM_SIG_FLAG_CTX_LUMA	ContextTables.h	81;"	d
NUM_SKIP_FLAG_CTX	ContextTables.h	52;"	d
NUM_SPLIT_FLAG_CTX	ContextTables.h	51;"	d
NUM_SPS_EXTENSION_FLAGS	TypeDef.h	/^  NUM_SPS_EXTENSION_FLAGS = 8$/;"	e	enum:SPSExtensionFlagIndex
NUM_TRANSFORMSKIP_FLAG_CTX	ContextTables.h	157;"	d
NUM_TRANS_SUBDIV_FLAG_CTX	ContextTables.h	69;"	d
NVM_BITS	CommonDef.h	105;"	d
NVM_COMPILEDBY	CommonDef.h	75;"	d
NVM_COMPILEDBY	CommonDef.h	84;"	d
NVM_COMPILEDBY	CommonDef.h	86;"	d
NVM_COMPILEDBY	CommonDef.h	90;"	d
NVM_ONARCH	CommonDef.h	77;"	d
NVM_ONARCH	CommonDef.h	79;"	d
NVM_ONOS	CommonDef.h	100;"	d
NVM_ONOS	CommonDef.h	102;"	d
NVM_ONOS	CommonDef.h	94;"	d
NVM_ONOS	CommonDef.h	96;"	d
NVM_ONOS	CommonDef.h	98;"	d
NV_VERSION	CommonDef.h	68;"	d
NalUnitType	TypeDef.h	/^enum NalUnitType$/;"	g
Name	TypeDef.h	/^  enum Name$/;"	g	namespace:Level
Name	TypeDef.h	/^  enum Name$/;"	g	namespace:Profile
O0043_BEST_EFFORT_DECODING	TypeDef.h	126;"	d
OMNI_VIEWPORT	SEI.h	/^    OMNI_VIEWPORT                        = 156,$/;"	e	enum:SEI::PayloadType
OPTIONAL	ProfileLevelTierFeatures.h	/^    OPTIONAL=1,$/;"	e	enum:ProfileFeatures::TRISTATE
OmniViewport	SEI.h	/^  struct OmniViewport$/;"	s	class:SEIOmniViewport
OutputDashedLine	TComCodingStatistics.h	/^    static Void OutputDashedLine(const TChar *pText)$/;"	f	class:TComCodingStatistics
OutputLine	TComCodingStatistics.h	/^    static Void OutputLine(const TChar *pName, const TChar sep, UInt width, const TChar *pSubClassStr, const SStat &sCABAC, const SStat &sEP)$/;"	f	class:TComCodingStatistics
OutputLine	TComCodingStatistics.h	/^    static Void OutputLine(const TChar *pName, const TChar sep, const TChar *pWidthString, const TChar *pSubClassStr,  const SStat &sEP)$/;"	f	class:TComCodingStatistics
OutputLine	TComCodingStatistics.h	/^    static Void OutputLine(const TChar *pName, const TChar sep, const TChar *pWidthString, const TChar *pSubClassStr, const SStat &sCABAC, const SStat &sEP)$/;"	f	class:TComCodingStatistics
PAN_SCAN_RECT	SEI.h	/^    PAN_SCAN_RECT                        = 2,   \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
PCMLFDisableProcess	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::PCMLFDisableProcess (TComPic* pcPic)$/;"	f	class:TComSampleAdaptiveOffset
PICTURE_SNAPSHOT	SEI.h	/^    PICTURE_SNAPSHOT                     = 15,  \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
PICTURE_TIMING	SEI.h	/^    PICTURE_TIMING                       = 1,$/;"	e	enum:SEI::PayloadType
PIC_YUV_ORG	TComPic.h	/^  typedef enum { PIC_YUV_ORG=0, PIC_YUV_REC=1, PIC_YUV_TRUE_ORG=2, NUM_PIC_YUV=3 } PIC_YUV_T;$/;"	e	enum:TComPic::__anon2
PIC_YUV_REC	TComPic.h	/^  typedef enum { PIC_YUV_ORG=0, PIC_YUV_REC=1, PIC_YUV_TRUE_ORG=2, NUM_PIC_YUV=3 } PIC_YUV_T;$/;"	e	enum:TComPic::__anon2
PIC_YUV_T	TComPic.h	/^  typedef enum { PIC_YUV_ORG=0, PIC_YUV_REC=1, PIC_YUV_TRUE_ORG=2, NUM_PIC_YUV=3 } PIC_YUV_T;$/;"	t	class:TComPic	typeref:enum:TComPic::__anon2
PIC_YUV_TRUE_ORG	TComPic.h	/^  typedef enum { PIC_YUV_ORG=0, PIC_YUV_REC=1, PIC_YUV_TRUE_ORG=2, NUM_PIC_YUV=3 } PIC_YUV_T;$/;"	e	enum:TComPic::__anon2
PLANAR_IDX	CommonDef.h	/^static const Int PLANAR_IDX =                                       0;$/;"	v
POST_FILTER_HINT	SEI.h	/^    POST_FILTER_HINT                     = 22,  \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
POS_2	SEIFilmGrainSynthesizer.h	106;"	d
POS_30	SEIFilmGrainSynthesizer.h	105;"	d
PPSExtensionFlagIndex	TypeDef.h	/^enum PPSExtensionFlagIndex$/;"	g
PPS_EXT__REXT	TypeDef.h	/^  PPS_EXT__REXT           = 0,$/;"	e	enum:PPSExtensionFlagIndex
PRED_BUF	TComPrediction.h	/^} PRED_BUF;$/;"	t	typeref:enum:PRED_BUF_E
PRED_BUF_E	TComPrediction.h	/^typedef enum PRED_BUF_E$/;"	g
PRED_BUF_FILTERED	TComPrediction.h	/^  PRED_BUF_FILTERED=1,$/;"	e	enum:PRED_BUF_E
PRED_BUF_UNFILTERED	TComPrediction.h	/^  PRED_BUF_UNFILTERED=0,$/;"	e	enum:PRED_BUF_E
PRINT_CONSTANT	Debug.h	58;"	d
PRINT_MACRO_VALUES	TypeDef.h	63;"	d
PRINT_RPS_INFO	TypeDef.h	77;"	d
PROGRESSIVE_REFINEMENT_SEGMENT_END	SEI.h	/^    PROGRESSIVE_REFINEMENT_SEGMENT_END   = 17,  \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
PROGRESSIVE_REFINEMENT_SEGMENT_START	SEI.h	/^    PROGRESSIVE_REFINEMENT_SEGMENT_START = 16,  \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
PSLICE_CHROMA_ABS_CONTEXT	ContextTables.h	411;"	d
PSLICE_CHROMA_CBF_CONTEXT	ContextTables.h	302;"	d
PSLICE_CHROMA_LAST_POSITION_CONTEXT	ContextTables.h	336;"	d
PSLICE_CHROMA_ONE_CONTEXT	ContextTables.h	407;"	d
PSLICE_CHROMA_SIGNIFICANCE_CONTEXT	ContextTables.h	378;"	d
PSLICE_LUMA_ABS_CONTEXT	ContextTables.h	402;"	d
PSLICE_LUMA_CBF_CONTEXT	ContextTables.h	298;"	d
PSLICE_LUMA_LAST_POSITION_CONTEXT	ContextTables.h	332;"	d
PSLICE_LUMA_ONE_CONTEXT	ContextTables.h	398;"	d
PSLICE_LUMA_SIGNIFICANCE_CONTEXT	ContextTables.h	373;"	d
P_SLICE	TypeDef.h	/^  P_SLICE               = 1,$/;"	e	enum:SliceType
PanScanRect	SEI.h	/^  struct PanScanRect$/;"	s	class:SEIPanScanRect
ParameterSetManager	TComSlice.cpp	/^ParameterSetManager::ParameterSetManager()$/;"	f	class:ParameterSetManager
ParameterSetManager	TComSlice.h	/^class ParameterSetManager$/;"	c
ParameterSetMap	TComSlice.h	/^  ParameterSetMap(Int maxId)$/;"	f	class:ParameterSetMap
ParameterSetMap	TComSlice.h	/^template <class T> class ParameterSetMap$/;"	c
Parent	TComTU.h	/^          TComTU *Parent()       { return mpParent; }$/;"	f	class:TComTU
Parent	TComTU.h	/^    const TComTU *Parent() const { return mpParent; }$/;"	f	class:TComTU
PartSize	TypeDef.h	/^enum PartSize$/;"	g
PayloadType	SEI.h	/^  enum PayloadType$/;"	g	class:SEI
Pel	TypeDef.h	/^typedef       Int             Pel;               \/\/\/< pixel type$/;"	t
Pel	TypeDef.h	/^typedef       Short           Pel;               \/\/\/< pixel type$/;"	t
PredMode	TypeDef.h	/^enum PredMode$/;"	g
ProcessChannelSection	TComTU.h	/^    Bool ProcessChannelSection(const ChannelType chType)       const { return mRect[chType].width != 0; }$/;"	f	class:TComTU
ProcessComponentSection	TComTU.h	/^    Bool ProcessComponentSection(const ComponentID compID)     const { return mRect[compID].width != 0; }$/;"	f	class:TComTU
ProcessingAllQuadrants	TComTU.h	/^    Bool ProcessingAllQuadrants(const ComponentID compID)      const { return mCodeAll[compID]; }$/;"	f	class:TComTU
Profile	TypeDef.h	/^namespace Profile$/;"	n
ProfileFeatures	ProfileLevelTierFeatures.h	/^struct ProfileFeatures$/;"	s
ProfileLevelTierFeatures	ProfileLevelTierFeatures.h	/^    ProfileLevelTierFeatures() : m_pProfile(0), m_pLevelTier(0), m_tier(Level::MAIN), m_maxRawCtuBits(0) { }$/;"	f	class:ProfileLevelTierFeatures
ProfileLevelTierFeatures	ProfileLevelTierFeatures.h	/^class ProfileLevelTierFeatures$/;"	c
ProfileTierLevel	TComSlice.cpp	/^ProfileTierLevel::ProfileTierLevel()$/;"	f	class:ProfileTierLevel
ProfileTierLevel	TComSlice.h	/^class ProfileTierLevel$/;"	c
QP_BITS	TComTrQuant.h	54;"	d
QUAD_SPLIT	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	e	enum:TComTU::TU_SPLIT_MODE
QUANT_SHIFT	CommonDef.h	/^static const Int QUANT_SHIFT =                                     14; \/\/\/< Q(4) = 2^14$/;"	v
Q_FORMAT_SCALING	SEIFilmGrainSynthesizer.h	64;"	d
Qp	TComTrQuant.h	/^  Int Qp;$/;"	m	struct:QpParam
QpParam	TComTrQuant.cpp	/^QpParam::QpParam(const Int           qpy,$/;"	f	class:QpParam
QpParam	TComTrQuant.cpp	/^QpParam::QpParam(const TComDataCU &cu, const ComponentID compID)$/;"	f	class:QpParam
QpParam	TComTrQuant.h	/^struct QpParam$/;"	s
R64_IDCT	SEIFilmGrainSynthesizer.cpp	/^static const int8_t R64_IDCT[64][64] =$/;"	v	file:
RDOQ_CHROMA	TComTrQuant.cpp	64;"	d	file:
RDOQ_CHROMA_LAMBDA	TypeDef.h	130;"	d
RDPCMMode	TypeDef.h	/^enum RDPCMMode$/;"	g
RDPCMSignallingMode	TypeDef.h	/^enum RDPCMSignallingMode$/;"	g
RDPCM_HOR	TypeDef.h	/^  RDPCM_HOR             = 1,$/;"	e	enum:RDPCMMode
RDPCM_OFF	TypeDef.h	/^  RDPCM_OFF             = 0,$/;"	e	enum:RDPCMMode
RDPCM_SIGNAL_EXPLICIT	TypeDef.h	/^  RDPCM_SIGNAL_EXPLICIT            = 1,$/;"	e	enum:RDPCMSignallingMode
RDPCM_SIGNAL_IMPLICIT	TypeDef.h	/^  RDPCM_SIGNAL_IMPLICIT            = 0,$/;"	e	enum:RDPCMSignallingMode
RDPCM_VER	TypeDef.h	/^  RDPCM_VER             = 2,$/;"	e	enum:RDPCMMode
RECOVERY_POINT	SEI.h	/^    RECOVERY_POINT                       = 6,$/;"	e	enum:SEI::PayloadType
REDUCED_ENCODER_MEMORY	TypeDef.h	106;"	d
REF_PIC_LIST_0	TypeDef.h	/^  REF_PIC_LIST_0               = 0,   \/\/\/< reference list 0$/;"	e	enum:RefPicList
REF_PIC_LIST_1	TypeDef.h	/^  REF_PIC_LIST_1               = 1,   \/\/\/< reference list 1$/;"	e	enum:RefPicList
REF_PIC_LIST_NUM_IDX	TComSlice.h	/^static const UInt REF_PIC_LIST_NUM_IDX=32;$/;"	v
REF_PIC_LIST_X	TypeDef.h	/^  REF_PIC_LIST_X               = 100  \/\/\/< special mark$/;"	e	enum:RefPicList
REGIONAL_NESTING	SEI.h	/^    REGIONAL_NESTING                     = 157,$/;"	e	enum:SEI::PayloadType
REGION_REFRESH_INFO	SEI.h	/^    REGION_REFRESH_INFO                  = 134,$/;"	e	enum:SEI::PayloadType
REGION_WISE_PACKING	SEI.h	/^    REGION_WISE_PACKING                  = 155, $/;"	e	enum:SEI::PayloadType
RESIDUAL_ENCODER_SIDE	TypeDef.h	/^  RESIDUAL_ENCODER_SIDE           = 1,$/;"	e	enum:StoredResidualType
RESIDUAL_RECONSTRUCTED	TypeDef.h	/^  RESIDUAL_RECONSTRUCTED          = 0,$/;"	e	enum:StoredResidualType
RExt__DECODER_DEBUG_BIT_STATISTICS	TypeDef.h	68;"	d
RExt__GOLOMB_RICE_ADAPTATION_STATISTICS_SETS	CommonDef.h	/^static const Int RExt__GOLOMB_RICE_ADAPTATION_STATISTICS_SETS =     4;$/;"	v
RExt__GOLOMB_RICE_INCREMENT_DIVISOR	CommonDef.h	/^static const Int RExt__GOLOMB_RICE_INCREMENT_DIVISOR =              4;$/;"	v
RExt__HIGH_BIT_DEPTH_SUPPORT	TypeDef.h	134;"	d
RExt__HIGH_PRECISION_FORWARD_TRANSFORM	TypeDef.h	151;"	d
RExt__HIGH_PRECISION_FORWARD_TRANSFORM	TypeDef.h	154;"	d
RExt__PREDICTION_WEIGHTING_ANALYSIS_DC_PRECISION	CommonDef.h	/^static const Int RExt__PREDICTION_WEIGHTING_ANALYSIS_DC_PRECISION = 0; \/\/\/< Additional fixed bit precision used during encoder-side weighting prediction analysis. Currently only used when high_precision_prediction_weighting_flag is set, for backwards compatibility reasons.$/;"	v
RNSEIWindow	TypeDef.h	/^  RNSEIWindow() : Window(), m_regionId(0) {}$/;"	f	class:RNSEIWindow
RNSEIWindow	TypeDef.h	/^class RNSEIWindow : public Window$/;"	c
RNSEIWindowVec	TypeDef.h	/^typedef std::vector<RNSEIWindow> RNSEIWindowVec;$/;"	t
RVM_VCEGAM10_M	CommonDef.h	/^static const Int RVM_VCEGAM10_M =                                   4;$/;"	v
RasterAddress	TComDataCU.h	/^namespace RasterAddress$/;"	n
RefPicList	TypeDef.h	/^enum RefPicList$/;"	g
RegionalSEI	SEI.h	/^  RegionalSEI(): m_seiMessage(NULL) {}$/;"	f	class:RegionalSEI
RegionalSEI	SEI.h	/^  RegionalSEI(SEI *sei, RNSEIWindowVec &regions) $/;"	f	class:RegionalSEI
RegionalSEI	SEI.h	/^class RegionalSEI$/;"	c
SAOBlkParam	TComSampleAdaptiveOffset.cpp	/^SAOBlkParam::SAOBlkParam()$/;"	f	class:SAOBlkParam
SAOBlkParam	TypeDef.h	/^struct SAOBlkParam$/;"	s
SAOEOClasses	TypeDef.h	/^enum SAOEOClasses$/;"	g
SAOMode	TypeDef.h	/^enum SAOMode \/\/mode$/;"	g
SAOModeMergeTypes	TypeDef.h	/^enum SAOModeMergeTypes$/;"	g
SAOModeNewTypes	TypeDef.h	/^enum SAOModeNewTypes$/;"	g
SAOOffset	TComSampleAdaptiveOffset.cpp	/^SAOOffset::SAOOffset()$/;"	f	class:SAOOffset
SAOOffset	TypeDef.h	/^struct SAOOffset$/;"	s
SAOProcess	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::SAOProcess(TComPic* pDecPic)$/;"	f	class:TComSampleAdaptiveOffset
SAO_CLASS_EO_FULL_PEAK	TypeDef.h	/^  SAO_CLASS_EO_FULL_PEAK   = 4,$/;"	e	enum:SAOEOClasses
SAO_CLASS_EO_FULL_VALLEY	TypeDef.h	/^  SAO_CLASS_EO_FULL_VALLEY = 0,$/;"	e	enum:SAOEOClasses
SAO_CLASS_EO_HALF_PEAK	TypeDef.h	/^  SAO_CLASS_EO_HALF_PEAK   = 3,$/;"	e	enum:SAOEOClasses
SAO_CLASS_EO_HALF_VALLEY	TypeDef.h	/^  SAO_CLASS_EO_HALF_VALLEY = 1,$/;"	e	enum:SAOEOClasses
SAO_CLASS_EO_PLAIN	TypeDef.h	/^  SAO_CLASS_EO_PLAIN       = 2,$/;"	e	enum:SAOEOClasses
SAO_MERGE_ABOVE	TypeDef.h	/^  SAO_MERGE_ABOVE,$/;"	e	enum:SAOModeMergeTypes
SAO_MERGE_LEFT	TypeDef.h	/^  SAO_MERGE_LEFT =0,$/;"	e	enum:SAOModeMergeTypes
SAO_MODE_MERGE	TypeDef.h	/^  SAO_MODE_MERGE,$/;"	e	enum:SAOMode
SAO_MODE_NEW	TypeDef.h	/^  SAO_MODE_NEW,$/;"	e	enum:SAOMode
SAO_MODE_OFF	TypeDef.h	/^  SAO_MODE_OFF = 0,$/;"	e	enum:SAOMode
SAO_TYPE_BO	TypeDef.h	/^  SAO_TYPE_BO = SAO_TYPE_START_BO,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_EO_0	TypeDef.h	/^  SAO_TYPE_EO_0 = SAO_TYPE_START_EO,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_EO_135	TypeDef.h	/^  SAO_TYPE_EO_135,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_EO_45	TypeDef.h	/^  SAO_TYPE_EO_45,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_EO_90	TypeDef.h	/^  SAO_TYPE_EO_90,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_START_BO	TypeDef.h	/^  SAO_TYPE_START_BO,$/;"	e	enum:SAOModeNewTypes
SAO_TYPE_START_EO	TypeDef.h	/^  SAO_TYPE_START_EO =0,$/;"	e	enum:SAOModeNewTypes
SBH_THRESHOLD	CommonDef.h	/^static const Int SBH_THRESHOLD =                                    4; \/\/\/< value of the fixed SBH controlling threshold$/;"	v
SCALABLE_NESTING	SEI.h	/^    SCALABLE_NESTING                     = 133,$/;"	e	enum:SEI::PayloadType
SCALE_BITS	CommonDef.h	/^static const Int SCALE_BITS =                                      15; \/\/\/< For fractional bit estimates in RDOQ$/;"	v
SCALE_DOWN_422	SEIFilmGrainSynthesizer.h	63;"	d
SCALING_LIST_16x16	TypeDef.h	/^  SCALING_LIST_16x16,$/;"	e	enum:ScalingListSize
SCALING_LIST_32x32	TypeDef.h	/^  SCALING_LIST_32x32,$/;"	e	enum:ScalingListSize
SCALING_LIST_4x4	TypeDef.h	/^  SCALING_LIST_4x4 = 0,$/;"	e	enum:ScalingListSize
SCALING_LIST_8x8	TypeDef.h	/^  SCALING_LIST_8x8,$/;"	e	enum:ScalingListSize
SCALING_LIST_BITS	CommonDef.h	/^static const Int SCALING_LIST_BITS =                               8 ; \/\/\/< bit depth of scaling list entries$/;"	v
SCALING_LIST_DC	CommonDef.h	/^static const Int SCALING_LIST_DC =                                16 ; \/\/\/< default DC value$/;"	v
SCALING_LIST_DEFAULT	TypeDef.h	/^  SCALING_LIST_DEFAULT,$/;"	e	enum:ScalingListMode
SCALING_LIST_FILE_READ	TypeDef.h	/^  SCALING_LIST_FILE_READ$/;"	e	enum:ScalingListMode
SCALING_LIST_NUM	CommonDef.h	/^static const Int SCALING_LIST_NUM = MAX_NUM_COMPONENT * NUMBER_OF_PREDICTION_MODES; \/\/\/< list number for quantization matrix$/;"	v
SCALING_LIST_OFF	TypeDef.h	/^  SCALING_LIST_OFF,$/;"	e	enum:ScalingListMode
SCALING_LIST_REM_NUM	CommonDef.h	/^static const Int SCALING_LIST_REM_NUM =                             6;$/;"	v
SCALING_LIST_SIZE_NUM	TypeDef.h	/^  SCALING_LIST_SIZE_NUM$/;"	e	enum:ScalingListSize
SCALING_LIST_START_VALUE	CommonDef.h	/^static const Int SCALING_LIST_START_VALUE =                        8 ; \/\/\/< start value for dpcm mode$/;"	v
SCAN_DIAG	TypeDef.h	/^  SCAN_DIAG = 0,        \/\/\/< up-right diagonal scan$/;"	e	enum:COEFF_SCAN_TYPE
SCAN_GROUPED_4x4	TypeDef.h	/^  SCAN_GROUPED_4x4 = 1,$/;"	e	enum:COEFF_SCAN_GROUP_TYPE
SCAN_HOR	TypeDef.h	/^  SCAN_HOR  = 1,        \/\/\/< horizontal first scan$/;"	e	enum:COEFF_SCAN_TYPE
SCAN_NUMBER_OF_GROUP_TYPES	TypeDef.h	/^  SCAN_NUMBER_OF_GROUP_TYPES = 2$/;"	e	enum:COEFF_SCAN_GROUP_TYPE
SCAN_NUMBER_OF_TYPES	TypeDef.h	/^  SCAN_NUMBER_OF_TYPES = 3$/;"	e	enum:COEFF_SCAN_TYPE
SCAN_UNGROUPED	TypeDef.h	/^  SCAN_UNGROUPED   = 0,$/;"	e	enum:COEFF_SCAN_GROUP_TYPE
SCAN_VER	TypeDef.h	/^  SCAN_VER  = 2,        \/\/\/< vertical first scan$/;"	e	enum:COEFF_SCAN_TYPE
SCENE_INFO	SEI.h	/^    SCENE_INFO                           = 9,   \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
SChar	TypeDef.h	/^typedef       signed char         SChar; \/\/ Signed 8-bit values$/;"	t
SEGM_RECT_FRAME_PACKING	SEI.h	/^    SEGM_RECT_FRAME_PACKING              = 138,$/;"	e	enum:SEI::PayloadType
SEI	SEI.h	/^  SEI() {}$/;"	f	class:SEI
SEI	SEI.h	/^class SEI$/;"	c
SEIActiveParameterSets	SEI.h	/^  SEIActiveParameterSets()$/;"	f	class:SEIActiveParameterSets
SEIActiveParameterSets	SEI.h	/^class SEIActiveParameterSets : public SEI$/;"	c
SEIAlternativeTransferCharacteristics	SEI.h	/^  SEIAlternativeTransferCharacteristics() : m_preferredTransferCharacteristics(18)$/;"	f	class:SEIAlternativeTransferCharacteristics
SEIAlternativeTransferCharacteristics	SEI.h	/^class SEIAlternativeTransferCharacteristics : public SEI$/;"	c
SEIAmbientViewingEnvironment	SEI.h	/^  SEIAmbientViewingEnvironment() { }$/;"	f	class:SEIAmbientViewingEnvironment
SEIAmbientViewingEnvironment	SEI.h	/^class SEIAmbientViewingEnvironment : public SEI$/;"	c
SEIAnnotatedRegions	SEI.h	/^  SEIAnnotatedRegions() {}$/;"	f	class:SEIAnnotatedRegions
SEIAnnotatedRegions	SEI.h	/^class SEIAnnotatedRegions : public SEI$/;"	c
SEIBufferingPeriod	SEI.h	/^  SEIBufferingPeriod()$/;"	f	class:SEIBufferingPeriod
SEIBufferingPeriod	SEI.h	/^class SEIBufferingPeriod : public SEI$/;"	c
SEIChromaResamplingFilterHint	SEI.h	/^  SEIChromaResamplingFilterHint() {}$/;"	f	class:SEIChromaResamplingFilterHint
SEIChromaResamplingFilterHint	SEI.h	/^class SEIChromaResamplingFilterHint : public SEI$/;"	c
SEICodedRegionCompletion	SEI.h	/^  SEICodedRegionCompletion() { }$/;"	f	class:SEICodedRegionCompletion
SEICodedRegionCompletion	SEI.h	/^class SEICodedRegionCompletion : public SEI$/;"	c
SEIColourRemappingInfo	SEI.h	/^  SEIColourRemappingInfo() {}$/;"	f	class:SEIColourRemappingInfo
SEIColourRemappingInfo	SEI.h	/^class SEIColourRemappingInfo : public SEI$/;"	c
SEIContentColourVolume	SEI.h	/^  SEIContentColourVolume() {}$/;"	f	class:SEIContentColourVolume
SEIContentColourVolume	SEI.h	/^class SEIContentColourVolume : public SEI$/;"	c
SEIContentLightLevelInfo	SEI.h	/^    SEIContentLightLevelInfo() { }$/;"	f	class:SEIContentLightLevelInfo
SEIContentLightLevelInfo	SEI.h	/^class SEIContentLightLevelInfo : public SEI$/;"	c
SEICubemapProjection	SEI.h	/^  SEICubemapProjection() {}$/;"	f	class:SEICubemapProjection
SEICubemapProjection	SEI.h	/^class SEICubemapProjection : public SEI$/;"	c
SEIDecodedPictureHash	SEI.h	/^  SEIDecodedPictureHash() {}$/;"	f	class:SEIDecodedPictureHash
SEIDecodedPictureHash	SEI.h	/^class SEIDecodedPictureHash : public SEI$/;"	c
SEIDecodingUnitInfo	SEI.h	/^  SEIDecodingUnitInfo()$/;"	f	class:SEIDecodingUnitInfo
SEIDecodingUnitInfo	SEI.h	/^class SEIDecodingUnitInfo : public SEI$/;"	c
SEIDeinterlaceFieldIdentification	SEI.h	/^    SEIDeinterlaceFieldIdentification() { }$/;"	f	class:SEIDeinterlaceFieldIdentification
SEIDeinterlaceFieldIdentification	SEI.h	/^class SEIDeinterlaceFieldIdentification : public SEI$/;"	c
SEIDependentRAPIndication	SEI.h	/^  SEIDependentRAPIndication() { }$/;"	f	class:SEIDependentRAPIndication
SEIDependentRAPIndication	SEI.h	/^class SEIDependentRAPIndication : public SEI$/;"	c
SEIDisplayOrientation	SEI.h	/^  SEIDisplayOrientation()$/;"	f	class:SEIDisplayOrientation
SEIDisplayOrientation	SEI.h	/^class SEIDisplayOrientation : public SEI$/;"	c
SEIEquirectangularProjection	SEI.h	/^  SEIEquirectangularProjection()  {}$/;"	f	class:SEIEquirectangularProjection
SEIEquirectangularProjection	SEI.h	/^class SEIEquirectangularProjection : public SEI$/;"	c
SEIFillerPayload	SEI.h	/^  SEIFillerPayload() {}$/;"	f	class:SEIFillerPayload
SEIFillerPayload	SEI.h	/^class SEIFillerPayload : public SEI$/;"	c
SEIFilmGrainCharacteristics	SEI.h	/^  SEIFilmGrainCharacteristics() {}$/;"	f	class:SEIFilmGrainCharacteristics
SEIFilmGrainCharacteristics	SEI.h	/^class SEIFilmGrainCharacteristics: public SEI$/;"	c
SEIFilmGrainSynthesizer	SEIFilmGrainSynthesizer.cpp	/^SEIFilmGrainSynthesizer::SEIFilmGrainSynthesizer()$/;"	f	class:SEIFilmGrainSynthesizer
SEIFilmGrainSynthesizer	SEIFilmGrainSynthesizer.h	/^class SEIFilmGrainSynthesizer$/;"	c
SEIFisheyeVideoInfo	SEI.h	/^  SEIFisheyeVideoInfo() {}$/;"	f	class:SEIFisheyeVideoInfo
SEIFisheyeVideoInfo	SEI.h	/^class SEIFisheyeVideoInfo : public SEI$/;"	c
SEIFramePacking	SEI.h	/^  SEIFramePacking() {}$/;"	f	class:SEIFramePacking
SEIFramePacking	SEI.h	/^class SEIFramePacking : public SEI$/;"	c
SEIGreenMetadataInfo	SEI.h	/^    SEIGreenMetadataInfo() {}$/;"	f	class:SEIGreenMetadataInfo
SEIGreenMetadataInfo	SEI.h	/^class SEIGreenMetadataInfo : public SEI$/;"	c
SEIKneeFunctionInfo	SEI.h	/^  SEIKneeFunctionInfo() {}$/;"	f	class:SEIKneeFunctionInfo
SEIKneeFunctionInfo	SEI.h	/^class SEIKneeFunctionInfo : public SEI$/;"	c
SEIListOfIndices	SEI.h	/^    SEIListOfIndices() : m_seiMessage(NULL) {}$/;"	f	struct:SEIRegionalNesting::SEIListOfIndices
SEIListOfIndices	SEI.h	/^    SEIListOfIndices(std::vector<UInt> listOfIndices, SEI* sei) : m_listOfIndices(listOfIndices), m_seiMessage(sei) {}$/;"	f	struct:SEIRegionalNesting::SEIListOfIndices
SEIListOfIndices	SEI.h	/^  struct SEIListOfIndices$/;"	s	class:SEIRegionalNesting
SEIMCTSExtractionInfoSet	SEI.h	/^    SEIMCTSExtractionInfoSet() { }$/;"	f	class:SEIMCTSExtractionInfoSet
SEIMCTSExtractionInfoSet	SEI.h	/^class SEIMCTSExtractionInfoSet : public SEI$/;"	c
SEIMasteringDisplayColourVolume	SEI.h	/^    SEIMasteringDisplayColourVolume() {}$/;"	f	class:SEIMasteringDisplayColourVolume
SEIMasteringDisplayColourVolume	SEI.h	/^class SEIMasteringDisplayColourVolume : public SEI$/;"	c
SEIMessages	SEI.h	/^typedef std::list<SEI*> SEIMessages;$/;"	t
SEINoDisplay	SEI.h	/^  SEINoDisplay()$/;"	f	class:SEINoDisplay
SEINoDisplay	SEI.h	/^class SEINoDisplay : public SEI$/;"	c
SEIOmniViewport	SEI.h	/^  SEIOmniViewport() {}$/;"	f	class:SEIOmniViewport
SEIOmniViewport	SEI.h	/^class SEIOmniViewport : public SEI$/;"	c
SEIPanScanRect	SEI.h	/^  SEIPanScanRect() {}$/;"	f	class:SEIPanScanRect
SEIPanScanRect	SEI.h	/^class SEIPanScanRect : public SEI$/;"	c
SEIPictureSnapshot	SEI.h	/^  SEIPictureSnapshot() {}$/;"	f	class:SEIPictureSnapshot
SEIPictureSnapshot	SEI.h	/^class SEIPictureSnapshot : public SEI$/;"	c
SEIPictureTiming	SEI.h	/^  SEIPictureTiming()$/;"	f	class:SEIPictureTiming
SEIPictureTiming	SEI.h	/^class SEIPictureTiming : public SEI$/;"	c
SEIPostFilterHint	SEI.h	/^  SEIPostFilterHint() {}$/;"	f	class:SEIPostFilterHint
SEIPostFilterHint	SEI.h	/^class SEIPostFilterHint: public SEI$/;"	c
SEIProgressiveRefinementSegmentEnd	SEI.h	/^  SEIProgressiveRefinementSegmentEnd() {}$/;"	f	class:SEIProgressiveRefinementSegmentEnd
SEIProgressiveRefinementSegmentEnd	SEI.h	/^class SEIProgressiveRefinementSegmentEnd: public SEI$/;"	c
SEIProgressiveRefinementSegmentStart	SEI.h	/^  SEIProgressiveRefinementSegmentStart() {}$/;"	f	class:SEIProgressiveRefinementSegmentStart
SEIProgressiveRefinementSegmentStart	SEI.h	/^class SEIProgressiveRefinementSegmentStart : public SEI$/;"	c
SEIRecoveryPoint	SEI.h	/^  SEIRecoveryPoint() {}$/;"	f	class:SEIRecoveryPoint
SEIRecoveryPoint	SEI.h	/^class SEIRecoveryPoint : public SEI$/;"	c
SEIRegionRefreshInfo	SEI.h	/^  SEIRegionRefreshInfo()$/;"	f	class:SEIRegionRefreshInfo
SEIRegionRefreshInfo	SEI.h	/^class SEIRegionRefreshInfo : public SEI$/;"	c
SEIRegionWisePacking	SEI.h	/^  SEIRegionWisePacking() {}$/;"	f	class:SEIRegionWisePacking
SEIRegionWisePacking	SEI.h	/^class SEIRegionWisePacking : public SEI$/;"	c
SEIRegionalNesting	SEI.h	/^  SEIRegionalNesting(): m_rnId(0) {}$/;"	f	class:SEIRegionalNesting
SEIRegionalNesting	SEI.h	/^class SEIRegionalNesting : public SEI$/;"	c
SEISOPDescription	SEI.h	/^  SEISOPDescription() {}$/;"	f	class:SEISOPDescription
SEISOPDescription	SEI.h	/^class SEISOPDescription : public SEI$/;"	c
SEIScalableNesting	SEI.h	/^  SEIScalableNesting() {}$/;"	f	class:SEIScalableNesting
SEIScalableNesting	SEI.h	/^class SEIScalableNesting : public SEI$/;"	c
SEISceneInfo	SEI.h	/^  SEISceneInfo() {}$/;"	f	class:SEISceneInfo
SEISceneInfo	SEI.h	/^class SEISceneInfo : public SEI$/;"	c
SEISegmentedRectFramePacking	SEI.h	/^  SEISegmentedRectFramePacking() {}$/;"	f	class:SEISegmentedRectFramePacking
SEISegmentedRectFramePacking	SEI.h	/^class SEISegmentedRectFramePacking : public SEI$/;"	c
SEIShutterIntervalInfo	SEI.h	/^  SEIShutterIntervalInfo() {}$/;"	f	class:SEIShutterIntervalInfo
SEIShutterIntervalInfo	SEI.h	/^class SEIShutterIntervalInfo : public SEI$/;"	c
SEISphereRotation	SEI.h	/^  SEISphereRotation()  {}$/;"	f	class:SEISphereRotation
SEISphereRotation	SEI.h	/^class SEISphereRotation : public SEI$/;"	c
SEITempMotionConstrainedTileSets	SEI.h	/^  SEITempMotionConstrainedTileSets() { }$/;"	f	class:SEITempMotionConstrainedTileSets
SEITempMotionConstrainedTileSets	SEI.h	/^class SEITempMotionConstrainedTileSets: public SEI$/;"	c
SEITemporalLevel0Index	SEI.h	/^  SEITemporalLevel0Index()$/;"	f	class:SEITemporalLevel0Index
SEITemporalLevel0Index	SEI.h	/^class SEITemporalLevel0Index : public SEI$/;"	c
SEITimeCode	SEI.h	/^  SEITimeCode() {}$/;"	f	class:SEITimeCode
SEITimeCode	SEI.h	/^class SEITimeCode : public SEI$/;"	c
SEIToneMappingInfo	SEI.h	/^  SEIToneMappingInfo() {}$/;"	f	class:SEIToneMappingInfo
SEIToneMappingInfo	SEI.h	/^class SEIToneMappingInfo : public SEI$/;"	c
SEIUserDataRegistered	SEI.h	/^  SEIUserDataRegistered() {}$/;"	f	class:SEIUserDataRegistered
SEIUserDataRegistered	SEI.h	/^class SEIUserDataRegistered : public SEI$/;"	c
SEIUserDataUnregistered	SEI.h	/^  SEIUserDataUnregistered() {}$/;"	f	class:SEIUserDataUnregistered
SEIUserDataUnregistered	SEI.h	/^class SEIUserDataUnregistered : public SEI$/;"	c
SEI_ENCODER_CONTROL	TypeDef.h	92;"	d
SHUTTER_INTERVAL_INFO	SEI.h	/^    SHUTTER_INTERVAL_INFO                = 203,$/;"	e	enum:SEI::PayloadType
SHUTTER_INTERVAL_SEI_MESSAGE	TypeDef.h	91;"	d
SIZE_2Nx2N	TypeDef.h	/^  SIZE_2Nx2N           = 0,           \/\/\/< symmetric motion partition,  2Nx2N$/;"	e	enum:PartSize
SIZE_2NxN	TypeDef.h	/^  SIZE_2NxN            = 1,           \/\/\/< symmetric motion partition,  2Nx N$/;"	e	enum:PartSize
SIZE_2NxnD	TypeDef.h	/^  SIZE_2NxnD           = 5,           \/\/\/< asymmetric motion partition, 2Nx(3N\/2) + 2Nx( N\/2)$/;"	e	enum:PartSize
SIZE_2NxnU	TypeDef.h	/^  SIZE_2NxnU           = 4,           \/\/\/< asymmetric motion partition, 2Nx( N\/2) + 2Nx(3N\/2)$/;"	e	enum:PartSize
SIZE_Nx2N	TypeDef.h	/^  SIZE_Nx2N            = 2,           \/\/\/< symmetric motion partition,   Nx2N$/;"	e	enum:PartSize
SIZE_NxN	TypeDef.h	/^  SIZE_NxN             = 3,           \/\/\/< symmetric motion partition,   Nx N$/;"	e	enum:PartSize
SIZE_nLx2N	TypeDef.h	/^  SIZE_nLx2N           = 6,           \/\/\/< asymmetric motion partition, ( N\/2)x2N + (3N\/2)x2N$/;"	e	enum:PartSize
SIZE_nRx2N	TypeDef.h	/^  SIZE_nRx2N           = 7,           \/\/\/< asymmetric motion partition, (3N\/2)x2N + ( N\/2)x2N$/;"	e	enum:PartSize
SOP_DESCRIPTION	SEI.h	/^    SOP_DESCRIPTION                      = 128,$/;"	e	enum:SEI::PayloadType
SPHERE_ROTATION	SEI.h	/^    SPHERE_ROTATION                      = 154,$/;"	e	enum:SEI::PayloadType
SPLIT_MODE	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	t	class:TComTU	typeref:enum:TComTU::TU_SPLIT_MODE
SPSExtensionFlagIndex	TypeDef.h	/^enum SPSExtensionFlagIndex$/;"	g
SPS_EXT__REXT	TypeDef.h	/^  SPS_EXT__REXT           = 0,$/;"	e	enum:SPSExtensionFlagIndex
SStat	TComCodingStatistics.h	/^      SStat() : bits(0), count(0), sum(0) { }$/;"	f	struct:TComCodingStatistics::SStat
SStat	TComCodingStatistics.h	/^    struct SStat$/;"	s	class:TComCodingStatistics
STATS__BYTE_ALIGNMENT_BITS	TComCodingStatistics.h	/^  STATS__BYTE_ALIGNMENT_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__ALIGNED_ESCAPE_BITS	TComCodingStatistics.h	/^  STATS__CABAC_BITS__ALIGNED_ESCAPE_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__ALIGNED_SIGN_BIT	TComCodingStatistics.h	/^  STATS__CABAC_BITS__ALIGNED_SIGN_BIT,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__CHROMA_QP_ADJUSTMENT	TComCodingStatistics.h	/^  STATS__CABAC_BITS__CHROMA_QP_ADJUSTMENT,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__CROSS_COMPONENT_PREDICTION	TComCodingStatistics.h	/^  STATS__CABAC_BITS__CROSS_COMPONENT_PREDICTION,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__DELTA_QP_EP	TComCodingStatistics.h	/^  STATS__CABAC_BITS__DELTA_QP_EP,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__ESCAPE_BITS	TComCodingStatistics.h	/^  STATS__CABAC_BITS__ESCAPE_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__GT1_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__GT1_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__GT2_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__GT2_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__INTER_DIR	TComCodingStatistics.h	/^  STATS__CABAC_BITS__INTER_DIR,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__INTRA_DIR_ANG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__INTRA_DIR_ANG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__LAST_SIG_X_Y	TComCodingStatistics.h	/^  STATS__CABAC_BITS__LAST_SIG_X_Y,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__MERGE_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__MERGE_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__MERGE_INDEX	TComCodingStatistics.h	/^  STATS__CABAC_BITS__MERGE_INDEX,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__MVD	TComCodingStatistics.h	/^  STATS__CABAC_BITS__MVD,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__MVD_EP	TComCodingStatistics.h	/^  STATS__CABAC_BITS__MVD_EP,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__MVP_IDX	TComCodingStatistics.h	/^  STATS__CABAC_BITS__MVP_IDX,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__PART_SIZE	TComCodingStatistics.h	/^  STATS__CABAC_BITS__PART_SIZE,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__PRED_MODE	TComCodingStatistics.h	/^  STATS__CABAC_BITS__PRED_MODE,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__QT_CBF	TComCodingStatistics.h	/^  STATS__CABAC_BITS__QT_CBF,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__QT_ROOT_CBF	TComCodingStatistics.h	/^  STATS__CABAC_BITS__QT_ROOT_CBF,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__REF_FRM_IDX	TComCodingStatistics.h	/^  STATS__CABAC_BITS__REF_FRM_IDX,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SAO	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SAO,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SIGN_BIT	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SIGN_BIT,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SIG_COEFF_GROUP_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SIG_COEFF_GROUP_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SIG_COEFF_MAP_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SIG_COEFF_MAP_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SKIP_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SKIP_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__SPLIT_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__SPLIT_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__TQ_BYPASS_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__TQ_BYPASS_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__TRANSFORM_SKIP_FLAGS	TComCodingStatistics.h	/^  STATS__CABAC_BITS__TRANSFORM_SKIP_FLAGS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_BITS__TRANSFORM_SUBDIV_FLAG	TComCodingStatistics.h	/^  STATS__CABAC_BITS__TRANSFORM_SUBDIV_FLAG,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_EP_BIT_ALIGNMENT	TComCodingStatistics.h	/^  STATS__CABAC_EP_BIT_ALIGNMENT,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_FIXED_BITS	TComCodingStatistics.h	/^  STATS__CABAC_FIXED_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_INITIALISATION	TComCodingStatistics.h	/^  STATS__CABAC_INITIALISATION,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_PCM_ALIGN_BITS	TComCodingStatistics.h	/^  STATS__CABAC_PCM_ALIGN_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_PCM_CODE_BITS	TComCodingStatistics.h	/^  STATS__CABAC_PCM_CODE_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__CABAC_TRM_BITS	TComCodingStatistics.h	/^  STATS__CABAC_TRM_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__EMULATION_PREVENTION_3_BYTES	TComCodingStatistics.h	/^  STATS__EMULATION_PREVENTION_3_BYTES,$/;"	e	enum:TComCodingStatisticsType
STATS__EXPLICIT_RDPCM_BITS	TComCodingStatistics.h	/^  STATS__EXPLICIT_RDPCM_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__NAL_UNIT_HEADER_BITS	TComCodingStatistics.h	/^  STATS__NAL_UNIT_HEADER_BITS,$/;"	e	enum:TComCodingStatisticsType
STATS__NAL_UNIT_PACKING	TComCodingStatistics.h	/^  STATS__NAL_UNIT_PACKING,$/;"	e	enum:TComCodingStatisticsType
STATS__NAL_UNIT_TOTAL_BODY	TComCodingStatistics.h	/^  STATS__NAL_UNIT_TOTAL_BODY,\/\/ This is a special case and is not included in the total sums.$/;"	e	enum:TComCodingStatisticsType
STATS__NUM_STATS	TComCodingStatistics.h	/^  STATS__NUM_STATS$/;"	e	enum:TComCodingStatisticsType
STATS__TRAILING_BITS	TComCodingStatistics.h	/^  STATS__TRAILING_BITS,$/;"	e	enum:TComCodingStatisticsType
ScalingListMode	TypeDef.h	/^enum ScalingListMode$/;"	g
ScalingListSize	TypeDef.h	/^enum ScalingListSize$/;"	g
ScanGenerator	TComRom.cpp	/^  ScanGenerator(UInt blockWidth, UInt blockHeight, UInt stride, COEFF_SCAN_TYPE scanType)$/;"	f	class:ScanGenerator
ScanGenerator	TComRom.cpp	/^class ScanGenerator$/;"	c	file:
SetStatistics	TComCodingStatistics.h	/^    static Void SetStatistics(const TComCodingStatisticsData &src) { GetSingletonInstance().data=src; }$/;"	f	class:TComCodingStatistics
Short	TypeDef.h	/^typedef       short               Short;$/;"	t
SignificanceMapContextType	TypeDef.h	/^enum SignificanceMapContextType$/;"	g
SliceConstraint	TypeDef.h	/^enum SliceConstraint$/;"	g
SliceType	TypeDef.h	/^enum SliceType$/;"	g
StatLogValue	TComCodingStatistics.h	/^      StatLogValue()$/;"	f	struct:TComCodingStatistics::StatLogValue
StatLogValue	TComCodingStatistics.h	/^    struct StatLogValue$/;"	s	class:TComCodingStatistics
StoredResidualType	TypeDef.h	/^enum StoredResidualType$/;"	g
TCOMCODINGSTATISTICS_ENTROPYSCALE	TComCodingStatistics.h	/^static const Int64 TCOMCODINGSTATISTICS_ENTROPYSCALE=32768;$/;"	v
TChar	TypeDef.h	/^typedef       char                TChar; \/\/ Used for text\/characters$/;"	t
TCoeff	TypeDef.h	/^typedef       Int             TCoeff;            \/\/\/< transform coefficient$/;"	t
TCoeff	TypeDef.h	/^typedef       Int64           TCoeff;            \/\/\/< transform coefficient$/;"	t
TComBitCounter	TComBitCounter.h	/^  TComBitCounter()            {}$/;"	f	class:TComBitCounter
TComBitCounter	TComBitCounter.h	/^class TComBitCounter : public TComBitIf$/;"	c
TComBitIf	TComBitStream.h	/^class TComBitIf$/;"	c
TComCABACTables	TComCABACTables.h	/^class TComCABACTables$/;"	c
TComCUMvField	TComMotionInfo.h	/^  TComCUMvField() : m_pcMv(NULL), m_pcMvd(NULL), m_piRefIdx(NULL), m_uiNumPartition(0) {}$/;"	f	class:TComCUMvField
TComCUMvField	TComMotionInfo.h	/^class TComCUMvField$/;"	c
TComCodingStatistics	TComCodingStatistics.h	/^    TComCodingStatistics() : data()$/;"	f	class:TComCodingStatistics
TComCodingStatistics	TComCodingStatistics.h	/^class TComCodingStatistics$/;"	c
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t)$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const ChannelType chid )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const ComponentID cid )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const Int log2w )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const UInt log2w )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const UInt log2w, const ChannelType chid )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^  TComCodingStatisticsClassType(const TComCodingStatisticsType t, const UInt log2w, const ComponentID cid )$/;"	f	class:TComCodingStatisticsClassType
TComCodingStatisticsClassType	TComCodingStatistics.h	/^class TComCodingStatisticsClassType$/;"	c
TComCodingStatisticsData	TComCodingStatistics.h	/^    class TComCodingStatisticsData$/;"	c	class:TComCodingStatistics
TComCodingStatisticsType	TComCodingStatistics.h	/^enum TComCodingStatisticsType$/;"	g
TComDataCU	TComDataCU.cpp	/^TComDataCU::TComDataCU()$/;"	f	class:TComDataCU
TComDataCU	TComDataCU.h	/^class TComDataCU$/;"	c
TComHRD	TComSlice.h	/^  TComHRD()$/;"	f	class:TComHRD
TComHRD	TComSlice.h	/^class TComHRD$/;"	c
TComInputBitstream	TComBitStream.cpp	/^TComInputBitstream::TComInputBitstream()$/;"	f	class:TComInputBitstream
TComInputBitstream	TComBitStream.cpp	/^TComInputBitstream::TComInputBitstream(const TComInputBitstream &src)$/;"	f	class:TComInputBitstream
TComInputBitstream	TComBitStream.h	/^class TComInputBitstream$/;"	c
TComInterpolationFilter	TComInterpolationFilter.h	/^  TComInterpolationFilter() {}$/;"	f	class:TComInterpolationFilter
TComInterpolationFilter	TComInterpolationFilter.h	/^class TComInterpolationFilter$/;"	c
TComIterator	TComList.h	/^  typedef typename std::list<C>::iterator TComIterator;$/;"	t	class:TComList
TComList	TComList.h	/^class TComList : public std::list< C > \/\/ NOTE: should not inherit from STL classes$/;"	c
TComLoopFilter	TComLoopFilter.cpp	/^TComLoopFilter::TComLoopFilter()$/;"	f	class:TComLoopFilter
TComLoopFilter	TComLoopFilter.h	/^class TComLoopFilter$/;"	c
TComMv	TComMv.h	/^  TComMv( Short iHor, Short iVer ) :$/;"	f	class:TComMv
TComMv	TComMv.h	/^  TComMv() :$/;"	f	class:TComMv
TComMv	TComMv.h	/^class TComMv$/;"	c
TComMvField	TComMotionInfo.h	/^  TComMvField() : m_iRefIdx( NOT_VALID ) {}$/;"	f	class:TComMvField
TComMvField	TComMotionInfo.h	/^class TComMvField$/;"	c
TComOutputBitstream	TComBitStream.cpp	/^TComOutputBitstream::TComOutputBitstream()$/;"	f	class:TComOutputBitstream
TComOutputBitstream	TComBitStream.h	/^class TComOutputBitstream : public TComBitIf$/;"	c
TComPPS	TComSlice.cpp	/^TComPPS::TComPPS()$/;"	f	class:TComPPS
TComPPS	TComSlice.h	/^class TComPPS$/;"	c
TComPPSRExt	TComSlice.cpp	/^TComPPSRExt::TComPPSRExt()$/;"	f	class:TComPPSRExt
TComPPSRExt	TComSlice.h	/^class TComPPSRExt \/\/ Names aligned to text specification$/;"	c
TComPTL	TComSlice.cpp	/^TComPTL::TComPTL()$/;"	f	class:TComPTL
TComPTL	TComSlice.h	/^class TComPTL$/;"	c
TComPattern	TComPattern.h	/^  TComPattern()$/;"	f	class:TComPattern
TComPattern	TComPattern.h	/^class TComPattern$/;"	c
TComPic	TComPic.cpp	/^TComPic::TComPic()$/;"	f	class:TComPic
TComPic	TComPic.h	/^class TComPic$/;"	c
TComPicSym	TComPicSym.cpp	/^TComPicSym::TComPicSym()$/;"	f	class:TComPicSym
TComPicSym	TComPicSym.h	/^class TComPicSym$/;"	c
TComPicYuv	TComPicYuv.cpp	/^TComPicYuv::TComPicYuv()$/;"	f	class:TComPicYuv
TComPicYuv	TComPicYuv.h	/^class TComPicYuv$/;"	c
TComPictureHash	TypeDef.h	/^struct TComPictureHash$/;"	s
TComPrediction	TComPrediction.cpp	/^TComPrediction::TComPrediction()$/;"	f	class:TComPrediction
TComPrediction	TComPrediction.h	/^class TComPrediction : public TComWeightPrediction$/;"	c
TComRPSList	TComSlice.h	/^                                 TComRPSList()                                            { }$/;"	f	class:TComRPSList
TComRPSList	TComSlice.h	/^class TComRPSList$/;"	c
TComRdCost	TComRdCost.cpp	/^TComRdCost::TComRdCost()$/;"	f	class:TComRdCost
TComRdCost	TComRdCost.h	/^class TComRdCost$/;"	c
TComRdCostWeightPrediction	TComRdCostWeightPrediction.h	/^namespace TComRdCostWeightPrediction$/;"	n
TComRectangle	TComRectangle.h	/^struct TComRectangle$/;"	s
TComRefPicListModification	TComSlice.cpp	/^TComRefPicListModification::TComRefPicListModification()$/;"	f	class:TComRefPicListModification
TComRefPicListModification	TComSlice.h	/^class TComRefPicListModification$/;"	c
TComReferencePictureSet	TComSlice.cpp	/^TComReferencePictureSet::TComReferencePictureSet()$/;"	f	class:TComReferencePictureSet
TComReferencePictureSet	TComSlice.h	/^class TComReferencePictureSet$/;"	c
TComSEIFisheyeVideoInfo	TypeDef.h	/^  TComSEIFisheyeVideoInfo() : m_fisheyeCancelFlag(false), m_fisheyePersistenceFlag(false), m_fisheyeViewDimensionIdc(0), m_fisheyeActiveAreas() { }$/;"	f	struct:TComSEIFisheyeVideoInfo
TComSEIFisheyeVideoInfo	TypeDef.h	/^struct TComSEIFisheyeVideoInfo$/;"	s
TComSEIMasteringDisplay	TypeDef.h	/^struct TComSEIMasteringDisplay$/;"	s
TComSEITimeSet	TypeDef.h	/^  TComSEITimeSet() : clockTimeStampFlag(false),$/;"	f	struct:TComSEITimeSet
TComSEITimeSet	TypeDef.h	/^struct TComSEITimeSet$/;"	s
TComSPS	TComSlice.cpp	/^TComSPS::TComSPS()$/;"	f	class:TComSPS
TComSPS	TComSlice.h	/^class TComSPS$/;"	c
TComSPSRExt	TComSlice.cpp	/^TComSPSRExt::TComSPSRExt()$/;"	f	class:TComSPSRExt
TComSPSRExt	TComSlice.h	/^class TComSPSRExt \/\/ Names aligned to text specification$/;"	c
TComSampleAdaptiveOffset	TComSampleAdaptiveOffset.cpp	/^TComSampleAdaptiveOffset::TComSampleAdaptiveOffset()$/;"	f	class:TComSampleAdaptiveOffset
TComSampleAdaptiveOffset	TComSampleAdaptiveOffset.h	/^class TComSampleAdaptiveOffset$/;"	c
TComScalingList	TComSlice.cpp	/^TComScalingList::TComScalingList()$/;"	f	class:TComScalingList
TComScalingList	TComSlice.h	/^class TComScalingList$/;"	c
TComSlice	TComSlice.cpp	/^TComSlice::TComSlice()$/;"	f	class:TComSlice
TComSlice	TComSlice.h	/^class TComSlice$/;"	c
TComTU	TComTU.cpp	/^TComTU::TComTU(TComDataCU *pcCU, const UInt absPartIdxCU, const UInt cuDepth, const UInt initTrDepthRelCU)$/;"	f	class:TComTU
TComTU	TComTU.cpp	/^TComTU::TComTU(TComTU &parent, const Bool bProcessLastOfLevel, const TU_SPLIT_MODE splitMode, const Bool splitAtCurrentDepth, const ComponentID absPartIdxSourceComponent)$/;"	f	class:TComTU
TComTU	TComTU.h	/^class TComTU$/;"	c
TComTURecurse	TComTU.cpp	/^TComTURecurse::TComTURecurse(      TComDataCU *pcCU,$/;"	f	class:TComTURecurse
TComTURecurse	TComTU.h	/^    TComTURecurse(      TComDataCU *pcCU,$/;"	f	class:TComTURecurse
TComTURecurse	TComTU.h	/^    TComTURecurse(      TComTU        &parentLevel,                            \/\/Parent TU from which recursion children are derived$/;"	f	class:TComTURecurse
TComTURecurse	TComTU.h	/^class TComTURecurse : public TComTU$/;"	c
TComTile	TComPicSym.cpp	/^TComTile::TComTile()$/;"	f	class:TComTile
TComTile	TComPicSym.h	/^class TComTile$/;"	c
TComTrQuant	TComTrQuant.cpp	/^TComTrQuant::TComTrQuant()$/;"	f	class:TComTrQuant
TComTrQuant	TComTrQuant.h	/^class TComTrQuant$/;"	c
TComVPS	TComSlice.cpp	/^TComVPS::TComVPS()$/;"	f	class:TComVPS
TComVPS	TComSlice.h	/^class TComVPS$/;"	c
TComVUI	TComSlice.h	/^  TComVUI()$/;"	f	class:TComVUI
TComVUI	TComSlice.h	/^class TComVUI$/;"	c
TComWeightPrediction	TComWeightPrediction.cpp	/^TComWeightPrediction::TComWeightPrediction()$/;"	f	class:TComWeightPrediction
TComWeightPrediction	TComWeightPrediction.h	/^class TComWeightPrediction$/;"	c
TComYuv	TComYuv.cpp	/^TComYuv::TComYuv()$/;"	f	class:TComYuv
TComYuv	TComYuv.h	/^class TComYuv$/;"	c
TEMPORAL_LEVEL0_INDEX	SEI.h	/^    TEMPORAL_LEVEL0_INDEX                = 131,$/;"	e	enum:SEI::PayloadType
TEMP_MOTION_CONSTRAINED_TILE_SETS	SEI.h	/^    TEMP_MOTION_CONSTRAINED_TILE_SETS    = 139,$/;"	e	enum:SEI::PayloadType
TFilterCoeff	TypeDef.h	/^typedef       Short           TFilterCoeff;      \/\/\/< filter coefficient$/;"	t
TIME_CODE	SEI.h	/^    TIME_CODE                            = 136,$/;"	e	enum:SEI::PayloadType
TMatrixCoeff	TypeDef.h	/^typedef       Int             TMatrixCoeff;      \/\/\/< transform matrix coefficient$/;"	t
TMatrixCoeff	TypeDef.h	/^typedef       Short           TMatrixCoeff;      \/\/\/< transform matrix coefficient$/;"	t
TONE_MAPPING_INFO	SEI.h	/^    TONE_MAPPING_INFO                    = 23,$/;"	e	enum:SEI::PayloadType
TRANSFORM_FORWARD	TypeDef.h	/^  TRANSFORM_FORWARD              = 0,$/;"	e	enum:TransformDirection
TRANSFORM_INVERSE	TypeDef.h	/^  TRANSFORM_INVERSE              = 1,$/;"	e	enum:TransformDirection
TRANSFORM_NUMBER_OF_DIRECTIONS	TypeDef.h	/^  TRANSFORM_NUMBER_OF_DIRECTIONS = 2$/;"	e	enum:TransformDirection
TRISTATE	ProfileLevelTierFeatures.h	/^  typedef enum TRISTATE$/;"	g	struct:ProfileFeatures
TRISTATE	ProfileLevelTierFeatures.h	/^  } TRISTATE;$/;"	t	struct:ProfileFeatures	typeref:enum:ProfileFeatures::TRISTATE
TUCompRectHasAssociatedTransformSkipFlag	TComChromaFormat.h	/^static inline Bool TUCompRectHasAssociatedTransformSkipFlag(const TComRectangle &rectSamples, const UInt transformSkipLog2MaxSize)$/;"	f
TUEntropyCodingParameters	TypeDef.h	/^struct TUEntropyCodingParameters$/;"	s
TU_SPLIT_MODE	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	g	class:TComTU
Tier	TypeDef.h	/^  enum Tier$/;"	g	namespace:Level
TileSetData	SEI.h	/^  class TileSetData$/;"	c	class:SEITempMotionConstrainedTileSets
TimingInfo	TComSlice.h	/^  TimingInfo()$/;"	f	class:TimingInfo
TimingInfo	TComSlice.h	/^class TimingInfo$/;"	c
TransformDirection	TypeDef.h	/^enum TransformDirection$/;"	g
UChar	TypeDef.h	/^typedef       unsigned char       UChar; \/\/ Unsigned 8-bit values$/;"	t
UInt	TypeDef.h	/^typedef       unsigned int        UInt;$/;"	t
UInt64	TypeDef.h	/^typedef       __int64             UInt64;   \/\/ MS VC6 does not support unsigned __int64 to double conversion$/;"	t
UInt64	TypeDef.h	/^typedef       unsigned __int64    UInt64;$/;"	t
UInt64	TypeDef.h	/^typedef       unsigned long long  UInt64;$/;"	t
USER_DATA_REGISTERED_ITU_T_T35	SEI.h	/^    USER_DATA_REGISTERED_ITU_T_T35       = 4,   \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
USER_DATA_UNREGISTERED	SEI.h	/^    USER_DATA_UNREGISTERED               = 5,   \/\/ TODO: add encoder command line control to create these messages$/;"	e	enum:SEI::PayloadType
UShort	TypeDef.h	/^typedef       unsigned short      UShort;$/;"	t
UpdateCABACStat	TComCodingStatistics.h	/^    static Void UpdateCABACStat(const TComCodingStatisticsClassType &stat, UInt uiRangeBefore, UInt uiRangeAfter, Int val)$/;"	f	class:TComCodingStatistics
UseDPCMForFirstPassIntraEstimation	TComPrediction.cpp	/^Bool TComPrediction::UseDPCMForFirstPassIntraEstimation(TComTU &rTu, const UInt uiDirMode)$/;"	f	class:TComPrediction
VECTOR_CODING__DISTORTION_CALCULATIONS	TypeDef.h	139;"	d
VECTOR_CODING__DISTORTION_CALCULATIONS	TypeDef.h	142;"	d
VECTOR_CODING__INTERPOLATION_FILTER	TypeDef.h	138;"	d
VECTOR_CODING__INTERPOLATION_FILTER	TypeDef.h	141;"	d
VERTICAL_SPLIT	TComTU.h	/^    typedef enum TU_SPLIT_MODE { DONT_SPLIT=0, VERTICAL_SPLIT=1, QUAD_SPLIT=2, NUMBER_OF_SPLIT_MODES=3 } SPLIT_MODE;$/;"	e	enum:TComTU::TU_SPLIT_MODE
VER_IDX	CommonDef.h	/^static const Int VER_IDX =                                         26; \/\/\/< index for intra VERTICAL   mode$/;"	v
Void	TypeDef.h	/^typedef       void                Void;$/;"	t
WCGChromaQPControl	TypeDef.h	/^struct WCGChromaQPControl$/;"	s
WPACDCParam	TComSlice.h	/^struct WPACDCParam$/;"	s
WPScalingParam	TComSlice.h	/^struct WPScalingParam$/;"	s
WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT	TypeDef.h	/^  WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT                           =2,$/;"	e	enum:WeightedPredictionMethod
WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT_AND_CLIPPING	TypeDef.h	/^  WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT_AND_CLIPPING              =3,$/;"	e	enum:WeightedPredictionMethod
WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT_AND_CLIPPING_AND_EXTENSION	TypeDef.h	/^  WP_PER_PICTURE_WITH_HISTOGRAM_AND_PER_COMPONENT_AND_CLIPPING_AND_EXTENSION=4$/;"	e	enum:WeightedPredictionMethod
WP_PER_PICTURE_WITH_SIMPLE_DC_COMBINED_COMPONENT	TypeDef.h	/^  WP_PER_PICTURE_WITH_SIMPLE_DC_COMBINED_COMPONENT                          =0,$/;"	e	enum:WeightedPredictionMethod
WP_PER_PICTURE_WITH_SIMPLE_DC_PER_COMPONENT	TypeDef.h	/^  WP_PER_PICTURE_WITH_SIMPLE_DC_PER_COMPONENT                               =1,$/;"	e	enum:WeightedPredictionMethod
WeightedPredictionMethod	TypeDef.h	/^enum WeightedPredictionMethod$/;"	g
Window	TypeDef.h	/^  Window()$/;"	f	class:Window
Window	TypeDef.h	/^class Window$/;"	c
_AMVPInfo	TComMotionInfo.h	/^typedef struct _AMVPInfo$/;"	s
_LFCUParam	TypeDef.h	/^typedef struct _LFCUParam$/;"	s
__ACCESSUNIT__	AccessUnit.h	42;"	d
__COMMONDEF__	CommonDef.h	39;"	d
__CONTEXTMODEL3DBUFFER__	ContextModel3DBuffer.h	39;"	d
__CONTEXTMODEL__	ContextModel.h	40;"	d
__CONTEXTTABLES__	ContextTables.h	40;"	d
__DEBUG__	Debug.h	39;"	d
__NAL__	NAL.h	37;"	d
__PROFILELEVELTIERFEATURES__	ProfileLevelTierFeatures.h	39;"	d
__SEIFILMGRAINSYNTHESIZER__	SEIFilmGrainSynthesizer.h	40;"	d
__SEI__	SEI.h	35;"	d
__TCOMBITCOUNTER__	TComBitCounter.h	39;"	d
__TCOMBITSTREAM__	TComBitStream.h	39;"	d
__TCOMCABACTABLES__	TComCABACTables.h	39;"	d
__TCOMCHROMAFORMAT__	TComChromaFormat.h	35;"	d
__TCOMCODINGSTATISTICS__	TComCodingStatistics.h	35;"	d
__TCOMDATACU__	TComDataCU.h	40;"	d
__TCOMINTERPOLATIONFILTER__	TComInterpolationFilter.h	40;"	d
__TCOMLIST__	TComList.h	39;"	d
__TCOMLOOPFILTER__	TComLoopFilter.h	39;"	d
__TCOMMOTIONINFO__	TComMotionInfo.h	40;"	d
__TCOMMV__	TComMv.h	39;"	d
__TCOMPATTERN__	TComPattern.h	39;"	d
__TCOMPICSYM__	TComPicSym.h	39;"	d
__TCOMPICYUV__	TComPicYuv.h	39;"	d
__TCOMPIC__	TComPic.h	39;"	d
__TCOMPREDICTION__	TComPrediction.h	39;"	d
__TCOMRDCOSTWEIGHTPREDICTION__	TComRdCostWeightPrediction.h	39;"	d
__TCOMRDCOST__	TComRdCost.h	39;"	d
__TCOMRECTANGLE__	TComRectangle.h	36;"	d
__TCOMROM__	TComRom.h	39;"	d
__TCOMSAMPLEADAPTIVEOFFSET__	TComSampleAdaptiveOffset.h	39;"	d
__TCOMSLICE__	TComSlice.h	39;"	d
__TCOMTRQUANT__	TComTrQuant.h	39;"	d
__TCOMTU__	TComTU.h	35;"	d
__TCOMWEIGHTPREDICTION__	TComWeightPrediction.h	39;"	d
__TCOMYUV__	TComYuv.h	41;"	d
__TYPEDEF__	TypeDef.h	39;"	d
abs	CommonDef.h	/^inline Int64 abs (Int64 x) { return _abs64(x); };$/;"	f
activate	ProfileLevelTierFeatures.cpp	/^ProfileLevelTierFeatures::activate(const Profile::Name profileIdc,$/;"	f	class:ProfileLevelTierFeatures
activate	ProfileLevelTierFeatures.cpp	/^ProfileLevelTierFeatures::activate(const TComSPS &sps)$/;"	f	class:ProfileLevelTierFeatures
activatePPS	TComSlice.cpp	/^Bool ParameterSetManager::activatePPS(Int ppsId, Bool isIRAP)$/;"	f	class:ParameterSetManager
activeSeqParameterSetId	SEI.h	/^  std::vector<Int> activeSeqParameterSetId;$/;"	m	class:SEIActiveParameterSets
activeVPSId	SEI.h	/^  Int activeVPSId;$/;"	m	class:SEIActiveParameterSets
addAvg	TComYuv.cpp	/^Void TComYuv::addAvg( const TComYuv* pcYuvSrc0, const TComYuv* pcYuvSrc1, const UInt iPartUnitIdx, const UInt uiWidth, const UInt uiHeight, const BitDepths &clipBitDepths )$/;"	f	class:TComYuv
addClip	TComYuv.cpp	/^Void TComYuv::addClip( const TComYuv* pcYuvSrc0, const TComYuv* pcYuvSrc1, const UInt uiTrUnitIdx, const UInt uiPartSize, const BitDepths &clipBitDepths )$/;"	f	class:TComYuv
addRegion	SEI.h	/^  Void addRegion(RNSEIWindow *regn) { m_regions.push_back(*regn); }$/;"	f	class:SEIRegionalNesting
addRegionalSEI	SEI.cpp	/^Void SEIRegionalNesting::addRegionalSEI(RegionalSEI *regSEI)$/;"	f	class:SEIRegionalNesting
addRegionalSEI	SEI.h	/^  Void addRegionalSEI(SEIListOfIndices const &seiWithListOfRegionIndices) $/;"	f	class:SEIRegionalNesting
addRegions	SEI.h	/^  Void addRegions(RNSEIWindowVec const &regions) { m_regions.insert(m_regions.end(), regions.begin(), regions.end()); }$/;"	f	class:RegionalSEI
addSubstream	TComBitStream.cpp	/^Void   TComOutputBitstream::addSubstream( TComOutputBitstream* pcSubstream )$/;"	f	class:TComOutputBitstream
addSubstreamSize	TComSlice.h	/^  Void                        addSubstreamSize( UInt size )                          { m_substreamSizes.push_back(size);                             }$/;"	f	class:TComSlice
addWeightBi	TComWeightPrediction.cpp	/^Void TComWeightPrediction::addWeightBi( const TComYuv              *pcYuvSrc0,$/;"	f	class:TComWeightPrediction
addWeightUni	TComWeightPrediction.cpp	/^Void TComWeightPrediction::addWeightUni( const TComYuv        *const pcYuvSrc0,$/;"	f	class:TComWeightPrediction
allocateNewSlice	TComPic.h	/^  Void          allocateNewSlice()           {m_picSym.allocateNewSlice();         }$/;"	f	class:TComPic
allocateNewSlice	TComPicSym.cpp	/^Void TComPicSym::allocateNewSlice()$/;"	f	class:TComPicSym
allocatePS	TComSlice.h	/^  T *allocatePS(const Int psId)$/;"	f	class:ParameterSetMap
anticlockwiseRotation	SEI.h	/^  UInt anticlockwiseRotation;$/;"	m	class:SEIDisplayOrientation
applyForwardRDPCM	TComTrQuant.cpp	/^Void TComTrQuant::applyForwardRDPCM( TComTU& rTu, const ComponentID compID, Pel* pcResidual, const UInt uiStride, const QpParam& cQP, TCoeff* pcCoeff, TCoeff &uiAbsSum, const RDPCMMode mode )$/;"	f	class:TComTrQuant
applyReferencePictureSet	TComSlice.cpp	/^Void TComSlice::applyReferencePictureSet( TComList<TComPic*>& rcListPic, const TComReferencePictureSet *pReferencePictureSet)$/;"	f	class:TComSlice
azimuthCentre	SEI.h	/^    Int  azimuthCentre;$/;"	m	struct:SEIOmniViewport::OmniViewport
bApplyWeight	TComRdCost.h	/^  Bool                  bApplyWeight;     \/\/ whether weighted prediction is used or not$/;"	m	class:DistParam
bCanUseLevel8p5	ProfileLevelTierFeatures.h	/^  Bool                     bCanUseLevel8p5;$/;"	m	struct:ProfileFeatures
bChanged	TComSlice.h	/^    Bool                  bChanged;$/;"	m	struct:ParameterSetMap::MapData
bInternalEdge	TypeDef.h	/^  Bool bInternalEdge;                     \/\/\/< indicates internal edge$/;"	m	struct:_LFCUParam
bIsBiPred	TComRdCost.h	/^  Bool                  bIsBiPred;$/;"	m	class:DistParam
bLeftEdge	TypeDef.h	/^  Bool bLeftEdge;                         \/\/\/< indicates left edge$/;"	m	struct:_LFCUParam
bPresentFlag	SEI.h	/^    Bool  bPresentFlag;$/;"	m	struct:SEIFilmGrainCharacteristics::CompModel
bPresentFlag	TComSlice.h	/^  Bool bPresentFlag;$/;"	m	struct:WPScalingParam
bTopEdge	TypeDef.h	/^  Bool bTopEdge;                          \/\/\/< indicates top edge$/;"	m	struct:_LFCUParam
bWavefrontsAndTilesCanBeUsedSimultaneously	ProfileLevelTierFeatures.h	/^  Bool                     bWavefrontsAndTilesCanBeUsedSimultaneously;$/;"	m	struct:ProfileFeatures
bitDepth	TComRdCost.h	/^  Int                   bitDepth;$/;"	m	class:DistParam
bitRateValueMinus1	TComSlice.h	/^  UInt bitRateValueMinus1[MAX_CPB_CNT][2];$/;"	m	struct:HrdSubLayerInfo
bits	TComCodingStatistics.h	/^      Int64 bits;$/;"	m	struct:TComCodingStatistics::SStat
bitwiseOrCbfPartRange	TComDataCU.cpp	/^Void TComDataCU::bitwiseOrCbfPartRange( UInt uiCbf, ComponentID compID, UInt uiAbsPartIdx, UInt uiCoveredPartIdxes )$/;"	f	class:TComDataCU
blendStripe	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::blendStripe(Pel *decSampleOffsetY, int32_t *grainStripe,$/;"	f	class:SEIFilmGrainSynthesizer
blockAverage	SEIFilmGrainSynthesizer.cpp	/^Pel SEIFilmGrainSynthesizer::blockAverage(Pel *decSampleBlk8,$/;"	f	class:SEIFilmGrainSynthesizer
blockCbpBits	TComTrQuant.h	/^  Int blockCbpBits[NUM_QT_CBF_CTX_SETS * NUM_QT_CBF_CTX_PER_SET][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
blockRootCbpBits	TComTrQuant.h	/^  Int blockRootCbpBits[4][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
bottomOffset	SEI.h	/^    Int bottomOffset;$/;"	m	struct:SEIPanScanRect::PanScanRect
bottomRightTileIndex	SEI.h	/^            Int &bottomRightTileIndex(const Int tileRectIndex)       { return m_bottom_right_tile_index[tileRectIndex]; }$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
bottomRightTileIndex	SEI.h	/^      const Int &bottomRightTileIndex(const Int tileRectIndex) const { return m_bottom_right_tile_index[tileRectIndex]; }$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
boundingBoxHeight	SEI.h	/^    UInt boundingBoxHeight;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
boundingBoxLeft	SEI.h	/^    UInt boundingBoxLeft;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
boundingBoxTop	SEI.h	/^    UInt boundingBoxTop;         \/\/ only valid if bBoundingBoxValid$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
boundingBoxValid	SEI.h	/^    Bool boundingBoxValid;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
boundingBoxWidth	SEI.h	/^    UInt boundingBoxWidth;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
buildNextStateTable	ContextModel.cpp	/^Void ContextModel::buildNextStateTable()$/;"	f	class:ContextModel
cabacBypassAlignmentEnabledFlag	ProfileLevelTierFeatures.h	/^  TRISTATE                 cabacBypassAlignmentEnabledFlag;$/;"	m	struct:ProfileFeatures
calcCRC	TComPicYuvMD5.cpp	/^UInt calcCRC(const TComPicYuv& pic, TComPictureHash &digest, const BitDepths &bitDepths)$/;"	f
calcChecksum	TComPicYuvMD5.cpp	/^UInt calcChecksum(const TComPicYuv& pic, TComPictureHash &digest, const BitDepths &bitDepths)$/;"	f
calcCost	ContextModel3DBuffer.cpp	/^UInt ContextModel3DBuffer::calcCost( SliceType sliceType, Int qp, UChar* ctxModel )$/;"	f	class:ContextModel3DBuffer
calcHAD	TComRdCost.cpp	/^Distortion TComRdCost::calcHAD( Int bitDepth, const Pel* pi0, Int iStride0, const Pel* pi1, Int iStride1, Int iWidth, Int iHeight )$/;"	f	class:TComRdCost
calcMD5	TComPicYuvMD5.cpp	/^UInt calcMD5(const TComPicYuv& pic, TComPictureHash &digest, const BitDepths &bitDepths)$/;"	f
calcPatternSigCtx	TComTrQuant.cpp	/^Int  TComTrQuant::calcPatternSigCtx( const UInt* sigCoeffGroupFlag, UInt uiCGPosX, UInt uiCGPosY, UInt widthInGroups, UInt heightInGroups )$/;"	f	class:TComTrQuant
calcRdCost	TComRdCost.cpp	/^Double TComRdCost::calcRdCost( Double numBits, Distortion distortion, DFunc eDFunc )$/;"	f	class:TComRdCost
calculateParameterSetChangedFlag	TComSlice.cpp	/^Void calculateParameterSetChangedFlag(Bool &bChanged, const std::vector<UChar> *pOldData, const std::vector<UChar> *pNewData)$/;"	f
cancelFlag	SEI.h	/^  Bool cancelFlag;$/;"	m	class:SEIDisplayOrientation
cbrFlag	TComSlice.h	/^  Bool cbrFlag           [MAX_CPB_CNT][2];$/;"	m	struct:HrdSubLayerInfo
checkCRA	TComSlice.cpp	/^Void TComSlice::checkCRA(const TComReferencePictureSet *pReferencePictureSet, Int& pocCRA, NalUnitType& associatedIRAPType, TComList<TComPic *>& rcListPic)$/;"	f	class:TComSlice
checkColRefIdx	TComSlice.cpp	/^Void TComSlice::checkColRefIdx(UInt curSliceIdx, TComPic* pic)$/;"	f	class:TComSlice
checkDcOfMatrix	TComSlice.cpp	/^Void TComScalingList::checkDcOfMatrix()$/;"	f	class:TComScalingList
checkDefaultScalingList	TComSlice.cpp	/^Bool TComScalingList::checkDefaultScalingList()$/;"	f	class:TComScalingList
checkLeadingPictureRestrictions	TComSlice.cpp	/^Void TComSlice::checkLeadingPictureRestrictions(TComList<TComPic*>& rcListPic)$/;"	f	class:TComSlice
checkMVPRange	TComPrediction.cpp	/^Bool checkMVPRange(TComMv& cMv, UInt ctuLength, UInt tileXPosInCtus, UInt tileYPosInCtus, UInt tileWidthtInCtus, UInt tileHeightInCtus, Int PredXLeft, Int PredXRight, Int PredYTop, Int PredYBottom, ChromaFormat chromaFormat)$/;"	f
checkPredMode	TComSlice.cpp	/^Void TComScalingList::checkPredMode(UInt sizeId, UInt listId)$/;"	f	class:TComScalingList
checkRegionalNestedSEIPayloadType	SEI.h	/^  static Bool checkRegionalNestedSEIPayloadType(SEI::PayloadType const payloadType)$/;"	f	class:RegionalSEI
checkSameID	TypeDef.h	/^  Bool checkSameID(RNSEIWindow const &rhs) const$/;"	f	class:RNSEIWindow
checkSameRegion	TypeDef.h	/^  Bool checkSameRegion(RNSEIWindow const &rhs) const$/;"	f	class:RNSEIWindow
checkTMctsMvp	TComPrediction.cpp	/^Bool TComPrediction::checkTMctsMvp(TComDataCU* pcCU, Int partIdx)$/;"	f	class:TComPrediction
checkThatAllRefPicsAreAvailable	TComSlice.cpp	/^Int TComSlice::checkThatAllRefPicsAreAvailable( TComList<TComPic*>& rcListPic, const TComReferencePictureSet *pReferencePictureSet, Bool printErrors, Int pocRandomAccess, Bool bUseRecoveryPoint)$/;"	f	class:TComSlice
chromaCbQpScale	TypeDef.h	/^  Double chromaCbQpScale; \/\/\/< Chroma Cb QP Scale (1.0:default)$/;"	m	struct:WCGChromaQPControl
chromaCrQpScale	TypeDef.h	/^  Double chromaCrQpScale; \/\/\/< Chroma Cr QP Scale (1.0:default)$/;"	m	struct:WCGChromaQPControl
chromaFormatValid	ProfileLevelTierFeatures.h	/^  Bool chromaFormatValid(ChromaFormat chFmt) const { return (profile == Profile::MAINREXT || profile == Profile::HIGHTHROUGHPUTREXT) ? chFmt<=maxChromaFormat : (chFmt == maxChromaFormat ); }$/;"	f	struct:ProfileFeatures
chromaQPMappingTableSize	TComRom.h	/^static const Int chromaQPMappingTableSize = 58;$/;"	v
chromaQpOffset	TypeDef.h	/^  Double chromaQpOffset;  \/\/\/< Chroma QP Offset (0.0:default)$/;"	m	struct:WCGChromaQPControl
chromaQpOffsetListEnabledFlag	ProfileLevelTierFeatures.h	/^  TRISTATE                 chromaQpOffsetListEnabledFlag;$/;"	m	struct:ProfileFeatures
chromaQpScale	TypeDef.h	/^  Double chromaQpScale;   \/\/\/< Chroma QP Scale (0.0:default)$/;"	m	struct:WCGChromaQPControl
clear	TComBitStream.cpp	/^Void TComOutputBitstream::clear()$/;"	f	class:TComOutputBitstream
clear	TComCodingStatistics.h	/^      Void clear() { bits=0; count=0; sum=0; }$/;"	f	struct:TComCodingStatistics::SStat
clear	TComYuv.cpp	/^Void TComYuv::clear()$/;"	f	class:TComYuv
clearCbf	TComDataCU.cpp	/^Void TComDataCU::clearCbf( UInt uiIdx, ComponentID compID, UInt uiNumParts )$/;"	f	class:TComDataCU
clearChangedFlag	TComSlice.h	/^  Void clearChangedFlag(Int psId)$/;"	f	class:ParameterSetMap
clearChromaQpOffsetList	TComSlice.h	/^  Void                   clearChromaQpOffsetList()                                        { m_chromaQpOffsetListLen = 0;                    }$/;"	f	class:TComPPSRExt
clearEmulationPreventionByteLocation	TComBitStream.h	/^  Void      clearEmulationPreventionByteLocation()                                   { m_emulationPreventionByteLocation.clear();          }$/;"	f	class:TComInputBitstream
clearMvField	TComMotionInfo.cpp	/^Void TComCUMvField::clearMvField()$/;"	f	class:TComCUMvField
clearPPSChangedFlag	TComSlice.h	/^  Void           clearPPSChangedFlag(Int ppsId)                              { m_ppsMap.clearChangedFlag(ppsId); }$/;"	f	class:ParameterSetManager
clearRegions	SEI.h	/^  Void clearRegions() { m_regions.clear(); }$/;"	f	class:SEIRegionalNesting
clearSPSChangedFlag	TComSlice.h	/^  Void           clearSPSChangedFlag(Int spsId)                              { m_spsMap.clearChangedFlag(spsId); }$/;"	f	class:ParameterSetManager
clearSliceARLCnt	TComTrQuant.cpp	/^Void TComTrQuant::clearSliceARLCnt()$/;"	f	class:TComTrQuant
clearSliceBuffer	TComPic.h	/^  Void          clearSliceBuffer()           {m_picSym.clearSliceBuffer();         }$/;"	f	class:TComPic
clearSliceBuffer	TComPicSym.cpp	/^Void TComPicSym::clearSliceBuffer()$/;"	f	class:TComPicSym
clearSubstreamSizes	TComSlice.h	/^  Void                        clearSubstreamSizes( )                                 { return m_substreamSizes.clear();                              }$/;"	f	class:TComSlice
clearVPSChangedFlag	TComSlice.h	/^  Void           clearVPSChangedFlag(Int vpsId)                              { m_vpsMap.clearChangedFlag(vpsId); }$/;"	f	class:ParameterSetManager
clipMv	TComDataCU.cpp	/^Void TComDataCU::clipMv    (TComMv&  rcMv) const$/;"	f	class:TComDataCU
clockTimeStampFlag	TypeDef.h	/^  Bool clockTimeStampFlag;$/;"	m	struct:TComSEITimeSet
cntDroppedFlag	TypeDef.h	/^  Bool cntDroppedFlag;$/;"	m	struct:TComSEITimeSet
codedValue	SEI.h	/^    Int codedValue;$/;"	m	struct:SEIColourRemappingInfo::CRIlut
coeffGroupRDStats	TComTrQuant.cpp	/^} coeffGroupRDStats;$/;"	t	typeref:struct:__anon1	file:
colourVolumeSEIEnabled	TypeDef.h	/^  Bool      colourVolumeSEIEnabled;$/;"	m	struct:TComSEIMasteringDisplay
comp	TComSlice.h	/^    } comp;$/;"	m	union:ChromaQpAdj::__anon5	typeref:struct:ChromaQpAdj::__anon5::__anon6
compCRC	TComPicYuvMD5.cpp	/^UInt compCRC(Int bitdepth, const Pel* plane, UInt width, UInt height, UInt stride, TComPictureHash &digest)$/;"	f
compChecksum	TComPicYuvMD5.cpp	/^UInt compChecksum(Int bitdepth, const Pel* plane, UInt width, UInt height, UInt stride, TComPictureHash &digest, const BitDepths &\/*bitDepths*\/)$/;"	f
compIdx	TComRdCost.h	/^  ComponentID           compIdx;$/;"	m	class:DistParam
compModelValue	SEI.h	/^    std::vector<Int> compModelValue;$/;"	m	struct:SEIFilmGrainCharacteristics::CompModelIntensityValues
compress	TComMotionInfo.cpp	/^Void TComCUMvField::compress(SChar *pePredMode, const SChar* pePredModeSource, const Int scale, const TComCUMvField &source)$/;"	f	class:TComCUMvField
compress	TComMotionInfo.cpp	/^Void TComCUMvField::compress(SChar* pePredMode, Int scale)$/;"	f	class:TComCUMvField
compressMV	TComDataCU.cpp	/^Void TComDataCU::compressMV()$/;"	f	class:TComDataCU
compressMotion	TComPic.cpp	/^Void TComPic::compressMotion()$/;"	f	class:TComPic
contextSetStartTable	TComChromaFormat.h	/^static const UInt contextSetStartTable            [MAX_NUM_CHANNEL_TYPE] = {FIRST_CTX_SET_LUMA,      FIRST_CTX_SET_CHROMA     };$/;"	v
copyFrom	ContextModel3DBuffer.h	/^  Void copyFrom( const ContextModel3DBuffer* src )$/;"	f	class:ContextModel3DBuffer
copyFrom	SEI.h	/^  Void copyFrom( const SEIColourRemappingInfo &seiCriInput)$/;"	f	class:SEIColourRemappingInfo
copyFrom	SEI.h	/^  Void copyFrom(const SEIAnnotatedRegions &seiAnnotatedRegions)$/;"	f	class:SEIAnnotatedRegions
copyFrom	TComMotionInfo.cpp	/^Void TComCUMvField::copyFrom( TComCUMvField const * pcCUMvFieldSrc, Int iNumPartSrc, Int iPartAddrDst )$/;"	f	class:TComCUMvField
copyFromPicComponent	TComYuv.cpp	/^Void TComYuv::copyFromPicComponent  ( const ComponentID compID, const TComPicYuv* pcPicYuvSrc, const UInt ctuRsAddr, const UInt uiAbsZorderIdx )$/;"	f	class:TComYuv
copyFromPicYuv	TComYuv.cpp	/^Void TComYuv::copyFromPicYuv   ( const TComPicYuv* pcPicYuvSrc, const UInt ctuRsAddr, const UInt uiAbsZorderIdx )$/;"	f	class:TComYuv
copyInterPredInfoFrom	TComDataCU.cpp	/^Void TComDataCU::copyInterPredInfoFrom    ( TComDataCU* pcCU, UInt uiAbsPartIdx, RefPicList eRefPicList )$/;"	f	class:TComDataCU
copyPartFrom	TComDataCU.cpp	/^Void TComDataCU::copyPartFrom( TComDataCU* pcCU, UInt uiPartUnitIdx, UInt uiDepth )$/;"	f	class:TComDataCU
copyPartToComponent	TComYuv.cpp	/^Void TComYuv::copyPartToComponent( const ComponentID compID, TComYuv* pcYuvDst, const UInt uiSrcPartIdx ) const$/;"	f	class:TComYuv
copyPartToPartComponent	TComYuv.cpp	/^Void TComYuv::copyPartToPartComponent  ( const ComponentID compID, TComYuv* pcYuvDst, const UInt uiPartIdx, const UInt iWidthComponent, const UInt iHeightComponent ) const$/;"	f	class:TComYuv
copyPartToPartComponentMxN	TComYuv.cpp	/^Void TComYuv::copyPartToPartComponentMxN  ( const ComponentID compID, TComYuv* pcYuvDst, const TComRectangle &rect) const$/;"	f	class:TComYuv
copyPartToPartYuv	TComYuv.cpp	/^Void TComYuv::copyPartToPartYuv   ( TComYuv* pcYuvDst, const UInt uiPartIdx, const UInt iWidth, const UInt iHeight ) const$/;"	f	class:TComYuv
copyPartToYuv	TComYuv.cpp	/^Void TComYuv::copyPartToYuv( TComYuv* pcYuvDst, const UInt uiSrcPartIdx ) const$/;"	f	class:TComYuv
copySliceInfo	TComSlice.cpp	/^Void TComSlice::copySliceInfo(TComSlice *pSrc)$/;"	f	class:TComSlice
copySubCU	TComDataCU.cpp	/^Void TComDataCU::copySubCU( TComDataCU* pcCU, UInt uiAbsPartIdx )$/;"	f	class:TComDataCU
copyTo	SEI.cpp	/^void SEIBufferingPeriod::copyTo (SEIBufferingPeriod& target)$/;"	f	class:SEIBufferingPeriod
copyTo	SEI.cpp	/^void SEIPictureTiming::copyTo (SEIPictureTiming& target)$/;"	f	class:SEIPictureTiming
copyTo	TComMotionInfo.cpp	/^Void TComCUMvField::copyTo( TComCUMvField* pcCUMvFieldDst, Int iPartAddrDst ) const$/;"	f	class:TComCUMvField
copyTo	TComMotionInfo.cpp	/^Void TComCUMvField::copyTo( TComCUMvField* pcCUMvFieldDst, Int iPartAddrDst, UInt uiOffset, UInt uiNumPart ) const$/;"	f	class:TComCUMvField
copyToPartComponent	TComYuv.cpp	/^Void TComYuv::copyToPartComponent( const ComponentID compID, TComYuv* pcYuvDst, const UInt uiDstPartIdx ) const$/;"	f	class:TComYuv
copyToPartYuv	TComYuv.cpp	/^Void TComYuv::copyToPartYuv( TComYuv* pcYuvDst, const UInt uiDstPartIdx ) const$/;"	f	class:TComYuv
copyToPic	TComDataCU.cpp	/^Void TComDataCU::copyToPic( UChar uhDepth )$/;"	f	class:TComDataCU
copyToPic	TComPicYuv.cpp	/^Void  TComPicYuv::copyToPic (TComPicYuv*  pcPicYuvDst) const$/;"	f	class:TComPicYuv
copyToPicComponent	TComYuv.cpp	/^Void TComYuv::copyToPicComponent  ( const ComponentID compID, TComPicYuv* pcPicYuvDst, const UInt ctuRsAddr, const UInt uiAbsZorderIdx, const UInt uiPartDepth, const UInt uiPartIdx ) const$/;"	f	class:TComYuv
copyToPicYuv	TComYuv.cpp	/^Void TComYuv::copyToPicYuv   ( TComPicYuv* pcPicYuvDst, const UInt ctuRsAddr, const UInt uiAbsZorderIdx, const UInt uiPartDepth, const UInt uiPartIdx ) const$/;"	f	class:TComYuv
count	TComCodingStatistics.h	/^      Int64 count;$/;"	m	struct:TComCodingStatistics::SStat
countStartCodeEmulations	TComBitStream.cpp	/^Int TComOutputBitstream::countStartCodeEmulations()$/;"	f	class:TComOutputBitstream
countingType	TypeDef.h	/^  Int  countingType;$/;"	m	struct:TComSEITimeSet
cpbCntMinus1	TComSlice.h	/^  UInt cpbCntMinus1;$/;"	m	struct:HrdSubLayerInfo
cpbNalFactor	ProfileLevelTierFeatures.h	/^  UInt                     cpbNalFactor;                \/\/ currently not used for checking$/;"	m	struct:ProfileFeatures
cpbSizeValue	TComSlice.h	/^  UInt cpbSizeValue      [MAX_CPB_CNT][2];$/;"	m	struct:HrdSubLayerInfo
cpbVclFactor	ProfileLevelTierFeatures.h	/^  UInt                     cpbVclFactor;$/;"	m	struct:ProfileFeatures
create	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::create(uint32_t width, uint32_t height, ChromaFormat fmt, $/;"	f	class:SEIFilmGrainSynthesizer
create	TComDataCU.cpp	/^Void TComDataCU::create( ChromaFormat chromaFormatIDC, UInt uiNumPartition, UInt uiWidth, UInt uiHeight, Bool bDecSubCu, Int unitSize$/;"	f	class:TComDataCU
create	TComLoopFilter.cpp	/^Void TComLoopFilter::create( UInt uiMaxCUDepth )$/;"	f	class:TComLoopFilter
create	TComMotionInfo.cpp	/^Void TComCUMvField::create( UInt uiNumPartition )$/;"	f	class:TComCUMvField
create	TComPic.cpp	/^Void TComPic::create( const TComSPS &sps, const TComPPS &pps, const Bool bCreateEncoderSourcePicYuv, const Bool bCreateForImmediateReconstruction )$/;"	f	class:TComPic
create	TComPicSym.cpp	/^Void TComPicSym::create  ( const TComSPS &sps, const TComPPS &pps, UInt uiMaxDepth, const Bool bAllocateCtuArray )$/;"	f	class:TComPicSym
create	TComPicYuv.cpp	/^Void TComPicYuv::create ( const Int picWidth,                 \/\/\/< picture width$/;"	f	class:TComPicYuv
create	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::create( Int picWidth, Int picHeight, ChromaFormat format, UInt maxCUWidth, UInt maxCUHeight, UInt maxCUDepth, UInt lumaBitShift, UInt chromaBitShift )$/;"	f	class:TComSampleAdaptiveOffset
create	TComSlice.h	/^  Void                           create  (Int numberOfEntries)                            { m_referencePictureSets.resize(numberOfEntries);         }$/;"	f	class:TComRPSList
create	TComYuv.cpp	/^Void TComYuv::create( UInt iWidth, UInt iHeight, ChromaFormat chromaFormatIDC )$/;"	f	class:TComYuv
createExplicitReferencePictureSetFromReference	TComSlice.cpp	/^Void TComSlice::createExplicitReferencePictureSetFromReference( TComList<TComPic*>& rcListPic, const TComReferencePictureSet *pReferencePictureSet, Bool isRAP, Int pocRandomAccess, Bool bUseRecoveryPoint, const Bool bEfficientFieldIRAPEnabled)$/;"	f	class:TComSlice
createGrainSynthesizer	TComPic.cpp	/^void TComPic::createGrainSynthesizer(Bool bFirstPictureInSequence, SEIFilmGrainSynthesizer* pGrainCharacteristics, TComPicYuv* pGrainBuf, const TComSPS* sps)$/;"	f	class:TComPic
createHrdParamBuffer	TComSlice.h	/^  Void              createHrdParamBuffer()$/;"	f	class:TComVPS
createRPSList	TComSlice.cpp	/^Void  TComSPS::createRPSList( Int numRPS )$/;"	f	class:TComSPS
createWithoutCUInfo	TComPicYuv.cpp	/^Void TComPicYuv::createWithoutCUInfo ( const Int picWidth,                 \/\/\/< picture width$/;"	f	class:TComPicYuv
crossComponentPrediction	TComTrQuant.cpp	/^Void TComTrQuant::crossComponentPrediction(       TComTU      & rTu,$/;"	f	class:TComTrQuant
ctxIndMap4x4	TComRom.cpp	/^const UInt ctxIndMap4x4[4*4] =$/;"	v
d64CodedLevelandDist	TComTrQuant.cpp	/^  Double d64CodedLevelandDist; \/\/ distortion and level cost only$/;"	m	struct:__anon1	file:
d64SigCost	TComTrQuant.cpp	/^  Double d64SigCost;$/;"	m	struct:__anon1	file:
d64SigCost_0	TComTrQuant.cpp	/^  Double d64SigCost_0;$/;"	m	struct:__anon1	file:
d64UncodedDist	TComTrQuant.cpp	/^  Double d64UncodedDist;    \/\/ all zero coded block distortion$/;"	m	struct:__anon1	file:
data	TComCodingStatistics.h	/^    TComCodingStatisticsData data;$/;"	m	class:TComCodingStatistics
dataBase	SEIFilmGrainSynthesizer.h	/^  int8_t dataBase[NUM_CUT_OFF_FREQ][NUM_CUT_OFF_FREQ][DATA_BASE_SIZE][DATA_BASE_SIZE];$/;"	m	struct:GrainSynthesisStruct_t
dataBaseGen	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::dataBaseGen()$/;"	f	class:SEIFilmGrainSynthesizer
deblockFactor	SEIFilmGrainSynthesizer.cpp	/^static const uint32_t deblockFactor[13] =$/;"	v	file:
deblockGrainStripe	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::deblockGrainStripe(int32_t *grainStripe, uint32_t widthComp, uint32_t strideComp)$/;"	f	class:SEIFilmGrainSynthesizer
debugCabacBinTargetLine	Debug.cpp	/^const UInt debugCabacBinTargetLine = 0;$/;"	v
debugCabacBinWindow	Debug.cpp	/^const UInt debugCabacBinWindow     = 1000000;$/;"	v
debugEncoderSearchBinTargetLine	Debug.cpp	/^const UInt debugEncoderSearchBinTargetLine = 0;$/;"	v
debugEncoderSearchBinWindow	Debug.cpp	/^const UInt debugEncoderSearchBinWindow     = 1000000;$/;"	v
debug_reorder_data_inter_token	Debug.cpp	/^const TChar *debug_reorder_data_inter_token[MAX_NUM_COMPONENT+1]$/;"	v
decodingRefreshMarking	TComSlice.cpp	/^Void TComSlice::decodingRefreshMarking(Int& pocCRA, Bool& bRefreshPending, TComList<TComPic*>& rcListPic, const bool bEfficientFieldIRAPEnabled)$/;"	f	class:TComSlice
deleteSEIs	SEI.cpp	/^Void deleteSEIs (SEIMessages &seiList)$/;"	f
deriveLeftBottomIdx	TComDataCU.cpp	/^Void TComDataCU::deriveLeftBottomIdx( UInt  uiPartIdx,      UInt&      ruiPartIdxLB ) const$/;"	f	class:TComDataCU
deriveLeftBottomIdxGeneral	TComDataCU.cpp	/^Void TComDataCU::deriveLeftBottomIdxGeneral( UInt uiAbsPartIdx, UInt uiPartIdx, UInt& ruiPartIdxLB ) const$/;"	f	class:TComDataCU
deriveLeftRightTopIdx	TComDataCU.cpp	/^Void TComDataCU::deriveLeftRightTopIdx ( UInt uiPartIdx, UInt& ruiPartIdxLT, UInt& ruiPartIdxRT ) const$/;"	f	class:TComDataCU
deriveLeftRightTopIdxGeneral	TComDataCU.cpp	/^Void TComDataCU::deriveLeftRightTopIdxGeneral ( UInt uiAbsPartIdx, UInt uiPartIdx, UInt& ruiPartIdxLT, UInt& ruiPartIdxRT ) const$/;"	f	class:TComDataCU
deriveLoopFilterBoundaryAvailibility	TComPicSym.cpp	/^Void TComPicSym::deriveLoopFilterBoundaryAvailibility(Int ctuRsAddr,$/;"	f	class:TComPicSym
deriveRightBottomIdx	TComDataCU.cpp	/^Void TComDataCU::deriveRightBottomIdx( UInt uiPartIdx, UInt &ruiPartIdxRB ) const$/;"	f	class:TComDataCU
destroy	TComDataCU.cpp	/^Void TComDataCU::destroy()$/;"	f	class:TComDataCU
destroy	TComLoopFilter.cpp	/^Void TComLoopFilter::destroy()$/;"	f	class:TComLoopFilter
destroy	TComMotionInfo.cpp	/^Void TComCUMvField::destroy()$/;"	f	class:TComCUMvField
destroy	TComPic.cpp	/^Void TComPic::destroy()$/;"	f	class:TComPic
destroy	TComPicSym.cpp	/^Void TComPicSym::destroy()$/;"	f	class:TComPicSym
destroy	TComPicYuv.cpp	/^Void TComPicYuv::destroy()$/;"	f	class:TComPicYuv
destroy	TComPrediction.cpp	/^Void TComPrediction::destroy()$/;"	f	class:TComPrediction
destroy	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::destroy()$/;"	f	class:TComSampleAdaptiveOffset
destroy	TComSlice.h	/^  Void                           destroy ()                                               { }$/;"	f	class:TComRPSList
destroy	TComYuv.cpp	/^Void TComYuv::destroy()$/;"	f	class:TComYuv
destroyROM	TComRom.cpp	/^Void destroyROM()$/;"	f
destroyScalingList	TComTrQuant.cpp	/^Void TComTrQuant::destroyScalingList()$/;"	f	class:TComTrQuant
discontinuityFlag	TypeDef.h	/^  Bool discontinuityFlag;$/;"	m	struct:TComSEITimeSet
dissociateSEIObject	SEI.h	/^  SEI *dissociateSEIObject()  \/\/ Dissociates SEI; receiver of this function in charge of memory deallocation.$/;"	f	class:RegionalSEI
divideByPowerOf2	TComMv.h	/^  Void divideByPowerOf2 (const Int i)$/;"	f	class:TComMv
duBitRateValue	TComSlice.h	/^  UInt duBitRateValue    [MAX_CPB_CNT][2];$/;"	m	struct:HrdSubLayerInfo
ducpbSizeValue	TComSlice.h	/^  UInt ducpbSizeValue    [MAX_CPB_CNT][2];$/;"	m	struct:HrdSubLayerInfo
dump	TComPicYuv.cpp	/^Void TComPicYuv::dump (const std::string &fileName, const BitDepths &bitDepths, const Bool bAppend, const Bool bForceTo8Bit) const$/;"	f	class:TComPicYuv
elevationCentre	SEI.h	/^    Int  elevationCentre;$/;"	m	struct:SEIOmniViewport::OmniViewport
enable4ChromaPUsInIntraNxNCU	TComChromaFormat.h	/^static inline Bool enable4ChromaPUsInIntraNxNCU(const ChromaFormat chFmt)$/;"	f
enabled	TypeDef.h	/^  Bool   enabled;         \/\/\/< Enabled flag (0:default)$/;"	m	struct:WCGChromaQPControl
estBitsSbacStruct	TComTrQuant.h	/^} estBitsSbacStruct;$/;"	t	typeref:struct:__anon3
extendPicBorder	TComPicYuv.cpp	/^Void TComPicYuv::extendPicBorder ()$/;"	f	class:TComPicYuv
extendedPrecisionProcessingFlag	ProfileLevelTierFeatures.h	/^  TRISTATE                 extendedPrecisionProcessingFlag;$/;"	m	struct:ProfileFeatures
extensionFlag	SEI.h	/^  Bool extensionFlag;$/;"	m	class:SEIDisplayOrientation
extractSeisByType	SEI.cpp	/^SEIMessages extractSeisByType(SEIMessages &seiList, SEI::PayloadType seiType)$/;"	f
extractSubstream	TComBitStream.cpp	/^TComInputBitstream *TComInputBitstream::extractSubstream( UInt uiNumBits )$/;"	f	class:TComInputBitstream
fastForwardDst	TComTrQuant.cpp	/^Void fastForwardDst(TCoeff *block, TCoeff *coeff, Int shift)  \/\/ input block, output coeff$/;"	f
fastInverseDst	TComTrQuant.cpp	/^Void fastInverseDst(TCoeff *tmp, TCoeff *block, Int shift, const TCoeff outputMinimum, const TCoeff outputMaximum)  \/\/ input tmp, output block$/;"	f
fgsDeinit	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::fgsDeinit()$/;"	f	class:SEIFilmGrainSynthesizer
fgsInit	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::fgsInit()$/;"	f	class:SEIFilmGrainSynthesizer
fillMvpCand	TComDataCU.cpp	/^Void TComDataCU::fillMvpCand ( const UInt partIdx, const UInt partAddr, const RefPicList eRefPicList, const Int refIdx, AMVPInfo* pInfo ) const$/;"	f	class:TComDataCU
fillReferenceSamples	TComPattern.cpp	/^Void fillReferenceSamples( const Int bitDepth, $/;"	f
filter	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filter(Int bitDepth, Pel const *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, TFilterCoeff const *coeff)$/;"	f	class:TComInterpolationFilter
filterCopy	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filterCopy(Int bitDepth, const Pel *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, Bool isFirst, Bool isLast)$/;"	f	class:TComInterpolationFilter
filterHor	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filterHor(Int bitDepth, Pel *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, Bool isLast, TFilterCoeff const *coeff)$/;"	f	class:TComInterpolationFilter
filterHor	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filterHor(const ComponentID compID, Pel *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, Int frac, Bool isLast, const ChromaFormat fmt, const Int bitDepth )$/;"	f	class:TComInterpolationFilter
filterIntraReferenceSamples	TComChromaFormat.h	/^static inline Bool filterIntraReferenceSamples (const ChannelType chType, const ChromaFormat chFmt, const Bool intraReferenceSmoothingDisabled)$/;"	f
filterVer	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filterVer(Int bitDepth, Pel *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, Bool isFirst, Bool isLast, TFilterCoeff const *coeff)$/;"	f	class:TComInterpolationFilter
filterVer	TComInterpolationFilter.cpp	/^Void TComInterpolationFilter::filterVer(const ComponentID compID, Pel *src, Int srcStride, Pel *dst, Int dstStride, Int width, Int height, Int frac, Bool isFirst, Bool isLast, const ChromaFormat fmt, const Int bitDepth )$/;"	f	class:TComInterpolationFilter
filteringIntraReferenceSamples	TComPattern.cpp	/^Bool TComPrediction::filteringIntraReferenceSamples(const ComponentID compID, UInt uiDirMode, UInt uiTuChWidth, UInt uiTuChHeight, const ChromaFormat chFmt, const Bool intraReferenceSmoothingDisabled)$/;"	f	class:TComPrediction
find	TComList.h	/^  TComIterator find( const C& rcT ) \/\/ leszek$/;"	f	class:TComList
firstSignificanceMapContext	TypeDef.h	/^        UInt             firstSignificanceMapContext;$/;"	m	struct:TUEntropyCodingParameters
fixedPicRateFlag	TComSlice.h	/^  Bool fixedPicRateFlag;$/;"	m	struct:HrdSubLayerInfo
fixedPicRateWithinCvsFlag	TComSlice.h	/^  Bool fixedPicRateWithinCvsFlag;$/;"	m	struct:HrdSubLayerInfo
formatCapabilityFactorx1000	ProfileLevelTierFeatures.h	/^  UInt                     formatCapabilityFactorx1000; \/\/ currently not used for checking$/;"	m	struct:ProfileFeatures
fullTimeStampFlag	TypeDef.h	/^  Bool fullTimeStampFlag;$/;"	m	struct:TComSEITimeSet
g_HLSTraceEnable	TComRom.cpp	/^Bool   g_HLSTraceEnable = true;$/;"	v
g_aiT16	TComRom.cpp	/^const TMatrixCoeff g_aiT16[TRANSFORM_NUMBER_OF_DIRECTIONS][16][16] =$/;"	v
g_aiT32	TComRom.cpp	/^const TMatrixCoeff g_aiT32[TRANSFORM_NUMBER_OF_DIRECTIONS][32][32] =$/;"	v
g_aiT4	TComRom.cpp	/^const TMatrixCoeff g_aiT4 [TRANSFORM_NUMBER_OF_DIRECTIONS][4][4]   =$/;"	v
g_aiT8	TComRom.cpp	/^const TMatrixCoeff g_aiT8 [TRANSFORM_NUMBER_OF_DIRECTIONS][8][8]   =$/;"	v
g_as_DST_MAT_4	TComRom.cpp	/^const TMatrixCoeff g_as_DST_MAT_4[TRANSFORM_NUMBER_OF_DIRECTIONS][4][4] =$/;"	v
g_aucChromaScale	TComRom.cpp	/^const UChar g_aucChromaScale[NUM_CHROMA_FORMAT][chromaQPMappingTableSize]=$/;"	v
g_aucConvertToBit	TComRom.cpp	/^SChar  g_aucConvertToBit  [ MAX_CU_SIZE+1 ];$/;"	v
g_aucIntraModeNumFast_NotUseMPM	TComRom.cpp	/^const UChar g_aucIntraModeNumFast_NotUseMPM[MAX_CU_DEPTH] =$/;"	v
g_aucIntraModeNumFast_UseMPM	TComRom.cpp	/^const UChar g_aucIntraModeNumFast_UseMPM[MAX_CU_DEPTH] =$/;"	v
g_auiPUOffset	TComRom.cpp	/^const UInt g_auiPUOffset[NUMBER_OF_PART_SIZES] = { 0, 8, 4, 4, 2, 10, 1, 5};$/;"	v
g_auiRasterToPelX	TComRom.cpp	/^UInt g_auiRasterToPelX  [ MAX_NUM_PART_IDXS_IN_CTU_WIDTH*MAX_NUM_PART_IDXS_IN_CTU_WIDTH ] = { 0, };$/;"	v
g_auiRasterToPelY	TComRom.cpp	/^UInt g_auiRasterToPelY  [ MAX_NUM_PART_IDXS_IN_CTU_WIDTH*MAX_NUM_PART_IDXS_IN_CTU_WIDTH ] = { 0, };$/;"	v
g_auiRasterToZscan	TComRom.cpp	/^UInt g_auiRasterToZscan [ MAX_NUM_PART_IDXS_IN_CTU_WIDTH*MAX_NUM_PART_IDXS_IN_CTU_WIDTH ] = { 0, };$/;"	v
g_auiZscanToRaster	TComRom.cpp	/^UInt g_auiZscanToRaster [ MAX_NUM_PART_IDXS_IN_CTU_WIDTH*MAX_NUM_PART_IDXS_IN_CTU_WIDTH ] = { 0, };$/;"	v
g_bEncDecTraceDisable	TComRom.cpp	/^const Bool g_bEncDecTraceDisable = false;$/;"	v
g_bEncDecTraceEnable	TComRom.cpp	/^const Bool g_bEncDecTraceEnable  = true;$/;"	v
g_bJustDoIt	TComRom.cpp	/^Bool   g_bJustDoIt = false;$/;"	v
g_chroma422IntraAngleMappingTable	TComRom.cpp	/^const UChar g_chroma422IntraAngleMappingTable[NUM_INTRA_MODE] =$/;"	v
g_debugCounter	Debug.cpp	/^UInt  g_debugCounter  = 0;$/;"	v
g_hTrace	TComRom.cpp	/^FILE*  g_hTrace = NULL; \/\/ Set to NULL to open up a file. Set to stdout to use the current output$/;"	v
g_invQuantScales	TComRom.cpp	/^const Int g_invQuantScales[SCALING_LIST_REM_NUM] =$/;"	v
g_nSymbolCounter	TComRom.cpp	/^UInt64 g_nSymbolCounter = 0;$/;"	v
g_quantInterDefault8x8	TComRom.cpp	/^const Int g_quantInterDefault8x8[8*8] =$/;"	v
g_quantIntraDefault8x8	TComRom.cpp	/^const Int g_quantIntraDefault8x8[8*8] =$/;"	v
g_quantScales	TComRom.cpp	/^const Int g_quantScales[SCALING_LIST_REM_NUM] =$/;"	v
g_quantTSDefault4x4	TComRom.cpp	/^const Int g_quantTSDefault4x4[4*4] =$/;"	v
g_scalingListSize	TComRom.cpp	/^const UInt g_scalingListSize   [SCALING_LIST_SIZE_NUM] = {16,64,256,1024};$/;"	v
g_scalingListSizeX	TComRom.cpp	/^const UInt g_scalingListSizeX  [SCALING_LIST_SIZE_NUM] = { 4, 8, 16,  32};$/;"	v
g_scanOrder	TComRom.cpp	/^UInt* g_scanOrder[SCAN_NUMBER_OF_GROUP_TYPES][SCAN_NUMBER_OF_TYPES][ MAX_CU_DEPTH ][ MAX_CU_DEPTH ];$/;"	v
g_transformMatrixShift	TComRom.h	/^static const Int g_transformMatrixShift[TRANSFORM_NUMBER_OF_DIRECTIONS] = {  6, 6 };$/;"	v
g_transformMatrixShift	TComRom.h	/^static const Int g_transformMatrixShift[TRANSFORM_NUMBER_OF_DIRECTIONS] = { 14, 6 };$/;"	v
g_uiGroupIdx	TComRom.cpp	/^const UInt g_uiGroupIdx[ MAX_TU_SIZE ]   = {0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9};$/;"	v
g_uiMinInGroup	TComRom.cpp	/^const UInt g_uiMinInGroup[ LAST_SIGNIFICANT_GROUPS ] = {0,1,2,3,4,6,8,12,16,24};$/;"	v
gaussianLUT	SEIFilmGrainSynthesizer.cpp	/^static const int8_t gaussianLUT[2048] =$/;"	v	file:
generalIntraConstraintFlag	ProfileLevelTierFeatures.h	/^  Bool                     generalIntraConstraintFlag;$/;"	m	struct:ProfileFeatures
generalLowerBitRateConstraint	ProfileLevelTierFeatures.h	/^  TRISTATE                 generalLowerBitRateConstraint;$/;"	m	struct:ProfileFeatures
generalOnePictureOnlyConstraintFlag	ProfileLevelTierFeatures.h	/^  Bool                     generalOnePictureOnlyConstraintFlag;$/;"	m	struct:ProfileFeatures
generalRExtToolsEnabled	ProfileLevelTierFeatures.h	/^  TRISTATE                 generalRExtToolsEnabled;$/;"	m	struct:ProfileFeatures
get	ContextModel3DBuffer.h	/^  ContextModel& get( UInt uiZ, UInt uiY, UInt uiX )$/;"	f	class:ContextModel3DBuffer
get	ContextModel3DBuffer.h	/^  ContextModel* get( UInt uiZ )$/;"	f	class:ContextModel3DBuffer
get	ContextModel3DBuffer.h	/^  ContextModel* get( UInt uiZ, UInt uiY )$/;"	f	class:ContextModel3DBuffer
getAMVPInfo	TComMotionInfo.h	/^  AMVPInfo* getAMVPInfo () { return &m_cAMVPInfo; }$/;"	f	class:TComCUMvField
getAbsHor	TComMv.h	/^  Int   getAbsHor () const { return abs( m_iHor );   }$/;"	f	class:TComMv
getAbsVer	TComMv.h	/^  Int   getAbsVer () const { return abs( m_iVer );   }$/;"	f	class:TComMv
getActiveSPS	TComSlice.h	/^  const TComSPS* getActiveSPS()const { return m_spsMap.getPS(m_activeSPSId); };$/;"	f	class:ParameterSetManager
getActiveVPS	TComSlice.h	/^  const TComVPS* getActiveVPS()const { return m_vpsMap.getPS(m_activeVPSId); };$/;"	f	class:ParameterSetManager
getAddr	TComPicYuv.h	/^  Pel*          getAddr           (const ComponentID ch)       { return  m_piPicOrg[ch];   }$/;"	f	class:TComPicYuv
getAddr	TComPicYuv.h	/^  Pel*          getAddr           (const ComponentID ch, const Int ctuRSAddr )       { return m_piPicOrg[ch] + m_ctuOffsetInBuffer[ch==0?0:1][ ctuRSAddr ]; }$/;"	f	class:TComPicYuv
getAddr	TComPicYuv.h	/^  Pel*          getAddr           (const ComponentID ch, const Int ctuRSAddr, const Int uiAbsZorderIdx )$/;"	f	class:TComPicYuv
getAddr	TComPicYuv.h	/^  const Pel*    getAddr           (const ComponentID ch) const { return  m_piPicOrg[ch];   }$/;"	f	class:TComPicYuv
getAddr	TComPicYuv.h	/^  const Pel*    getAddr           (const ComponentID ch, const Int ctuRSAddr ) const { return m_piPicOrg[ch] + m_ctuOffsetInBuffer[ch==0?0:1][ ctuRSAddr ]; }$/;"	f	class:TComPicYuv
getAddr	TComPicYuv.h	/^  const Pel*    getAddr           (const ComponentID ch, const Int ctuRSAddr, const Int uiAbsZorderIdx ) const$/;"	f	class:TComPicYuv
getAddr	TComYuv.h	/^  Pel*         getAddr                    (const ComponentID id)                    { return m_apiBuf[id]; }$/;"	f	class:TComYuv
getAddr	TComYuv.h	/^  Pel*         getAddr                    (const ComponentID id, const UInt iTransUnitIdx, const UInt iBlkSizeForComponent)$/;"	f	class:TComYuv
getAddr	TComYuv.h	/^  Pel*         getAddr                    (const ComponentID id, const UInt uiPartUnitIdx)$/;"	f	class:TComYuv
getAddr	TComYuv.h	/^  const Pel*   getAddr                    (const ComponentID id) const              { return m_apiBuf[id]; }$/;"	f	class:TComYuv
getAddr	TComYuv.h	/^  const Pel*   getAddr                    (const ComponentID id, const UInt iTransUnitIdx, const UInt iBlkSizeForComponent) const$/;"	f	class:TComYuv
getAddr	TComYuv.h	/^  const Pel*   getAddr                    (const ComponentID id, const UInt uiPartUnitIdx) const$/;"	f	class:TComYuv
getAddrPix	TComYuv.h	/^  Pel*         getAddrPix                 (const ComponentID id, const UInt iPixX, const UInt iPixY )       { return m_apiBuf[id] + iPixY * getStride(id) + iPixX; }$/;"	f	class:TComYuv
getAddrPix	TComYuv.h	/^  const Pel*   getAddrPix                 (const ComponentID id, const UInt iPixX, const UInt iPixY ) const { return m_apiBuf[id] + iPixY * getStride(id) + iPixX; }$/;"	f	class:TComYuv
getAllowedChromaDir	TComDataCU.cpp	/^Void TComDataCU::getAllowedChromaDir( UInt uiAbsPartIdx, UInt uiModeList[NUM_CHROMA_MODE] ) const$/;"	f	class:TComDataCU
getArlCoeff	TComDataCU.h	/^  TCoeff*       getArlCoeff                   ( ComponentID component )                                    { return m_pcArlCoeff[component];            }$/;"	f	class:TComDataCU
getAspectRatioIdc	TComSlice.h	/^  Int               getAspectRatioIdc() const                              { return m_aspectRatioIdc;                       }$/;"	f	class:TComVUI
getAspectRatioInfoPresentFlag	TComSlice.h	/^  Bool              getAspectRatioInfoPresentFlag() const                  { return m_aspectRatioInfoPresentFlag;           }$/;"	f	class:TComVUI
getAssociatedIRAPPOC	TComSlice.h	/^  Int                         getAssociatedIRAPPOC() const                           { return m_iAssociatedIRAP;                                     }$/;"	f	class:TComSlice
getAssociatedIRAPType	TComSlice.h	/^  NalUnitType                 getAssociatedIRAPType() const                          { return m_iAssociatedIRAPType;                                 }$/;"	f	class:TComSlice
getBeta	TComLoopFilter.h	/^  static Int getBeta( Int qp )$/;"	f	class:TComLoopFilter
getBinsCoded	ContextModel.h	/^  UInt getBinsCoded()           { return m_binsCoded;   }$/;"	f	class:ContextModel
getBitDepth	TComSlice.h	/^  Int                    getBitDepth(ChannelType type) const                                             { return m_bitDepths.recon[type];                                      }$/;"	f	class:TComSPS
getBitDepthConstraint	TComSlice.h	/^  UInt          getBitDepthConstraint() const               { return m_bitDepthConstraintValue;     }$/;"	f	class:ProfileTierLevel
getBitDepthY	TComPattern.h	/^  Int   getBitDepthY() const      { return m_bitDepth;       }$/;"	f	class:TComPattern
getBitDepths	TComSlice.h	/^  const BitDepths&       getBitDepths() const                                                            { return m_bitDepths;                                                  }$/;"	f	class:TComSPS
getBitRateScale	TComSlice.h	/^  UInt    getBitRateScale( ) const                                                   { return m_bitRateScale;                                     }$/;"	f	class:TComHRD
getBitRateValueMinus1	TComSlice.h	/^  UInt    getBitRateValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl ) const         { return m_HRD[layer].bitRateValueMinus1[cpbcnt][nalOrVcl];  }$/;"	f	class:TComHRD
getBitsForPOC	TComSlice.h	/^  UInt                   getBitsForPOC() const                                                           { return m_uiBitsForPOC;                                               }$/;"	f	class:TComSPS
getBitsOfVectorWithPredictor	TComRdCost.h	/^  UInt getBitsOfVectorWithPredictor( const Int x, const Int y )$/;"	f	class:TComRdCost
getBitstreamRestrictionFlag	TComSlice.h	/^  Bool              getBitstreamRestrictionFlag() const                    { return m_bitstreamRestrictionFlag;             }$/;"	f	class:TComVUI
getBottomEdgePosInCtus	TComPicSym.h	/^  UInt      getBottomEdgePosInCtus () const              { return m_bottomEdgePosInCtus; }$/;"	f	class:TComTile
getBuf	TComPicYuv.h	/^  Pel*          getBuf            (const ComponentID ch)       { return  m_apiPicBuf[ch];   }$/;"	f	class:TComPicYuv
getBuf	TComPicYuv.h	/^  const Pel*    getBuf            (const ComponentID ch) const { return  m_apiPicBuf[ch];   }$/;"	f	class:TComPicYuv
getByteLocation	TComBitStream.h	/^  UInt  getByteLocation              ( )                     { return m_fifo_idx                    ; }$/;"	f	class:TComInputBitstream
getByteStream	TComBitStream.cpp	/^UChar* TComOutputBitstream::getByteStream() const$/;"	f	class:TComOutputBitstream
getByteStreamLength	TComBitStream.cpp	/^UInt TComOutputBitstream::getByteStreamLength()$/;"	f	class:TComOutputBitstream
getCBFContextOffset	TComChromaFormat.h	/^static inline UInt getCBFContextOffset (const ComponentID component)$/;"	f
getCU	TComTU.h	/^    TComDataCU *getCU()                                              { return mpcCU; }$/;"	f	class:TComTU
getCU	TComTU.h	/^    const TComDataCU *getCU()                                  const { return mpcCU; }$/;"	f	class:TComTU
getCUDepth	TComTU.h	/^    UInt getCUDepth()                                          const { return mCuDepth; }$/;"	f	class:TComTU
getCUMvField	TComDataCU.h	/^        TComCUMvField* getCUMvField           ( RefPicList e )                                             { return &m_acCUMvField[e];                  }$/;"	f	class:TComDataCU
getCUMvField	TComDataCU.h	/^  const TComCUMvField* getCUMvField           ( RefPicList e ) const                                       { return &m_acCUMvField[e];                  }$/;"	f	class:TComDataCU
getCUMvField	TComPicSym.h	/^    const TComCUMvField* getCUMvField ( RefPicList e )  const { return &m_CUMvField[e];                  }$/;"	f	struct:TComPicSym::DPBPerCtuData
getCUPelX	TComDataCU.h	/^  UInt          getCUPelX                     ( ) const                                                    { return m_uiCUPelX;                         }$/;"	f	class:TComDataCU
getCUPelY	TComDataCU.h	/^  UInt          getCUPelY                     ( ) const                                                    { return m_uiCUPelY;                         }$/;"	f	class:TComDataCU
getCUTransquantBypass	TComDataCU.h	/^  Bool          getCUTransquantBypass         ( UInt uiIdx ) const                                         { return m_CUTransquantBypass[uiIdx];        }$/;"	f	class:TComDataCU
getCUTransquantBypass	TComDataCU.h	/^  Bool*         getCUTransquantBypass         ( )                                                          { return m_CUTransquantBypass;               }$/;"	f	class:TComDataCU
getCabacBypassAlignmentEnabledFlag	TComSlice.h	/^  Bool getCabacBypassAlignmentEnabledFlag() const                                      { return m_cabacBypassAlignmentEnabledFlag;      }$/;"	f	class:TComSPSRExt
getCabacInitFlag	TComSlice.h	/^  Bool                        getCabacInitFlag()                                     { return m_cabacInitFlag;                                       } \/\/!< get CABAC initial flag$/;"	f	class:TComSlice
getCabacInitPresentFlag	TComSlice.h	/^  Bool                   getCabacInitPresentFlag() const                                  { return m_cabacInitPresentFlag;                }$/;"	f	class:TComPPS
getCbf	TComDataCU.h	/^  UChar         getCbf                        ( UInt uiIdx, ComponentID eType ) const                      { return m_puhCbf[eType][uiIdx];             }$/;"	f	class:TComDataCU
getCbf	TComDataCU.h	/^  UChar         getCbf                        ( UInt uiIdx, ComponentID eType, UInt uiTrDepth ) const      { return ( ( getCbf( uiIdx, eType ) >> uiTrDepth ) & 0x1 ); }$/;"	f	class:TComDataCU
getCbf	TComDataCU.h	/^  UChar*        getCbf                        ( ComponentID eType )                                        { return m_puhCbf[eType];                    }$/;"	f	class:TComDataCU
getCbrFlag	TComSlice.h	/^  Bool    getCbrFlag( Int layer, Int cpbcnt, Int nalOrVcl ) const                    { return m_HRD[layer].cbrFlag[cpbcnt][nalOrVcl];             }$/;"	f	class:TComHRD
getChangedFlag	TComSlice.h	/^  Bool getChangedFlag(Int psId) const$/;"	f	class:ParameterSetMap
getChannelTypeScaleX	TComChromaFormat.h	/^static inline UInt        getChannelTypeScaleX      (const ChannelType id, const ChromaFormat fmt) { return (isLuma(id) || (fmt==CHROMA_444)) ? 0 : 1;                  }$/;"	f
getChannelTypeScaleX	TComPicYuv.h	/^  UInt          getChannelTypeScaleX(const ChannelType id) const { return ::getChannelTypeScaleX(id, m_chromaFormatIDC); }$/;"	f	class:TComPicYuv
getChannelTypeScaleY	TComChromaFormat.h	/^static inline UInt        getChannelTypeScaleY      (const ChannelType id, const ChromaFormat fmt) { return (isLuma(id) || (fmt!=CHROMA_420)) ? 0 : 1;                  }$/;"	f
getChannelTypeScaleY	TComPicYuv.h	/^  UInt          getChannelTypeScaleY(const ChannelType id) const { return ::getChannelTypeScaleY(id, m_chromaFormatIDC); }$/;"	f	class:TComPicYuv
getCheckLDC	TComSlice.h	/^  Bool                        getCheckLDC() const                                    { return m_bCheckLDC;                                           }$/;"	f	class:TComSlice
getCheckLTMSBPresent	TComPic.h	/^  Bool          getCheckLTMSBPresent     () { return m_bCheckLTMSB;}$/;"	f	class:TComPic
getCheckLTMSBPresent	TComSlice.cpp	/^Bool TComReferencePictureSet::getCheckLTMSBPresent(Int bufferNum) const$/;"	f	class:TComReferencePictureSet
getChromaFormat	TComPic.h	/^  ChromaFormat  getChromaFormat() const                           { return m_apcPicYuv[PIC_YUV_REC]->getChromaFormat(); }$/;"	f	class:TComPic
getChromaFormat	TComPicYuv.h	/^  ChromaFormat  getChromaFormat   ()                     const { return m_chromaFormatIDC; }$/;"	f	class:TComPicYuv
getChromaFormat	TComPrediction.h	/^  ChromaFormat getChromaFormat() const { return m_cYuvPredTemp.getChromaFormat(); }$/;"	f	class:TComPrediction
getChromaFormat	TComYuv.h	/^  ChromaFormat getChromaFormat            ()                     const { return m_chromaFormatIDC; }$/;"	f	class:TComYuv
getChromaFormatConstraint	TComSlice.h	/^  ChromaFormat  getChromaFormatConstraint() const           { return m_chromaFormatConstraintValue; }$/;"	f	class:ProfileTierLevel
getChromaFormatIdc	TComSlice.h	/^  ChromaFormat           getChromaFormatIdc () const                                                     { return m_chromaFormatIdc;                                            }$/;"	f	class:TComSPS
getChromaLocInfoPresentFlag	TComSlice.h	/^  Bool              getChromaLocInfoPresentFlag() const                    { return m_chromaLocInfoPresentFlag;             }$/;"	f	class:TComVUI
getChromaQpAdj	TComDataCU.h	/^  UChar         getChromaQpAdj                ( Int idx ) const                                            { return m_ChromaQpAdj[idx];                 } \/\/\/< When value = 0, cu_chroma_qp_offset_flag=0; when value>0, indicates cu_chroma_qp_offset_flag=1 and cu_chroma_qp_offset_idx=value-1$/;"	f	class:TComDataCU
getChromaQpAdj	TComDataCU.h	/^  UChar*        getChromaQpAdj                ( )                                                          { return m_ChromaQpAdj;                      } \/\/\/< array of chroma QP adjustments (indexed). when value = 0, cu_chroma_qp_offset_flag=0; when value>0, indicates cu_chroma_qp_offset_flag=1 and cu_chroma_qp_offset_idx=value-1$/;"	f	class:TComDataCU
getChromaQpOffsetListEnabledFlag	TComSlice.h	/^  Bool                   getChromaQpOffsetListEnabledFlag() const                         { return getChromaQpOffsetListLen()>0;            }$/;"	f	class:TComPPSRExt
getChromaQpOffsetListEntry	TComSlice.h	/^  const ChromaQpAdj&     getChromaQpOffsetListEntry( Int cuChromaQpOffsetIdxPlus1 ) const$/;"	f	class:TComPPSRExt
getChromaQpOffsetListLen	TComSlice.h	/^  Int                    getChromaQpOffsetListLen() const                                 { return m_chromaQpOffsetListLen;                 }$/;"	f	class:TComPPSRExt
getChromaSampleLocTypeBottomField	TComSlice.h	/^  Int               getChromaSampleLocTypeBottomField() const              { return m_chromaSampleLocTypeBottomField;       }$/;"	f	class:TComVUI
getChromaSampleLocTypeTopField	TComSlice.h	/^  Int               getChromaSampleLocTypeTopField() const                 { return m_chromaSampleLocTypeTopField;          }$/;"	f	class:TComVUI
getChromaWeight	TComRdCost.h	/^  Double  getChromaWeight () { return ((m_distortionWeight[COMPONENT_Cb] + m_distortionWeight[COMPONENT_Cr]) \/ 2.0); }$/;"	f	class:TComRdCost
getChromasCorrespondingPULumaIdx	TComChromaFormat.h	/^getChromasCorrespondingPULumaIdx(const UInt lumaZOrderIdxInCtu,$/;"	f
getCodedChromaQpAdj	TComDataCU.h	/^  SChar         getCodedChromaQpAdj           ( ) const                                                    { return m_codedChromaQpAdj;                 }$/;"	f	class:TComDataCU
getCodedQP	TComDataCU.h	/^  SChar         getCodedQP                    ( ) const                                                    { return m_codedQP;                          }$/;"	f	class:TComDataCU
getCoefScanIdx	TComDataCU.cpp	/^UInt TComDataCU::getCoefScanIdx(const UInt uiAbsPartIdx, const UInt uiWidth, const UInt uiHeight, const ComponentID compID) const$/;"	f	class:TComDataCU
getCoeff	TComDataCU.h	/^  TCoeff*       getCoeff                      ( ComponentID component )                                    { return m_pcTrCoeff[component];             }$/;"	f	class:TComDataCU
getCoefficientOffset	TComTU.h	/^    UInt getCoefficientOffset(const ComponentID compID)        const { return mOffsets[compID]; }$/;"	f	class:TComTU
getColFromL0Flag	TComSlice.h	/^  Bool                        getColFromL0Flag() const                               { return m_colFromL0Flag;                                       }$/;"	f	class:TComSlice
getColRefIdx	TComSlice.h	/^  UInt                        getColRefIdx() const                                   { return m_colRefIdx;                                           }$/;"	f	class:TComSlice
getColourDescriptionPresentFlag	TComSlice.h	/^  Bool              getColourDescriptionPresentFlag() const                { return m_colourDescriptionPresentFlag;         }$/;"	f	class:TComVUI
getColourPrimaries	TComSlice.h	/^  Int               getColourPrimaries() const                             { return m_colourPrimaries;                      }$/;"	f	class:TComVUI
getComponentScaleX	TComChromaFormat.h	/^static inline UInt        getComponentScaleX        (const ComponentID id, const ChromaFormat fmt) { return getChannelTypeScaleX(toChannelType(id), fmt);               }$/;"	f
getComponentScaleX	TComPic.h	/^  Int           getComponentScaleX(const ComponentID id) const    { return m_apcPicYuv[PIC_YUV_REC]->getComponentScaleX(id); }$/;"	f	class:TComPic
getComponentScaleX	TComPicYuv.h	/^  UInt          getComponentScaleX(const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }$/;"	f	class:TComPicYuv
getComponentScaleX	TComYuv.h	/^  UInt         getComponentScaleX         (const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }$/;"	f	class:TComYuv
getComponentScaleY	TComChromaFormat.h	/^static inline UInt        getComponentScaleY        (const ComponentID id, const ChromaFormat fmt) { return getChannelTypeScaleY(toChannelType(id), fmt);               }$/;"	f
getComponentScaleY	TComPic.h	/^  Int           getComponentScaleY(const ComponentID id) const    { return m_apcPicYuv[PIC_YUV_REC]->getComponentScaleY(id); }$/;"	f	class:TComPic
getComponentScaleY	TComPicYuv.h	/^  UInt          getComponentScaleY(const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }$/;"	f	class:TComPicYuv
getComponentScaleY	TComYuv.h	/^  UInt         getComponentScaleY         (const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }$/;"	f	class:TComYuv
getConformanceWindow	TComPic.h	/^  const Window& getConformanceWindow() const { return m_picSym.getSPS().getConformanceWindow(); }$/;"	f	class:TComPic
getConformanceWindow	TComSlice.h	/^  Window&                getConformanceWindow()                                                          { return  m_conformanceWindow;                                         }$/;"	f	class:TComSPS
getConformanceWindow	TComSlice.h	/^  const Window&          getConformanceWindow() const                                                    { return  m_conformanceWindow;                                         }$/;"	f	class:TComSPS
getConstrainedIntraPred	TComSlice.h	/^  Bool                   getConstrainedIntraPred() const                                  { return  m_bConstrainedIntraPred;              }$/;"	f	class:TComPPS
getContextSetIndex	TComChromaFormat.h	/^static inline UInt getContextSetIndex (const ComponentID  component,$/;"	f
getCost	TComRdCost.h	/^  Distortion getCost( UInt b )                 { return Distortion(( m_motionLambda * b ) \/ 65536.0); }$/;"	f	class:TComRdCost
getCostOfVectorWithPredictor	TComRdCost.h	/^  Distortion getCostOfVectorWithPredictor( const Int x, const Int y )$/;"	f	class:TComRdCost
getCpbCntMinus1	TComSlice.h	/^  UInt    getCpbCntMinus1( Int layer ) const                                         { return m_HRD[layer].cpbCntMinus1;                          }$/;"	f	class:TComHRD
getCpbDpbDelaysPresentFlag	TComSlice.h	/^  Bool    getCpbDpbDelaysPresentFlag( ) const                      { return getNalHrdParametersPresentFlag() || getVclHrdParametersPresentFlag(); }$/;"	f	class:TComHRD
getCpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt    getCpbRemovalDelayLengthMinus1( ) const                                    { return m_cpbRemovalDelayLengthMinus1;                      }$/;"	f	class:TComHRD
getCpbSizeInBits	ProfileLevelTierFeatures.h	/^    UInt64 getCpbSizeInBits()            const { return (m_pLevelTier!=0 && m_pProfile!=0) ? UInt64(m_pProfile->cpbVclFactor) * m_pLevelTier->maxCpb[m_tier?1:0] : UInt64(0); }$/;"	f	class:ProfileLevelTierFeatures
getCpbSizeScale	TComSlice.h	/^  UInt    getCpbSizeScale( ) const                                                   { return m_cpbSizeScale;                                     }$/;"	f	class:TComHRD
getCpbSizeValueMinus1	TComSlice.h	/^  UInt    getCpbSizeValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl ) const         { return m_HRD[layer].cpbSizeValue[cpbcnt][nalOrVcl];        }$/;"	f	class:TComHRD
getCprmsPresentFlag	TComSlice.h	/^  Bool              getCprmsPresentFlag( UInt i ) const                  { return m_cprmsPresentFlag[ i ];                                  }$/;"	f	class:TComVPS
getCrossComponentPredictionAlpha	TComDataCU.h	/^  SChar         getCrossComponentPredictionAlpha( UInt uiIdx, ComponentID compID )                         { return m_crossComponentPredictionAlpha[compID][uiIdx]; }$/;"	f	class:TComDataCU
getCrossComponentPredictionAlpha	TComDataCU.h	/^  SChar*        getCrossComponentPredictionAlpha( ComponentID compID )                                     { return m_crossComponentPredictionAlpha[compID];        }$/;"	f	class:TComDataCU
getCrossComponentPredictionEnabledFlag	TComSlice.h	/^  Bool                   getCrossComponentPredictionEnabledFlag() const                   { return m_crossComponentPredictionEnabledFlag;   }$/;"	f	class:TComPPSRExt
getCtu	TComPic.h	/^  TComDataCU*   getCtu( UInt ctuRsAddr )           { return  m_picSym.getCtu( ctuRsAddr ); }$/;"	f	class:TComPic
getCtu	TComPic.h	/^  const TComDataCU* getCtu( UInt ctuRsAddr ) const { return  m_picSym.getCtu( ctuRsAddr ); }$/;"	f	class:TComPic
getCtu	TComPicSym.h	/^  TComDataCU*        getCtu( UInt ctuRsAddr )                              { return m_pictureCtuArray[ctuRsAddr];  }$/;"	f	class:TComPicSym
getCtu	TComPicSym.h	/^  const TComDataCU*  getCtu( UInt ctuRsAddr ) const                        { return m_pictureCtuArray[ctuRsAddr];  }$/;"	f	class:TComPicSym
getCtuAbove	TComDataCU.h	/^  TComDataCU*   getCtuAbove                   ( )                                                          { return m_pCtuAbove;                        }$/;"	f	class:TComDataCU
getCtuAboveLeft	TComDataCU.h	/^  TComDataCU*   getCtuAboveLeft               ( )                                                          { return m_pCtuAboveLeft;                    }$/;"	f	class:TComDataCU
getCtuAboveRight	TComDataCU.h	/^  TComDataCU*   getCtuAboveRight              ( )                                                          { return m_pCtuAboveRight;                   }$/;"	f	class:TComDataCU
getCtuLeft	TComDataCU.h	/^  TComDataCU*   getCtuLeft                    ( )                                                          { return m_pCtuLeft;                         }$/;"	f	class:TComDataCU
getCtuRsAddr	TComDataCU.h	/^  UInt          getCtuRsAddr                  ( ) const                                                    { return m_ctuRsAddr;                        }$/;"	f	class:TComDataCU
getCtuRsAddr	TComDataCU.h	/^  UInt&         getCtuRsAddr                  ( )                                                          { return m_ctuRsAddr;                        }$/;"	f	class:TComDataCU
getCtuRsToTsAddrMap	TComPicSym.h	/^  UInt               getCtuRsToTsAddrMap( Int ctuRsAddr ) const            { return *(m_ctuRsToTsAddrMap + (ctuRsAddr>=m_numCtusInFrame ? m_numCtusInFrame : ctuRsAddr)); }$/;"	f	class:TComPicSym
getCtuTsToRsAddrMap	TComPicSym.h	/^  UInt               getCtuTsToRsAddrMap( Int ctuTsAddr ) const            { return *(m_ctuTsToRsAddrMap + (ctuTsAddr>=m_numCtusInFrame ? m_numCtusInFrame : ctuTsAddr)); }$/;"	f	class:TComPicSym
getCtxInterDir	TComDataCU.cpp	/^UInt TComDataCU::getCtxInterDir( UInt uiAbsPartIdx ) const$/;"	f	class:TComDataCU
getCtxQtCbf	TComDataCU.cpp	/^UInt TComDataCU::getCtxQtCbf( TComTU &rTu, const ChannelType chType ) const$/;"	f	class:TComDataCU
getCtxSkipFlag	TComDataCU.cpp	/^UInt TComDataCU::getCtxSkipFlag( UInt uiAbsPartIdx ) const$/;"	f	class:TComDataCU
getCtxSplitFlag	TComDataCU.cpp	/^UInt TComDataCU::getCtxSplitFlag( UInt uiAbsPartIdx, UInt uiDepth ) const$/;"	f	class:TComDataCU
getCurrSliceIdx	TComPic.h	/^  UInt          getCurrSliceIdx() const           { return m_uiCurrSliceIdx;                }$/;"	f	class:TComPic
getDPBPerCtuData	TComPicSym.h	/^  DPBPerCtuData&       getDPBPerCtuData(UInt ctuRsAddr)                    { return m_dpbPerCtuData[ctuRsAddr]; }$/;"	f	class:TComPicSym
getDPBPerCtuData	TComPicSym.h	/^  const DPBPerCtuData& getDPBPerCtuData(UInt ctuRsAddr) const              { return m_dpbPerCtuData[ctuRsAddr]; }$/;"	f	class:TComPicSym
getDeblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Int                         getDeblockingFilterBetaOffsetDiv2()const               { return m_deblockingFilterBetaOffsetDiv2;                      }$/;"	f	class:TComSlice
getDeblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Int                    getDeblockingFilterBetaOffsetDiv2() const                        { return m_deblockingFilterBetaOffsetDiv2;      } \/\/!< get beta offset for deblocking filter$/;"	f	class:TComPPS
getDeblockingFilterControlPresentFlag	TComSlice.h	/^  Bool                   getDeblockingFilterControlPresentFlag() const                    { return m_deblockingFilterControlPresentFlag;  }$/;"	f	class:TComPPS
getDeblockingFilterDisable	TComSlice.h	/^  Bool                        getDeblockingFilterDisable() const                     { return m_deblockingFilterDisable;                             }$/;"	f	class:TComSlice
getDeblockingFilterOverrideEnabledFlag	TComSlice.h	/^  Bool                   getDeblockingFilterOverrideEnabledFlag() const                   { return m_deblockingFilterOverrideEnabledFlag; }$/;"	f	class:TComPPS
getDeblockingFilterOverrideFlag	TComSlice.h	/^  Bool                        getDeblockingFilterOverrideFlag() const                { return m_deblockingFilterOverrideFlag;                        }$/;"	f	class:TComSlice
getDeblockingFilterTcOffsetDiv2	TComSlice.h	/^  Int                         getDeblockingFilterTcOffsetDiv2() const                { return m_deblockingFilterTcOffsetDiv2;                        }$/;"	f	class:TComSlice
getDeblockingFilterTcOffsetDiv2	TComSlice.h	/^  Int                    getDeblockingFilterTcOffsetDiv2() const                          { return m_deblockingFilterTcOffsetDiv2;        } \/\/!< get tc offset for deblocking filter$/;"	f	class:TComPPS
getDecimalWidth	Debug.cpp	/^UInt getDecimalWidth(const Double value)$/;"	f
getDefDisplayWindow	TComPic.h	/^  Window        getDefDisplayWindow() const  { return m_picSym.getSPS().getVuiParametersPresentFlag() ? m_picSym.getSPS().getVuiParameters()->getDefaultDisplayWindow() : Window(); }$/;"	f	class:TComPic
getDefaultDisplayWindow	TComSlice.h	/^  Window&           getDefaultDisplayWindow()                              { return m_defaultDisplayWindow;                 }$/;"	f	class:TComVUI
getDefaultDisplayWindow	TComSlice.h	/^  const Window&     getDefaultDisplayWindow() const                        { return m_defaultDisplayWindow;                 }$/;"	f	class:TComVUI
getDeltaPOC	TComSlice.cpp	/^Int TComReferencePictureSet::getDeltaPOC(Int bufferNum) const$/;"	f	class:TComReferencePictureSet
getDeltaPocMSBCycleLT	TComSlice.h	/^  Int     getDeltaPocMSBCycleLT(Int i) const           { return m_deltaPOCMSBCycleLT[i];     }$/;"	f	class:TComReferencePictureSet
getDeltaPocMSBPresentFlag	TComSlice.h	/^  Bool    getDeltaPocMSBPresentFlag(Int i) const       { return m_deltaPocMSBPresentFlag[i]; }$/;"	f	class:TComReferencePictureSet
getDeltaRIdxMinus1	TComSlice.h	/^  Int     getDeltaRIdxMinus1() const                   { return m_deltaRIdxMinus1;            }$/;"	f	class:TComReferencePictureSet
getDeltaRPS	TComSlice.h	/^  Int     getDeltaRPS() const                          { return m_deltaRPS;                   }$/;"	f	class:TComReferencePictureSet
getDependentSliceSegmentFlag	TComSlice.h	/^  Bool                        getDependentSliceSegmentFlag() const                   { return m_dependentSliceSegmentFlag;                           }$/;"	f	class:TComSlice
getDependentSliceSegmentsEnabledFlag	TComSlice.h	/^  Bool                   getDependentSliceSegmentsEnabledFlag() const                     { return m_dependentSliceSegmentsEnabledFlag;   }$/;"	f	class:TComPPS
getDepth	TComDataCU.h	/^  UChar         getDepth                      ( UInt uiIdx ) const                                         { return m_puhDepth[uiIdx];                  }$/;"	f	class:TComDataCU
getDepth	TComDataCU.h	/^  UChar*        getDepth                      ( )                                                          { return m_puhDepth;                         }$/;"	f	class:TComDataCU
getDepth	TComSlice.h	/^  Int                         getDepth() const                                       { return m_iDepth;                                              }$/;"	f	class:TComSlice
getDequantCoeff	TComTrQuant.h	/^  Int* getDequantCoeff                  ( UInt list, Int qp, UInt size ) { return m_dequantCoef          [size][list][qp]; };  \/\/!< get DeQuant Coefficent$/;"	f	class:TComTrQuant
getDiffCuChromaQpOffsetDepth	TComSlice.h	/^  UInt                   getDiffCuChromaQpOffsetDepth () const                            { return m_diffCuChromaQpOffsetDepth;             }$/;"	f	class:TComPPSRExt
getDifferentialLumaChromaBitDepth	TComSlice.h	/^  Int                    getDifferentialLumaChromaBitDepth() const                                       { return Int(m_bitDepths.recon[CHANNEL_TYPE_LUMA]) - Int(m_bitDepths.recon[CHANNEL_TYPE_CHROMA]); }$/;"	f	class:TComSPS
getDistPart	TComRdCost.cpp	/^Distortion TComRdCost::getDistPart( Int bitDepth, const Pel* piCur, Int iCurStride,  const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc )$/;"	f	class:TComRdCost
getDouble	Debug.h	/^  Double              getDouble()   const       { return m_dVal;    }$/;"	f	class:EnvVar
getDpbOutputDelayDuLengthMinus1	TComSlice.h	/^  UInt    getDpbOutputDelayDuLengthMinus1( ) const                                   { return m_dpbOutputDelayDuLengthMinus1;                     }$/;"	f	class:TComHRD
getDpbOutputDelayLengthMinus1	TComSlice.h	/^  UInt    getDpbOutputDelayLengthMinus1( ) const                                     { return m_dpbOutputDelayLengthMinus1;                       }$/;"	f	class:TComHRD
getDuBitRateValueMinus1	TComSlice.h	/^  UInt    getDuBitRateValueMinus1(Int layer, Int cpbcnt, Int nalOrVcl ) const        { return m_HRD[layer].duBitRateValue[cpbcnt][nalOrVcl];      }$/;"	f	class:TComHRD
getDuCpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt    getDuCpbRemovalDelayLengthMinus1( ) const                                  { return m_duCpbRemovalDelayLengthMinus1;                    }$/;"	f	class:TComHRD
getDuCpbSizeScale	TComSlice.h	/^  UInt    getDuCpbSizeScale( ) const                                                 { return m_ducpbSizeScale;                                   }$/;"	f	class:TComHRD
getDuCpbSizeValueMinus1	TComSlice.h	/^  UInt    getDuCpbSizeValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl ) const       { return m_HRD[layer].ducpbSizeValue[cpbcnt][nalOrVcl];      }$/;"	f	class:TComHRD
getEmulationPreventionByteLocation	TComBitStream.h	/^  UInt      getEmulationPreventionByteLocation  ( UInt idx )                         { return m_emulationPreventionByteLocation[ idx ];    }$/;"	f	class:TComInputBitstream
getEmulationPreventionByteLocation	TComBitStream.h	/^  const std::vector<UInt> &getEmulationPreventionByteLocation  () const              { return m_emulationPreventionByteLocation;           }$/;"	f	class:TComInputBitstream
getEnableTMVPFlag	TComSlice.h	/^  Bool                        getEnableTMVPFlag() const                              { return m_enableTMVPFlag;                                      }$/;"	f	class:TComSlice
getEncCABACTableIdx	TComSlice.h	/^  SliceType                   getEncCABACTableIdx() const                            { return m_encCABACTableIdx;                                    }$/;"	f	class:TComSlice
getEntropyBits	ContextModel.h	/^  Int getEntropyBits(Short val) { return m_entropyBits[m_ucState ^ val]; }$/;"	f	class:ContextModel
getEntropyBitsTrm	ContextModel.h	/^  static Int getEntropyBitsTrm( Int val ) { return m_entropyBits[126 ^ val]; }$/;"	f	class:ContextModel
getEntropyCodingSyncEnabledFlag	TComSlice.h	/^  Bool                   getEntropyCodingSyncEnabledFlag() const                          { return m_entropyCodingSyncEnabledFlag;        }$/;"	f	class:TComPPS
getEnvVarInUse	Debug.cpp	/^std::list<EnvVar*> &EnvVar::getEnvVarInUse()$/;"	f	class:EnvVar
getEnvVarList	Debug.cpp	/^std::list<std::pair<std::string, std::string> > &EnvVar::getEnvVarList()$/;"	f	class:EnvVar
getErrScaleCoeff	TComTrQuant.h	/^  Double* getErrScaleCoeff              ( UInt list, UInt size, Int qp ) { return m_errScale             [size][list][qp]; };  \/\/!< get Error Scale Coefficent$/;"	f	class:TComTrQuant
getErrScaleCoeffNoScalingList	TComTrQuant.h	/^  Double& getErrScaleCoeffNoScalingList ( UInt list, UInt size, Int qp ) { return m_errScaleNoScalingList[size][list][qp]; };  \/\/!< get Error Scale Coefficent$/;"	f	class:TComTrQuant
getExplicitRdpcmMode	TComDataCU.h	/^  UChar         getExplicitRdpcmMode          ( ComponentID component, UInt partIdx ) const                { return m_explicitRdpcmMode[component][partIdx]; }$/;"	f	class:TComDataCU
getExplicitRdpcmMode	TComDataCU.h	/^  UChar*        getExplicitRdpcmMode          ( ComponentID component )                                    { return m_explicitRdpcmMode[component];     }$/;"	f	class:TComDataCU
getExtendedPrecisionProcessingFlag	TComSlice.h	/^  Bool getExtendedPrecisionProcessingFlag() const                                      { return m_extendedPrecisionProcessingFlag;      }$/;"	f	class:TComSPSRExt
getFIFO	TComBitStream.h	/^  const std::vector<uint8_t>& getFIFO() const { return m_fifo; }$/;"	f	class:TComOutputBitstream
getFIFO	TComBitStream.h	/^  std::vector<uint8_t>& getFIFO() { return m_fifo; }$/;"	f	class:TComOutputBitstream
getFieldSeqFlag	TComSlice.h	/^  Bool              getFieldSeqFlag() const                                { return m_fieldSeqFlag;                         }$/;"	f	class:TComVUI
getFifo	TComBitStream.h	/^        std::vector<uint8_t> &getFifo()       { return m_fifo; }$/;"	f	class:TComInputBitstream
getFifo	TComBitStream.h	/^  const std::vector<uint8_t> &getFifo() const { return m_fifo; }$/;"	f	class:TComInputBitstream
getFinalized	TComSlice.h	/^  Bool                        getFinalized() const                                   { return m_bFinalized;                                          }$/;"	f	class:TComSlice
getFirstComponentOfChannel	TComChromaFormat.h	/^static inline ComponentID getFirstComponentOfChannel(const ChannelType id)                         { return (isLuma(id) ? COMPONENT_Y : COMPONENT_Cb);                  }$/;"	f
getFirstCtuRsAddr	TComPicSym.h	/^  UInt      getFirstCtuRsAddr      () const              { return m_firstCtuRsAddr; }$/;"	f	class:TComTile
getFirstPPS	TComSlice.h	/^  TComPPS*       getFirstPPS()                                               { return m_ppsMap.getFirstPS(); };$/;"	f	class:ParameterSetManager
getFirstPS	TComSlice.h	/^  T* getFirstPS()$/;"	f	class:ParameterSetMap
getFirstSPS	TComSlice.h	/^  TComSPS*       getFirstSPS()                                               { return m_spsMap.getFirstPS(); };$/;"	f	class:ParameterSetManager
getFirstVPS	TComSlice.h	/^  TComVPS*       getFirstVPS()                                               { return m_vpsMap.getFirstPS(); };$/;"	f	class:ParameterSetManager
getFixedPicRateFlag	TComSlice.h	/^  Bool    getFixedPicRateFlag( Int layer ) const                                     { return m_HRD[layer].fixedPicRateFlag;                      }$/;"	f	class:TComHRD
getFixedPicRateWithinCvsFlag	TComSlice.h	/^  Bool    getFixedPicRateWithinCvsFlag( Int layer ) const                            { return m_HRD[layer].fixedPicRateWithinCvsFlag;             }$/;"	f	class:TComHRD
getForceDecodeBitDepth	TComSlice.h	/^  UInt                   getForceDecodeBitDepth()        const                                           { return m_forceDecodeBitDepth;                                        }$/;"	f	class:TComSPS
getFrameFieldInfoPresentFlag	TComSlice.h	/^  Bool              getFrameFieldInfoPresentFlag() const                   { return m_frameFieldInfoPresentFlag;            }$/;"	f	class:TComVUI
getFrameHeightInCtus	TComPic.h	/^  UInt          getFrameHeightInCtus() const       { return m_picSym.getFrameHeightInCtus();   }$/;"	f	class:TComPic
getFrameHeightInCtus	TComPicSym.h	/^  UInt               getFrameHeightInCtus() const                          { return m_frameHeightInCtus;           }$/;"	f	class:TComPicSym
getFrameOnlyConstraintFlag	TComSlice.h	/^  Bool          getFrameOnlyConstraintFlag() const          { return m_frameOnlyConstraintFlag;     }$/;"	f	class:ProfileTierLevel
getFrameWidthInCtus	TComPic.h	/^  UInt          getFrameWidthInCtus() const        { return m_picSym.getFrameWidthInCtus();    }$/;"	f	class:TComPic
getFrameWidthInCtus	TComPicSym.h	/^  UInt               getFrameWidthInCtus() const                           { return m_frameWidthInCtus;            }$/;"	f	class:TComPicSym
getGeneralPTL	TComSlice.h	/^  ProfileTierLevel*       getGeneralPTL()                              { return &m_generalPTL;                   }$/;"	f	class:TComPTL
getGeneralPTL	TComSlice.h	/^  const ProfileTierLevel* getGeneralPTL() const                        { return &m_generalPTL;                   }$/;"	f	class:TComPTL
getGolombRiceStatisticsIndex	TComTU.cpp	/^UInt TComTU::getGolombRiceStatisticsIndex(const ComponentID compID)$/;"	f	class:TComTU
getHandleCraAsBlaFlag	TComSlice.h	/^  Bool                        getHandleCraAsBlaFlag() const                          { return m_handleCraAsBlaFlag;                                  }$/;"	f	class:TComSlice
getHbrFactor	ProfileLevelTierFeatures.h	/^  UInt getHbrFactor(Bool bLowerBitRateConstraintFlag) const    \/\/ currently not used for checking$/;"	f	struct:ProfileFeatures
getHeight	TComDataCU.h	/^  UChar         getHeight                     ( UInt uiIdx ) const                                         { return m_puhHeight[uiIdx];                 }$/;"	f	class:TComDataCU
getHeight	TComDataCU.h	/^  UChar*        getHeight                     ( )                                                          { return m_puhHeight;                        }$/;"	f	class:TComDataCU
getHeight	TComPicYuv.h	/^  Int           getHeight         (const ComponentID id) const { return  m_picHeight >> getComponentScaleY(id);  }$/;"	f	class:TComPicYuv
getHeight	TComYuv.h	/^  UInt         getHeight                  (const ComponentID id) const { return m_iHeight >> getComponentScaleY(id);  }$/;"	f	class:TComYuv
getHeldBits	TComBitStream.h	/^  UChar getHeldBits  ()          { return m_held_bits;          }$/;"	f	class:TComInputBitstream
getHeldBits	TComBitStream.h	/^  UChar getHeldBits  ()          { return m_held_bits;          }$/;"	f	class:TComOutputBitstream
getHighPrecisionOffsetsEnabledFlag	TComSlice.h	/^  Bool getHighPrecisionOffsetsEnabledFlag() const                                      { return m_highPrecisionOffsetsEnabledFlag;      }$/;"	f	class:TComSPSRExt
getHor	TComMotionInfo.h	/^  Int getHor   () const { return  m_acMv.getHor(); }$/;"	f	class:TComMvField
getHor	TComMv.h	/^  Int   getHor    () const { return m_iHor;          }$/;"	f	class:TComMv
getHrdOpSetIdx	TComSlice.h	/^  UInt              getHrdOpSetIdx( UInt i ) const                       { return m_hrdOpSetIdx[ i ];                                       }$/;"	f	class:TComVPS
getHrdParameters	TComSlice.h	/^  TComHRD*          getHrdParameters( UInt i )                           { return &m_hrdParameters[ i ];                                    }$/;"	f	class:TComVPS
getHrdParameters	TComSlice.h	/^  TComHRD*          getHrdParameters()                                     { return &m_hrdParameters;                       }$/;"	f	class:TComVUI
getHrdParameters	TComSlice.h	/^  const TComHRD*    getHrdParameters( UInt i ) const                     { return &m_hrdParameters[ i ];                                    }$/;"	f	class:TComVPS
getHrdParameters	TComSlice.h	/^  const TComHRD*    getHrdParameters()  const                              { return &m_hrdParameters;                       }$/;"	f	class:TComVUI
getHrdParametersPresentFlag	TComSlice.h	/^  Bool              getHrdParametersPresentFlag() const                    { return m_hrdParametersPresentFlag;             }$/;"	f	class:TComVUI
getIPCMFlag	TComDataCU.h	/^  Bool          getIPCMFlag                   ( UInt uiIdx ) const                                         { return m_pbIPCMFlag[uiIdx];                }$/;"	f	class:TComDataCU
getIPCMFlag	TComDataCU.h	/^  Bool*         getIPCMFlag                   ( )                                                          { return m_pbIPCMFlag;                       }$/;"	f	class:TComDataCU
getIdrPicFlag	TComSlice.h	/^  Bool                        getIdrPicFlag() const                                  { return getNalUnitType() == NAL_UNIT_CODED_SLICE_IDR_W_RADL || getNalUnitType() == NAL_UNIT_CODED_SLICE_IDR_N_LP; }$/;"	f	class:TComSlice
getInitialCpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt    getInitialCpbRemovalDelayLengthMinus1( ) const                             { return m_initialCpbRemovalDelayLengthMinus1;               }$/;"	f	class:TComHRD
getInt	Debug.h	/^  Int                 getInt()      const       { return m_iVal;    }$/;"	f	class:EnvVar
getInterDir	TComDataCU.h	/^  UChar         getInterDir                   ( UInt uiIdx ) const                                         { return m_puhInterDir[uiIdx];               }$/;"	f	class:TComDataCU
getInterDir	TComDataCU.h	/^  UChar*        getInterDir                   ( )                                                          { return m_puhInterDir;                      }$/;"	f	class:TComDataCU
getInterMergeCandidates	TComDataCU.cpp	/^Void TComDataCU::getInterMergeCandidates( UInt uiAbsPartIdx, UInt uiPUIdx, TComMvField* pcMvFieldNeighbours, UChar* puhInterDirNeighbours, Int& numValidMergeCand, UInt &numSpatialMergeCandidates, Int mrgCandIdx ) const$/;"	f	class:TComDataCU
getInterRPSPrediction	TComSlice.h	/^  Bool    getInterRPSPrediction() const                { return m_interRPSPrediction;         }$/;"	f	class:TComReferencePictureSet
getInterlacedSourceFlag	TComSlice.h	/^  Bool          getInterlacedSourceFlag() const             { return m_interlacedSourceFlag;        }$/;"	f	class:ProfileTierLevel
getIntraConstraintFlag	TComSlice.h	/^  Bool          getIntraConstraintFlag() const              { return m_intraConstraintFlag;         }$/;"	f	class:ProfileTierLevel
getIntraDir	TComDataCU.h	/^  UChar         getIntraDir                   ( const ChannelType channelType, const UInt uiIdx ) const    { return m_puhIntraDir[channelType][uiIdx];  }$/;"	f	class:TComDataCU
getIntraDir	TComDataCU.h	/^  UChar*        getIntraDir                   ( const ChannelType channelType )                   const    { return m_puhIntraDir[channelType];         }$/;"	f	class:TComDataCU
getIntraDirPredictor	TComDataCU.cpp	/^Void TComDataCU::getIntraDirPredictor( UInt uiAbsPartIdx, Int uiIntraDirPred[NUM_MOST_PROBABLE_MODES], const ComponentID compID, Int* piMode ) const$/;"	f	class:TComDataCU
getIntraSizeIdx	TComDataCU.cpp	/^UInt TComDataCU::getIntraSizeIdx(UInt uiAbsPartIdx) const$/;"	f	class:TComDataCU
getIntraSmoothingDisabledFlag	TComSlice.h	/^  Bool getIntraSmoothingDisabledFlag() const                                           { return m_intraSmoothingDisabledFlag;           }$/;"	f	class:TComSPSRExt
getIsLongTerm	TComPic.h	/^  Bool          getIsLongTerm() const            { return m_bIsLongTerm; }$/;"	f	class:TComPic
getIsUsedAsLongTerm	TComSlice.h	/^  Bool                        getIsUsedAsLongTerm(Int i, Int j) const                { return m_bIsUsedAsLongTerm[i][j];                             }$/;"	f	class:TComSlice
getLFCrossSliceBoundaryFlag	TComSlice.h	/^  Bool                        getLFCrossSliceBoundaryFlag()                          { return m_LFCrossSliceBoundaryFlag;                            }$/;"	f	class:TComSlice
getLambda	TComRdCost.h	/^  Double  getLambda() { return m_dLambda; }$/;"	f	class:TComRdCost
getLambdas	TComSlice.h	/^  const Double*               getLambdas() const                                     { return m_lambdas;                                             }$/;"	f	class:TComSlice
getLastCodedQP	TComDataCU.cpp	/^SChar TComDataCU::getLastCodedQP( UInt uiAbsPartIdx ) const$/;"	f	class:TComDataCU
getLastIDR	TComSlice.h	/^  Int                         getLastIDR() const                                     { return m_iLastIDR;                                            }$/;"	f	class:TComSlice
getLastSignificantContextParameters	TComChromaFormat.h	/^static inline Void getLastSignificantContextParameters (const ComponentID  component,$/;"	f
getLastValidPartIdx	TComDataCU.cpp	/^Int TComDataCU::getLastValidPartIdx( Int iAbsPartIdx ) const$/;"	f	class:TComDataCU
getLayerIdIncludedFlag	TComSlice.h	/^  Bool              getLayerIdIncludedFlag(UInt opsIdx, UInt id) const   { return m_layerIdIncludedFlag[opsIdx][id];                        }$/;"	f	class:TComVPS
getLevelIdc	TComSlice.h	/^  Level::Name   getLevelIdc() const                         { return m_levelIdc;                    }$/;"	f	class:ProfileTierLevel
getLevelTierFeatures	ProfileLevelTierFeatures.h	/^    const LevelTierFeatures   *getLevelTierFeatures() const { return m_pLevelTier; }$/;"	f	class:ProfileLevelTierFeatures
getList1IdxToList0Idx	TComSlice.h	/^  Int                         getList1IdxToList0Idx( Int list1Idx ) const            { return m_list1IdxToList0Idx[list1Idx];                        }$/;"	f	class:TComSlice
getListOfColourSpaceConverts	TComChromaFormat.cpp	/^std::string getListOfColourSpaceConverts(const Bool bIsForward)$/;"	f
getListsModificationPresentFlag	TComSlice.h	/^  Bool                   getListsModificationPresentFlag() const                          { return m_listsModificationPresentFlag;        }$/;"	f	class:TComPPS
getLocalRPS	TComSlice.h	/^  TComReferencePictureSet*    getLocalRPS()                                          { return &m_localRPS;                                           }$/;"	f	class:TComSlice
getLog2DiffMaxMinCodingBlockSize	TComSlice.h	/^  Int                    getLog2DiffMaxMinCodingBlockSize() const                                        { return m_log2DiffMaxMinCodingBlockSize;                              }$/;"	f	class:TComSPS
getLog2MaxMvLengthHorizontal	TComSlice.h	/^  Int               getLog2MaxMvLengthHorizontal() const                   { return m_log2MaxMvLengthHorizontal;            }$/;"	f	class:TComVUI
getLog2MaxMvLengthVertical	TComSlice.h	/^  Int               getLog2MaxMvLengthVertical() const                     { return m_log2MaxMvLengthVertical;              }$/;"	f	class:TComVUI
getLog2MaxTransformSkipBlockSize	TComSlice.h	/^  UInt                   getLog2MaxTransformSkipBlockSize() const                         { return m_log2MaxTransformSkipBlockSize;         }$/;"	f	class:TComPPSRExt
getLog2MinCodingBlockSize	TComSlice.h	/^  Int                    getLog2MinCodingBlockSize() const                                               { return m_log2MinCodingBlockSize;                                     }$/;"	f	class:TComSPS
getLog2ParallelMergeLevelMinus2	TComSlice.h	/^  UInt                   getLog2ParallelMergeLevelMinus2() const                          { return m_log2ParallelMergeLevelMinus2;        }$/;"	f	class:TComPPS
getLog2SaoOffsetScale	TComSlice.h	/^  UInt                   getLog2SaoOffsetScale(ChannelType type) const                    { return m_log2SaoOffsetScale[type];             }$/;"	f	class:TComPPSRExt
getLongTermRefsPresent	TComSlice.h	/^  Bool                   getLongTermRefsPresent() const                                                  { return m_bLongTermRefsPresent;                                       }$/;"	f	class:TComSPS
getLoopFilterAcrossSlicesEnabledFlag	TComSlice.h	/^  Bool                   getLoopFilterAcrossSlicesEnabledFlag() const                     { return m_loopFilterAcrossSlicesEnabledFlag;   }$/;"	f	class:TComPPS
getLoopFilterAcrossTilesEnabledFlag	TComSlice.h	/^  Bool                   getLoopFilterAcrossTilesEnabledFlag() const                      { return m_loopFilterAcrossTilesEnabledFlag;    }$/;"	f	class:TComPPS
getLowDelayHrdFlag	TComSlice.h	/^  Bool    getLowDelayHrdFlag( Int layer ) const                                      { return m_HRD[layer].lowDelayHrdFlag;                       }$/;"	f	class:TComHRD
getLowerBitRateConstraintFlag	TComSlice.h	/^  Bool          getLowerBitRateConstraintFlag() const       { return m_lowerBitRateConstraintFlag;  }$/;"	f	class:ProfileTierLevel
getLtRefPicPocLsbSps	TComSlice.h	/^  UInt                   getLtRefPicPocLsbSps(UInt index) const                                          { assert( index < MAX_NUM_LONG_TERM_REF_PICS ); return m_ltRefPicPocLsbSps[index]; }$/;"	f	class:TComSPS
getMVPIdx	TComDataCU.h	/^  Int           getMVPIdx                     ( RefPicList eRefPicList, UInt uiIdx) const                  { return m_apiMVPIdx[eRefPicList][uiIdx];    }$/;"	f	class:TComDataCU
getMVPIdx	TComDataCU.h	/^  SChar*        getMVPIdx                     ( RefPicList eRefPicList )                                   { return m_apiMVPIdx[eRefPicList];           }$/;"	f	class:TComDataCU
getMVPNum	TComDataCU.h	/^  Int           getMVPNum                     ( RefPicList eRefPicList, UInt uiIdx ) const                 { return m_apiMVPNum[eRefPicList][uiIdx];    }$/;"	f	class:TComDataCU
getMVPNum	TComDataCU.h	/^  SChar*        getMVPNum                     ( RefPicList eRefPicList )                                   { return m_apiMVPNum[eRefPicList];           }$/;"	f	class:TComDataCU
getMarginX	TComPicYuv.h	/^  Int           getMarginX        (const ComponentID id) const { return m_marginX >> getComponentScaleX(id);  }$/;"	f	class:TComPicYuv
getMarginY	TComPicYuv.h	/^  Int           getMarginY        (const ComponentID id) const { return m_marginY >> getComponentScaleY(id);  }$/;"	f	class:TComPicYuv
getMatrixCoefficients	TComSlice.h	/^  Int               getMatrixCoefficients() const                          { return m_matrixCoefficients;                   }$/;"	f	class:TComVUI
getMaxBitsPerMinCuDenom	TComSlice.h	/^  Int               getMaxBitsPerMinCuDenom() const                        { return m_maxBitsPerMinCuDenom;                 }$/;"	f	class:TComVUI
getMaxBytesPerPicDenom	TComSlice.h	/^  Int               getMaxBytesPerPicDenom() const                         { return m_maxBytesPerPicDenom;                  }$/;"	f	class:TComVUI
getMaxCUDepthOffset	TComChromaFormat.h	/^static inline UInt getMaxCUDepthOffset(const ChromaFormat chFmt, const UInt quadtreeTULog2MinSize)$/;"	f
getMaxCUHeight	TComSlice.h	/^  UInt                   getMaxCUHeight() const                                                          { return  m_uiMaxCUHeight;                                             }$/;"	f	class:TComSPS
getMaxCUWidth	TComSlice.h	/^  UInt                   getMaxCUWidth() const                                                           { return  m_uiMaxCUWidth;                                              }$/;"	f	class:TComSPS
getMaxCuDQPDepth	TComSlice.h	/^  UInt                   getMaxCuDQPDepth() const                                         { return m_uiMaxCuDQPDepth;                     }$/;"	f	class:TComPPS
getMaxDPBNumFrames	ProfileLevelTierFeatures.cpp	/^Int ProfileLevelTierFeatures::getMaxDPBNumFrames(const UInt PicSizeInSamplesY) \/\/ returns -1 if no limit, otherwise a limit of DPB pictures is indicated.$/;"	f	class:ProfileLevelTierFeatures
getMaxDecPicBuffering	TComSlice.h	/^  UInt                   getMaxDecPicBuffering(UInt tlayer) const                                        { return m_uiMaxDecPicBuffering[tlayer];                               }$/;"	f	class:TComSPS
getMaxDecPicBuffering	TComSlice.h	/^  UInt              getMaxDecPicBuffering(UInt tLayer) const             { return m_uiMaxDecPicBuffering[tLayer];                           }$/;"	f	class:TComVPS
getMaxLatencyIncrease	TComSlice.h	/^  UInt              getMaxLatencyIncrease(UInt tLayer) const             { return m_uiMaxLatencyIncrease[tLayer];                           }$/;"	f	class:TComVPS
getMaxLatencyIncreasePlus1	TComSlice.h	/^  UInt                   getMaxLatencyIncreasePlus1(UInt tlayer) const                                   { return m_uiMaxLatencyIncreasePlus1[tlayer];                          }$/;"	f	class:TComSPS
getMaxLayers	TComSlice.h	/^  UInt              getMaxLayers() const                                 { return m_uiMaxLayers;                                            }$/;"	f	class:TComVPS
getMaxLog2TrDynamicRange	TComSlice.h	/^  Int                    getMaxLog2TrDynamicRange(ChannelType channelType) const                         { return getSpsRangeExtension().getExtendedPrecisionProcessingFlag() ? std::max<Int>(15, Int(m_bitDepths.recon[channelType] + 6)) : 15; }$/;"	f	class:TComSPS
getMaxNuhReservedZeroLayerId	TComSlice.h	/^  UInt              getMaxNuhReservedZeroLayerId() const                 { return m_maxNuhReservedZeroLayerId;                              }$/;"	f	class:TComVPS
getMaxNumMergeCand	TComSlice.h	/^  UInt                        getMaxNumMergeCand() const                             { return m_maxNumMergeCand;                                     }$/;"	f	class:TComSlice
getMaxOffsetQVal	TComSampleAdaptiveOffset.h	/^  static Int getMaxOffsetQVal(const Int channelBitDepth) { return (1<<(std::min<Int>(channelBitDepth,MAX_SAO_TRUNCATED_BITDEPTH)-5))-1; } \/\/Table 9-32, inclusive$/;"	f	class:TComSampleAdaptiveOffset
getMaxOpSets	TComSlice.h	/^  UInt              getMaxOpSets() const                                 { return m_numOpSets;                                              }$/;"	f	class:TComVPS
getMaxPicHeightInLumaSamples	ProfileLevelTierFeatures.cpp	/^LevelTierFeatures::getMaxPicHeightInLumaSamples() const$/;"	f	class:LevelTierFeatures
getMaxPicWidthInLumaSamples	ProfileLevelTierFeatures.cpp	/^LevelTierFeatures::getMaxPicWidthInLumaSamples()  const$/;"	f	class:LevelTierFeatures
getMaxRawCtuBits	ProfileLevelTierFeatures.h	/^    UInt   getMaxRawCtuBits()            const { return m_maxRawCtuBits; }$/;"	f	class:ProfileLevelTierFeatures
getMaxTLayers	TComSlice.h	/^  UInt                   getMaxTLayers() const                                                           { return m_uiMaxTLayers; }$/;"	f	class:TComSPS
getMaxTLayers	TComSlice.h	/^  UInt              getMaxTLayers() const                                { return m_uiMaxTLayers;                                           }$/;"	f	class:TComVPS
getMaxTotalCUDepth	TComSlice.h	/^  UInt                   getMaxTotalCUDepth() const                                                      { return  m_uiMaxTotalCUDepth;                                         }$/;"	f	class:TComSPS
getMaxTrSize	TComSlice.h	/^  UInt                   getMaxTrSize() const                                                            { return  m_uiMaxTrSize;                                               }$/;"	f	class:TComSPS
getMergeAMP	TComDataCU.h	/^  Bool          getMergeAMP                   ( ) const                                                    { return m_bIsMergeAMP;                      }$/;"	f	class:TComDataCU
getMergeFlag	TComDataCU.h	/^  Bool          getMergeFlag                  ( UInt uiIdx ) const                                         { return m_pbMergeFlag[uiIdx];               }$/;"	f	class:TComDataCU
getMergeFlag	TComDataCU.h	/^  Bool*         getMergeFlag                  ( )                                                          { return m_pbMergeFlag;                      }$/;"	f	class:TComDataCU
getMergeIndex	TComDataCU.h	/^  UChar         getMergeIndex                 ( UInt uiIdx ) const                                         { return m_puhMergeIndex[uiIdx];             }$/;"	f	class:TComDataCU
getMergeIndex	TComDataCU.h	/^  UChar*        getMergeIndex                 ( )                                                          { return m_puhMergeIndex;                    }$/;"	f	class:TComDataCU
getMergeList	TComSampleAdaptiveOffset.cpp	/^Int TComSampleAdaptiveOffset::getMergeList(TComPic* pic, Int ctuRsAddr, SAOBlkParam* blkParams, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES])$/;"	f	class:TComSampleAdaptiveOffset
getMinCUHeight	TComPic.h	/^  UInt          getMinCUHeight() const             { return m_picSym.getMinCUHeight();         }$/;"	f	class:TComPic
getMinCUHeight	TComPicSym.h	/^  UInt               getMinCUHeight() const                                { return m_uiMinCUHeight;               }$/;"	f	class:TComPicSym
getMinCUWidth	TComPic.h	/^  UInt          getMinCUWidth() const              { return m_picSym.getMinCUWidth();          }$/;"	f	class:TComPic
getMinCUWidth	TComPicSym.h	/^  UInt               getMinCUWidth() const                                 { return m_uiMinCUWidth;                }$/;"	f	class:TComPicSym
getMinCr	ProfileLevelTierFeatures.h	/^    Double getMinCr()                    const { return (m_pLevelTier!=0 && m_pProfile!=0) ? (m_pProfile->minCrScaleFactorx10 * m_pLevelTier->minCrBase[m_tier?1:0])\/10.0 : 0.0 ; }   \/\/ currently not used for checking$/;"	f	class:ProfileLevelTierFeatures
getMinSpatialSegmentationIdc	TComSlice.h	/^  Int               getMinSpatialSegmentationIdc() const                   { return m_minSpatialSegmentationIdc;            }$/;"	f	class:TComVUI
getMotionVectorsOverPicBoundariesFlag	TComSlice.h	/^  Bool              getMotionVectorsOverPicBoundariesFlag() const          { return m_motionVectorsOverPicBoundariesFlag;   }$/;"	f	class:TComVUI
getMps	ContextModel.h	/^  UChar getMps    ()                { return ( m_ucState  & 1 ); }                    \/\/\/< get curret MPS$/;"	f	class:ContextModel
getMv	TComMotionInfo.h	/^  TComMv       & getMv()       { return  m_acMv; }$/;"	f	class:TComMvField
getMv	TComMotionInfo.h	/^  TComMv const & getMv    ( Int iIdx ) const { return  m_pcMv    [iIdx]; }$/;"	f	class:TComCUMvField
getMv	TComMotionInfo.h	/^  TComMv const & getMv() const { return  m_acMv; }$/;"	f	class:TComMvField
getMvField	TComDataCU.cpp	/^Void TComDataCU::getMvField ( const TComDataCU* pcCU, UInt uiAbsPartIdx, RefPicList eRefPicList, TComMvField& rcMvField )$/;"	f	class:TComDataCU
getMvPredAMVP	TComPrediction.cpp	/^Void TComPrediction::getMvPredAMVP( TComDataCU* pcCU, UInt uiPartIdx, UInt uiPartAddr, RefPicList eRefPicList, TComMv& rcMvPred )$/;"	f	class:TComPrediction
getMvPredAbove	TComDataCU.h	/^  Void          getMvPredAbove                ( TComMv&     rcMvPred ) const                               { rcMvPred = m_cMvFieldB.getMv();            }$/;"	f	class:TComDataCU
getMvPredAboveRight	TComDataCU.h	/^  Void          getMvPredAboveRight           ( TComMv&     rcMvPred ) const                               { rcMvPred = m_cMvFieldC.getMv();            }$/;"	f	class:TComDataCU
getMvPredLeft	TComDataCU.h	/^  Void          getMvPredLeft                 ( TComMv&     rcMvPred ) const                               { rcMvPred = m_cMvFieldA.getMv();            }$/;"	f	class:TComDataCU
getMvd	TComMotionInfo.h	/^  TComMv const & getMvd   ( Int iIdx ) const { return  m_pcMvd   [iIdx]; }$/;"	f	class:TComCUMvField
getMvdL1ZeroFlag	TComSlice.h	/^  Bool                        getMvdL1ZeroFlag() const                               { return m_bLMvdL1Zero;                                         }$/;"	f	class:TComSlice
getNalHrdParametersPresentFlag	TComSlice.h	/^  Bool    getNalHrdParametersPresentFlag( ) const                                    { return m_nalHrdParametersPresentFlag;                      }$/;"	f	class:TComHRD
getNalUnitType	TComSlice.h	/^  NalUnitType                 getNalUnitType() const                                 { return m_eNalUnitType;                                        }$/;"	f	class:TComSlice
getName	Debug.h	/^  const std::string  &getName()     const       { return m_sName;   }$/;"	f	class:EnvVar
getName	TComCodingStatistics.h	/^static inline const TChar* getName(TComCodingStatisticsType name)$/;"	f
getNeutralChromaIndicationFlag	TComSlice.h	/^  Bool              getNeutralChromaIndicationFlag() const                 { return m_neutralChromaIndicationFlag;          }$/;"	f	class:TComVUI
getNoOutputPriorPicsFlag	TComSlice.h	/^  Bool                        getNoOutputPriorPicsFlag() const                       { return m_noOutputPriorPicsFlag;                               }$/;"	f	class:TComSlice
getNoRaslOutputFlag	TComSlice.h	/^  Bool                        getNoRaslOutputFlag() const                            { return m_noRaslOutputFlag;                                    }$/;"	f	class:TComSlice
getNonPackedConstraintFlag	TComSlice.h	/^  Bool          getNonPackedConstraintFlag() const          { return m_nonPackedConstraintFlag;     }$/;"	f	class:ProfileTierLevel
getNumAllocatedSlice	TComPic.h	/^  UInt          getNumAllocatedSlice() const      {return m_picSym.getNumAllocatedSlice();}$/;"	f	class:TComPic
getNumAllocatedSlice	TComPicSym.h	/^  UInt               getNumAllocatedSlice() const                          { return UInt(m_apSlices.size());       }$/;"	f	class:TComPicSym
getNumBitsLeft	TComBitStream.h	/^  UInt getNumBitsLeft() { return 8*((UInt)m_fifo.size() - m_fifo_idx) + m_num_held_bits; }$/;"	f	class:TComInputBitstream
getNumBitsRead	TComBitStream.h	/^  UInt  getNumBitsRead() { return m_numBitsRead; }$/;"	f	class:TComInputBitstream
getNumBitsUntilByteAligned	TComBitCounter.h	/^  Int         getNumBitsUntilByteAligned() const                              { return (8 - m_uiBitCounter) & 0x7;}$/;"	f	class:TComBitCounter
getNumBitsUntilByteAligned	TComBitStream.h	/^  Int getNumBitsUntilByteAligned() const { return (8 - m_num_held_bits) & 0x7; }$/;"	f	class:TComOutputBitstream
getNumBitsUntilByteAligned	TComBitStream.h	/^  UInt getNumBitsUntilByteAligned() { return m_num_held_bits & (0x7); }$/;"	f	class:TComInputBitstream
getNumExtraSliceHeaderBits	TComSlice.h	/^  Int                    getNumExtraSliceHeaderBits() const                               { return m_numExtraSliceHeaderBits;             }$/;"	f	class:TComPPS
getNumHrdParameters	TComSlice.h	/^  UInt              getNumHrdParameters() const                          { return m_numHrdParameters;                                       }$/;"	f	class:TComVPS
getNumLongTermRefPicSPS	TComSlice.h	/^  UInt                   getNumLongTermRefPicSPS() const                                                 { return m_numLongTermRefPicSPS;                                       }$/;"	f	class:TComSPS
getNumPartInCtuHeight	TComPic.h	/^  UInt          getNumPartInCtuHeight() const      { return m_picSym.getNumPartInCtuHeight();  }$/;"	f	class:TComPic
getNumPartInCtuHeight	TComPicSym.h	/^  UInt               getNumPartInCtuHeight() const                         { return m_numPartInCtuHeight;   }$/;"	f	class:TComPicSym
getNumPartInCtuWidth	TComPic.h	/^  UInt          getNumPartInCtuWidth() const       { return m_picSym.getNumPartInCtuWidth();   }$/;"	f	class:TComPic
getNumPartInCtuWidth	TComPicSym.h	/^  UInt               getNumPartInCtuWidth() const                          { return m_numPartInCtuWidth;    }$/;"	f	class:TComPicSym
getNumPartitions	TComDataCU.cpp	/^UChar TComDataCU::getNumPartitions(const UInt uiAbsPartIdx) const$/;"	f	class:TComDataCU
getNumPartitionsInCtu	TComPic.h	/^  UInt          getNumPartitionsInCtu() const      { return m_picSym.getNumPartitionsInCtu();  }$/;"	f	class:TComPic
getNumPartitionsInCtu	TComPicSym.h	/^  UInt               getNumPartitionsInCtu() const                         { return m_numPartitionsInCtu;   }$/;"	f	class:TComPicSym
getNumRectRegions	SEI.h	/^  UInt getNumRectRegions()  const  { return (UInt) m_regions.size(); }$/;"	f	class:SEIRegionalNesting
getNumRefIdc	TComSlice.h	/^  Int     getNumRefIdc() const                         { return m_numRefIdc;                  }$/;"	f	class:TComReferencePictureSet
getNumRefIdx	TComSlice.h	/^  Int                         getNumRefIdx( RefPicList e ) const                     { return m_aiNumRefIdx[e];                                      }$/;"	f	class:TComSlice
getNumRefIdxL0DefaultActive	TComSlice.h	/^  UInt                   getNumRefIdxL0DefaultActive() const                              { return m_numRefIdxL0DefaultActive;            }$/;"	f	class:TComPPS
getNumRefIdxL1DefaultActive	TComSlice.h	/^  UInt                   getNumRefIdxL1DefaultActive() const                              { return m_numRefIdxL1DefaultActive;            }$/;"	f	class:TComPPS
getNumRegions	SEI.h	/^  UInt getNumRegions() const { return (UInt) m_regions.size(); }$/;"	f	class:RegionalSEI
getNumReorderPics	TComSlice.h	/^  Int                    getNumReorderPics(UInt tlayer) const                                            { return m_numReorderPics[tlayer];                                     }$/;"	f	class:TComSPS
getNumReorderPics	TComSlice.h	/^  UInt              getNumReorderPics(UInt tLayer) const                 { return m_numReorderPics[tLayer];                                 }$/;"	f	class:TComVPS
getNumRnSEIMessage	SEI.h	/^  UInt getNumRnSEIMessage() const  { return (UInt) m_rnSeiMessages.size(); }$/;"	f	class:SEIRegionalNesting
getNumRpsCurrTempList	TComSlice.cpp	/^Int TComSlice::getNumRpsCurrTempList() const$/;"	f	class:TComSlice
getNumTicksPocDiffOneMinus1	TComSlice.h	/^  Int  getNumTicksPocDiffOneMinus1( ) const    { return m_numTicksPocDiffOneMinus1;    }$/;"	f	class:TimingInfo
getNumTileColumnsMinus1	TComPicSym.h	/^  Int                getNumTileColumnsMinus1() const                       { return m_numTileColumnsMinus1; }$/;"	f	class:TComPicSym
getNumTileColumnsMinus1	TComSlice.h	/^  Int                    getNumTileColumnsMinus1() const                                  { return m_numTileColumnsMinus1;                }$/;"	f	class:TComPPS
getNumTileRowsMinus1	TComPicSym.h	/^  Int                getNumTileRowsMinus1() const                          { return m_numTileRowsMinus1;    }$/;"	f	class:TComPicSym
getNumTileRowsMinus1	TComSlice.h	/^  Int                    getNumTileRowsMinus1() const                                     { return m_numTileRowsMinus1;                   }$/;"	f	class:TComPPS
getNumTiles	TComPicSym.h	/^  Int                getNumTiles() const                                   { return (m_numTileRowsMinus1+1)*(m_numTileColumnsMinus1+1); }$/;"	f	class:TComPicSym
getNumUnitsInTick	TComSlice.h	/^  UInt getNumUnitsInTick( ) const              { return m_numUnitsInTick;              }$/;"	f	class:TimingInfo
getNumberOfCtusInFrame	TComPic.h	/^  UInt          getNumberOfCtusInFrame() const     { return m_picSym.getNumberOfCtusInFrame(); }$/;"	f	class:TComPic
getNumberOfCtusInFrame	TComPicSym.h	/^  UInt               getNumberOfCtusInFrame() const                        { return m_numCtusInFrame;              }$/;"	f	class:TComPicSym
getNumberOfLongtermPictures	TComSlice.h	/^  Int     getNumberOfLongtermPictures() const          { return m_numberOfLongtermPictures;   }$/;"	f	class:TComReferencePictureSet
getNumberOfNegativePictures	TComSlice.h	/^  Int     getNumberOfNegativePictures() const          { return m_numberOfNegativePictures;   }$/;"	f	class:TComReferencePictureSet
getNumberOfPictures	TComSlice.cpp	/^Int TComReferencePictureSet::getNumberOfPictures() const$/;"	f	class:TComReferencePictureSet
getNumberOfPositivePictures	TComSlice.h	/^  Int     getNumberOfPositivePictures() const          { return m_numberOfPositivePictures;   }$/;"	f	class:TComReferencePictureSet
getNumberOfReferencePictureSets	TComSlice.h	/^  Int                            getNumberOfReferencePictureSets() const                  { return Int(m_referencePictureSets.size());              }$/;"	f	class:TComRPSList
getNumberOfSubstreamSizes	TComSlice.h	/^  UInt                        getNumberOfSubstreamSizes( )                           { return (UInt) m_substreamSizes.size();                        }$/;"	f	class:TComSlice
getNumberOfTileRects	SEI.h	/^      Int  getNumberOfTileRects() const$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
getNumberOfTileSets	SEI.h	/^  Int  getNumberOfTileSets()                 const { return Int(m_tile_set_data.size()); }$/;"	f	class:SEITempMotionConstrainedTileSets
getNumberOfWrittenBits	TComBitCounter.h	/^  UInt        getNumberOfWrittenBits() const                                  { return m_uiBitCounter; }$/;"	f	class:TComBitCounter
getNumberOfWrittenBits	TComBitStream.h	/^  UInt getNumberOfWrittenBits() const { return UInt(m_fifo.size()) * 8 + m_num_held_bits; }$/;"	f	class:TComOutputBitstream
getNumberValidChannelTypes	TComChromaFormat.h	/^static inline UInt        getNumberValidChannelTypes(const ChromaFormat fmt)                       { return (fmt==CHROMA_400) ? 1 : MAX_NUM_CHANNEL_TYPE;               }$/;"	f
getNumberValidComponents	TComChromaFormat.h	/^static inline UInt        getNumberValidComponents  (const ChromaFormat fmt)                       { return (fmt==CHROMA_400) ? 1 : MAX_NUM_COMPONENT;                  }$/;"	f
getNumberValidComponents	TComPic.h	/^  Int           getNumberValidComponents() const                  { return m_apcPicYuv[PIC_YUV_REC]->getNumberValidComponents(); }$/;"	f	class:TComPic
getNumberValidComponents	TComPicYuv.h	/^  UInt          getNumberValidComponents() const { return ::getNumberValidComponents(m_chromaFormatIDC); }$/;"	f	class:TComPicYuv
getNumberValidComponents	TComYuv.h	/^  UInt         getNumberValidComponents   ()                     const { return ::getNumberValidComponents(m_chromaFormatIDC); }$/;"	f	class:TComYuv
getOnePictureOnlyConstraintFlag	TComSlice.h	/^  Bool          getOnePictureOnlyConstraintFlag() const     { return m_onePictureOnlyConstraintFlag;}$/;"	f	class:ProfileTierLevel
getOutputFlagPresentFlag	TComSlice.h	/^  Bool                   getOutputFlagPresentFlag() const                                 { return m_OutputFlagPresentFlag;               }$/;"	f	class:TComPPS
getOutputMark	TComPic.h	/^  Bool          getOutputMark () const      { return m_bNeededForOutput;  }$/;"	f	class:TComPic
getOverscanAppropriateFlag	TComSlice.h	/^  Bool              getOverscanAppropriateFlag() const                     { return m_overscanAppropriateFlag;              }$/;"	f	class:TComVUI
getOverscanInfoPresentFlag	TComSlice.h	/^  Bool              getOverscanInfoPresentFlag() const                     { return m_overscanInfoPresentFlag;              }$/;"	f	class:TComVUI
getPCMBitDepth	TComSlice.h	/^  UInt                   getPCMBitDepth(ChannelType type) const                                          { return m_pcmBitDepths[type];                                         }$/;"	f	class:TComSPS
getPCMFilterDisableFlag	TComSlice.h	/^  Bool                   getPCMFilterDisableFlag() const                                                 { return m_bPCMFilterDisableFlag;                                      }$/;"	f	class:TComSPS
getPCMLog2MaxSize	TComSlice.h	/^  UInt                   getPCMLog2MaxSize() const                                                       { return  m_pcmLog2MaxSize;                                            }$/;"	f	class:TComSPS
getPCMLog2MinSize	TComSlice.h	/^  UInt                   getPCMLog2MinSize() const                                                       { return  m_uiPCMLog2MinSize;                                          }$/;"	f	class:TComSPS
getPCMSample	TComDataCU.h	/^  Pel*          getPCMSample                  ( ComponentID component )                                    { return m_pcIPCMSample[component];          }$/;"	f	class:TComDataCU
getPOC	TComPic.h	/^  Int           getPOC() const                     { return  m_picSym.getSlice(m_uiCurrSliceIdx)->getPOC();  }$/;"	f	class:TComPic
getPOC	TComSlice.cpp	/^Int TComReferencePictureSet::getPOC(Int bufferNum) const$/;"	f	class:TComReferencePictureSet
getPOC	TComSlice.h	/^  Int                         getPOC() const                                         { return m_iPOC;                                                }$/;"	f	class:TComSlice
getPPS	TComPicSym.h	/^  const TComPPS&     getPPS()                 const                        { return m_pps; }$/;"	f	class:TComPicSym
getPPS	TComSlice.h	/^  TComPPS*       getPPS(Int ppsId)                                           { return m_ppsMap.getPS(ppsId); };$/;"	f	class:ParameterSetManager
getPPS	TComSlice.h	/^  const TComPPS*              getPPS() const                                         { return m_pcPPS;                                               }$/;"	f	class:TComSlice
getPPSChangedFlag	TComSlice.h	/^  Bool           getPPSChangedFlag(Int ppsId) const                          { return m_ppsMap.getChangedFlag(ppsId); }$/;"	f	class:ParameterSetManager
getPPSDeblockingFilterDisabledFlag	TComSlice.h	/^  Bool                   getPPSDeblockingFilterDisabledFlag() const                       { return m_ppsDeblockingFilterDisabledFlag;     } \/\/!< get offset for deblocking filter disabled$/;"	f	class:TComPPS
getPPSId	TComSlice.h	/^  Int                         getPPSId() const                                       { return m_iPPSId;                                              }$/;"	f	class:TComSlice
getPPSId	TComSlice.h	/^  Int                    getPPSId() const                                                 { return m_PPSId;                               }$/;"	f	class:TComPPS
getPS	TComSlice.h	/^  T* getPS(Int psId)$/;"	f	class:ParameterSetMap
getPS	TComSlice.h	/^  const T* getPS(Int psId) const$/;"	f	class:ParameterSetMap
getPTL	TComSlice.h	/^  TComPTL*               getPTL()                                                                        { return &m_pcPTL;                                                     }$/;"	f	class:TComSPS
getPTL	TComSlice.h	/^  TComPTL*          getPTL()                                             { return &m_pcPTL;                                                 }$/;"	f	class:TComVPS
getPTL	TComSlice.h	/^  const TComPTL*         getPTL() const                                                                  { return &m_pcPTL;                                                     }$/;"	f	class:TComSPS
getPTL	TComSlice.h	/^  const TComPTL*    getPTL() const                                       { return &m_pcPTL;                                                 }$/;"	f	class:TComVPS
getPUAbove	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getPUAbove( UInt& uiAPartUnitIdx,$/;"	f	class:TComDataCU
getPUAboveLeft	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getPUAboveLeft( UInt& uiALPartUnitIdx, UInt uiCurrPartUnitIdx, Bool bEnforceSliceRestriction ) const$/;"	f	class:TComDataCU
getPUAboveRight	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getPUAboveRight(UInt&  uiARPartUnitIdx, UInt uiCurrPartUnitIdx, UInt uiPartUnitOffset, Bool bEnforceSliceRestriction) const$/;"	f	class:TComDataCU
getPUBelowLeft	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getPUBelowLeft(UInt& uiBLPartUnitIdx,  UInt uiCurrPartUnitIdx, UInt uiPartUnitOffset, Bool bEnforceSliceRestriction) const$/;"	f	class:TComDataCU
getPULeft	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getPULeft( UInt& uiLPartUnitIdx,$/;"	f	class:TComDataCU
getPartIndexAndSize	TComDataCU.cpp	/^Void TComDataCU::getPartIndexAndSize( UInt uiPartIdx, UInt& ruiPartAddr, Int& riWidth, Int& riHeight ) const$/;"	f	class:TComDataCU
getPartPosition	TComDataCU.cpp	/^Void TComDataCU::getPartPosition( UInt partIdx, Int& xP, Int& yP, Int& nPSW, Int& nPSH) const$/;"	f	class:TComDataCU
getPartitionSize	TComDataCU.h	/^  PartSize      getPartitionSize              ( UInt uiIdx ) const                                         { return static_cast<PartSize>( m_pePartSize[uiIdx] ); }$/;"	f	class:TComDataCU
getPartitionSize	TComDataCU.h	/^  SChar*        getPartitionSize              ( )                                                          { return m_pePartSize;                       }$/;"	f	class:TComDataCU
getPartitionSize	TComPicSym.h	/^    PartSize getPartitionSize( const UInt absPartAddr ) const { return static_cast<PartSize>( m_pePartSize[absPartAddr] ); }$/;"	f	struct:TComPicSym::DPBPerCtuData
getPatternLStride	TComPattern.h	/^  Int   getPatternLStride() const { return m_patternStride;  }$/;"	f	class:TComPattern
getPersistentRiceAdaptationEnabledFlag	TComSlice.h	/^  Bool getPersistentRiceAdaptationEnabledFlag() const                                  { return m_persistentRiceAdaptationEnabledFlag;  }$/;"	f	class:TComSPSRExt
getPic	TComDataCU.h	/^  TComPic*         getPic                     ( )                                                          { return m_pcPic;                            }$/;"	f	class:TComDataCU
getPic	TComDataCU.h	/^  const TComPic*   getPic                     ( ) const                                                    { return m_pcPic;                            }$/;"	f	class:TComDataCU
getPic	TComSlice.h	/^  TComPic*                    getPic()                                               { return m_pcPic;                                               }$/;"	f	class:TComSlice
getPic	TComSlice.h	/^  const TComPic*              getPic() const                                         { return m_pcPic;                                               }$/;"	f	class:TComSlice
getPicDurationInTcMinus1	TComSlice.h	/^  UInt    getPicDurationInTcMinus1( Int layer ) const                                { return m_HRD[layer].picDurationInTcMinus1;                 }$/;"	f	class:TComHRD
getPicHeightInLumaSamples	TComSlice.h	/^  UInt                   getPicHeightInLumaSamples() const                                               { return  m_picHeightInLumaSamples;                                    }$/;"	f	class:TComSPS
getPicInitQPMinus26	TComSlice.h	/^  Int                    getPicInitQPMinus26() const                                      { return  m_picInitQPMinus26;                   }$/;"	f	class:TComPPS
getPicOutputFlag	TComSlice.h	/^  Bool                        getPicOutputFlag() const                               { return m_PicOutputFlag;                                       }$/;"	f	class:TComSlice
getPicSym	TComPic.h	/^  TComPicSym*   getPicSym()                        { return  &m_picSym;    }$/;"	f	class:TComPic
getPicSym	TComPic.h	/^  const TComPicSym* getPicSym() const              { return  &m_picSym;    }$/;"	f	class:TComPic
getPicWidthInLumaSamples	TComSlice.h	/^  UInt                   getPicWidthInLumaSamples() const                                                { return  m_picWidthInLumaSamples;                                     }$/;"	f	class:TComSPS
getPicYuvDisp	TComPic.cpp	/^TComPicYuv* TComPic::getPicYuvDisp()$/;"	f	class:TComPic
getPicYuvOrg	TComPic.h	/^  TComPicYuv*   getPicYuvOrg()        { return  m_apcPicYuv[PIC_YUV_ORG]; }$/;"	f	class:TComPic
getPicYuvPred	TComPic.h	/^  TComPicYuv*   getPicYuvPred()       { return  m_pcPicYuvPred; }$/;"	f	class:TComPic
getPicYuvRec	TComPic.h	/^  TComPicYuv*   getPicYuvRec()        { return  m_apcPicYuv[PIC_YUV_REC]; }$/;"	f	class:TComPic
getPicYuvResi	TComPic.h	/^  TComPicYuv*   getPicYuvResi()       { return  m_pcPicYuvResi; }$/;"	f	class:TComPic
getPicYuvTrueOrg	TComPic.h	/^  TComPicYuv*   getPicYuvTrueOrg()        { return  m_apcPicYuv[PIC_YUV_TRUE_ORG]; }$/;"	f	class:TComPic
getPocLSBLT	TComSlice.h	/^  Int     getPocLSBLT(Int i) const                     { return m_pocLSBLT[i];               }$/;"	f	class:TComReferencePictureSet
getPocProportionalToTimingFlag	TComSlice.h	/^  Bool getPocProportionalToTimingFlag( ) const { return m_pocProportionalToTimingFlag; }$/;"	f	class:TimingInfo
getPpsRangeExtension	TComSlice.h	/^  TComPPSRExt&           getPpsRangeExtension()                                           { return m_ppsRangeExtension;                   }$/;"	f	class:TComPPS
getPpsRangeExtension	TComSlice.h	/^  const TComPPSRExt&     getPpsRangeExtension() const                                     { return m_ppsRangeExtension;                   }$/;"	f	class:TComPPS
getPredictionMode	TComDataCU.h	/^  PredMode      getPredictionMode             ( UInt uiIdx ) const                                         { return static_cast<PredMode>( m_pePredMode[uiIdx] ); }$/;"	f	class:TComDataCU
getPredictionMode	TComDataCU.h	/^  SChar*        getPredictionMode             ( )                                                          { return m_pePredMode;                       }$/;"	f	class:TComDataCU
getPredictorPtr	TComPrediction.h	/^  Pel*  getPredictorPtr           ( const ComponentID compID, const Bool bUseFilteredPredictions )$/;"	f	class:TComPrediction
getProfileCompatibilityFlag	TComSlice.h	/^  Bool          getProfileCompatibilityFlag(Int i) const    { return m_profileCompatibilityFlag[i]; }$/;"	f	class:ProfileTierLevel
getProfileFeatures	ProfileLevelTierFeatures.h	/^    const ProfileFeatures     *getProfileFeatures()   const { return m_pProfile; }$/;"	f	class:ProfileLevelTierFeatures
getProfileIdc	TComSlice.h	/^  Profile::Name getProfileIdc() const                       { return m_profileIdc;                  }$/;"	f	class:ProfileTierLevel
getProfileSpace	TComSlice.h	/^  Int           getProfileSpace() const                     { return m_profileSpace;                }$/;"	f	class:ProfileTierLevel
getProgressiveSourceFlag	TComSlice.h	/^  Bool          getProgressiveSourceFlag() const            { return m_progressiveSourceFlag;       }$/;"	f	class:ProfileTierLevel
getQP	TComDataCU.h	/^  SChar         getQP                         ( UInt uiIdx ) const                                         { return m_phQP[uiIdx];                      }$/;"	f	class:TComDataCU
getQP	TComDataCU.h	/^  SChar*        getQP                         ( )                                                          { return m_phQP;                             }$/;"	f	class:TComDataCU
getQpBDOffset	TComSlice.h	/^  Int                    getQpBDOffset(ChannelType type) const                                           { return m_qpBDOffset[type];                                           }$/;"	f	class:TComSPS
getQpDelta	TComTrQuant.h	/^  Int     getQpDelta(Int qp) { return m_qpDelta[qp]; }$/;"	f	class:TComTrQuant
getQpMinCuAbove	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getQpMinCuAbove( UInt& uiAPartUnitIdx, UInt uiCurrAbsIdxInCtu ) const$/;"	f	class:TComDataCU
getQpMinCuLeft	TComDataCU.cpp	/^const TComDataCU* TComDataCU::getQpMinCuLeft( UInt& uiLPartUnitIdx, UInt uiCurrAbsIdxInCtu ) const$/;"	f	class:TComDataCU
getQpOffset	TComSlice.h	/^  Int                    getQpOffset(ComponentID compID) const$/;"	f	class:TComPPS
getQtRootCbf	TComDataCU.cpp	/^UChar TComDataCU::getQtRootCbf( UInt uiIdx ) const$/;"	f	class:TComDataCU
getQuadtreeTULog2MaxSize	TComSlice.h	/^  UInt                   getQuadtreeTULog2MaxSize() const                                                { return m_uiQuadtreeTULog2MaxSize;                                    }$/;"	f	class:TComSPS
getQuadtreeTULog2MinSize	TComSlice.h	/^  UInt                   getQuadtreeTULog2MinSize() const                                                { return m_uiQuadtreeTULog2MinSize;                                    }$/;"	f	class:TComSPS
getQuadtreeTULog2MinSizeInCU	TComDataCU.cpp	/^UInt TComDataCU::getQuadtreeTULog2MinSizeInCU( UInt absPartIdx ) const$/;"	f	class:TComDataCU
getQuadtreeTUMaxDepthInter	TComSlice.h	/^  UInt                   getQuadtreeTUMaxDepthInter() const                                              { return m_uiQuadtreeTUMaxDepthInter;                                  }$/;"	f	class:TComSPS
getQuadtreeTUMaxDepthIntra	TComSlice.h	/^  UInt                   getQuadtreeTUMaxDepthIntra() const                                              { return m_uiQuadtreeTUMaxDepthIntra;                                  }$/;"	f	class:TComSPS
getQuantCoeff	TComTrQuant.h	/^  Int* getQuantCoeff                    ( UInt list, Int qp, UInt size ) { return m_quantCoef            [size][list][qp]; };  \/\/!< get Quant Coefficent$/;"	f	class:TComTrQuant
getRNId	SEI.h	/^  UInt getRNId()            const  { return m_rnId; }$/;"	f	class:SEIRegionalNesting
getROIY	TComPattern.h	/^  __inline Pel*  getROIY()$/;"	f	class:TComPattern
getROIY	TComPattern.h	/^  __inline const Pel*  getROIY() const$/;"	f	class:TComPattern
getROIYHeight	TComPattern.h	/^  Int   getROIYHeight() const     { return m_roiHeight;      }$/;"	f	class:TComPattern
getROIYPosX	TComPattern.h	/^  Int   getROIYPosX() const       { return m_roiPosX; }$/;"	f	class:TComPattern
getROIYPosY	TComPattern.h	/^  Int   getROIYPosY() const       { return m_roiPosY; }$/;"	f	class:TComPattern
getROIYWidth	TComPattern.h	/^  Int   getROIYWidth() const      { return m_roiWidth;       }$/;"	f	class:TComPattern
getRPS	TComSlice.h	/^  const TComReferencePictureSet* getRPS()                                            { return m_pRPS;                                                }$/;"	f	class:TComSlice
getRPSList	TComSlice.h	/^  TComRPSList*           getRPSList()                                                                    { return &m_RPSList;                                                   }$/;"	f	class:TComSPS
getRPSList	TComSlice.h	/^  const TComRPSList*     getRPSList() const                                                              { return &m_RPSList;                                                   }$/;"	f	class:TComSPS
getRPSidx	TComSlice.h	/^  Int                         getRPSidx() const                                      { return m_rpsIdx;                                              }$/;"	f	class:TComSlice
getRapPicFlag	TComSlice.cpp	/^Bool TComSlice::getRapPicFlag() const$/;"	f	class:TComSlice
getRdpcmEnabledFlag	TComSlice.h	/^  Bool getRdpcmEnabledFlag(const RDPCMSignallingMode signallingMode) const             { return m_rdpcmEnabledFlag[signallingMode];     }$/;"	f	class:TComSPSRExt
getReconMark	TComPic.h	/^  Bool          getReconMark () const      { return m_bReconstructed;  }$/;"	f	class:TComPic
getRect	TComTU.h	/^    const TComRectangle &getRect(const ComponentID compID)     const { return mRect[compID];    }$/;"	f	class:TComTU
getRefIdc	TComSlice.cpp	/^Int  TComReferencePictureSet::getRefIdc(Int bufferNum) const$/;"	f	class:TComReferencePictureSet
getRefIdx	TComMotionInfo.h	/^  Int            getRefIdx( Int iIdx ) const { return  m_piRefIdx[iIdx]; }$/;"	f	class:TComCUMvField
getRefIdx	TComMotionInfo.h	/^  Int getRefIdx() const { return  m_iRefIdx;       }$/;"	f	class:TComMvField
getRefMatrixId	TComSlice.h	/^  UInt       getRefMatrixId(UInt sizeId, UInt listId) const                     { return m_refMatrixId[sizeId][listId];                      } \/\/!< get reference matrix ID$/;"	f	class:TComScalingList
getRefPOC	TComSlice.h	/^  Int                         getRefPOC( RefPicList e, Int iRefIdx) const            { return m_aiRefPOCList[e][iRefIdx];                            }$/;"	f	class:TComSlice
getRefPUPartPos	TComPrediction.cpp	/^Void getRefPUPartPos(TComDataCU* pcCU, TComMv& cMv, Int uiPartIdx, Int& ruiPredXLeft, Int& ruiPredYTop, Int& ruiPredXRight, Int& ruiPredYBottom, Int iWidth, Int iHeight)$/;"	f
getRefPic	TComSlice.h	/^  TComPic*                    getRefPic( RefPicList e, Int iRefIdx)                  { return m_apcRefPicList[e][iRefIdx];                           }$/;"	f	class:TComSlice
getRefPic	TComSlice.h	/^  const TComPic*              getRefPic( RefPicList e, Int iRefIdx) const            { return m_apcRefPicList[e][iRefIdx];                           }$/;"	f	class:TComSlice
getRefPicListModification	TComSlice.h	/^  TComRefPicListModification* getRefPicListModification()                            { return &m_RefPicListModification;                             }$/;"	f	class:TComSlice
getRefPicListModificationFlagL0	TComSlice.h	/^  Bool    getRefPicListModificationFlagL0() const        { return m_refPicListModificationFlagL0;                                  }$/;"	f	class:TComRefPicListModification
getRefPicListModificationFlagL1	TComSlice.h	/^  Bool    getRefPicListModificationFlagL1() const        { return m_refPicListModificationFlagL1;                                  }$/;"	f	class:TComRefPicListModification
getRefPicSetIdxL0	TComSlice.h	/^  UInt    getRefPicSetIdxL0(UInt idx) const              { assert(idx<REF_PIC_LIST_NUM_IDX); return m_RefPicSetIdxL0[idx];         }$/;"	f	class:TComRefPicListModification
getRefPicSetIdxL1	TComSlice.h	/^  UInt    getRefPicSetIdxL1(UInt idx) const              { assert(idx<REF_PIC_LIST_NUM_IDX); return m_RefPicSetIdxL1[idx];         }$/;"	f	class:TComRefPicListModification
getRefQP	TComDataCU.cpp	/^SChar TComDataCU::getRefQP( UInt uiCurrAbsIdxInCtu ) const$/;"	f	class:TComDataCU
getReferencePictureSet	TComSlice.h	/^  TComReferencePictureSet*       getReferencePictureSet(Int referencePictureSetNum)       { return &m_referencePictureSets[referencePictureSetNum]; }$/;"	f	class:TComRPSList
getReferencePictureSet	TComSlice.h	/^  const TComReferencePictureSet* getReferencePictureSet(Int referencePictureSetNum) const { return &m_referencePictureSets[referencePictureSetNum]; }$/;"	f	class:TComRPSList
getRegionId	TypeDef.h	/^  Int  getRegionId() const     { return getWindowEnabledFlag() ? m_regionId : 0;    }$/;"	f	class:RNSEIWindow
getRegions	SEI.h	/^  const RNSEIWindowVec& getRegions() { return m_regions; }$/;"	f	class:RegionalSEI
getRegions	SEI.h	/^  const std::vector<RNSEIWindow> &getRegions() const { return m_regions; }$/;"	f	class:SEIRegionalNesting
getRestrictedRefPicListsFlag	TComSlice.h	/^  Bool              getRestrictedRefPicListsFlag() const                   { return m_restrictedRefPicListsFlag;            }$/;"	f	class:TComVUI
getRightEdgePosInCtus	TComPicSym.h	/^  UInt      getRightEdgePosInCtus  () const              { return m_rightEdgePosInCtus; }$/;"	f	class:TComTile
getRnSEIMessages	SEI.h	/^  const std::vector< SEIListOfIndices >& getRnSEIMessages() const { return m_rnSeiMessages; }$/;"	f	class:SEIRegionalNesting
getSAOBlkParam	TComPicSym.h	/^  SAOBlkParam*       getSAOBlkParam()                                      { return m_saoBlkParams;}$/;"	f	class:TComPicSym
getSAOBlkParam	TComPicSym.h	/^  const SAOBlkParam* getSAOBlkParam() const                                { return m_saoBlkParams;}$/;"	f	class:TComPicSym
getSAOMergeAvailability	TComPic.cpp	/^Bool  TComPic::getSAOMergeAvailability(Int currAddr, Int mergeAddr)$/;"	f	class:TComPic
getSEIMessageString	SEI.cpp	/^const TChar *SEI::getSEIMessageString(SEI::PayloadType payloadType)$/;"	f	class:SEI
getSEIs	TComPic.h	/^  SEIMessages& getSEIs() { return m_SEIs; }$/;"	f	class:TComPic
getSEIs	TComPic.h	/^  const SEIMessages& getSEIs() const { return m_SEIs; }$/;"	f	class:TComPic
getSPS	TComPicSym.h	/^  const TComSPS&     getSPS()                 const                        { return m_sps; }$/;"	f	class:TComPicSym
getSPS	TComSlice.h	/^  TComSPS*       getSPS(Int spsId)                                           { return m_spsMap.getPS(spsId); };$/;"	f	class:ParameterSetManager
getSPS	TComSlice.h	/^  const TComSPS*              getSPS() const                                         { return m_pcSPS;                                               }$/;"	f	class:TComSlice
getSPSChangedFlag	TComSlice.h	/^  Bool           getSPSChangedFlag(Int spsId) const                          { return m_spsMap.getChangedFlag(spsId); }$/;"	f	class:ParameterSetManager
getSPSId	TComSlice.h	/^  Int                    getSPSId() const                                                                { return m_SPSId;                                                      }$/;"	f	class:TComSPS
getSPSId	TComSlice.h	/^  Int                    getSPSId() const                                                 { return m_SPSId;                               }$/;"	f	class:TComPPS
getSPSTemporalMVPEnabledFlag	TComSlice.h	/^  Bool                   getSPSTemporalMVPEnabledFlag() const                                            { return m_SPSTemporalMVPEnabledFlag;                                  }$/;"	f	class:TComSPS
getSaoEnabledFlag	TComSlice.h	/^  Bool                        getSaoEnabledFlag(ChannelType chType) const            { return m_saoEnabledFlag[chType];                              }$/;"	f	class:TComSlice
getSarHeight	TComSlice.h	/^  Int               getSarHeight() const                                   { return m_sarHeight;                            }$/;"	f	class:TComVUI
getSarWidth	TComSlice.h	/^  Int               getSarWidth() const                                    { return m_sarWidth;                             }$/;"	f	class:TComVUI
getScaledChromaQP	TComChromaFormat.h	/^static inline Int getScaledChromaQP(Int unscaledChromaQP, const ChromaFormat chFmt)$/;"	f
getScalingList	TComSlice.h	/^  TComScalingList&       getScalingList()                                                                { return m_scalingList;                                                }$/;"	f	class:TComSPS
getScalingList	TComSlice.h	/^  TComScalingList&       getScalingList()                                                 { return m_scalingList;                         }$/;"	f	class:TComPPS
getScalingList	TComSlice.h	/^  const TComScalingList& getScalingList() const                                                          { return m_scalingList;                                                }$/;"	f	class:TComSPS
getScalingList	TComSlice.h	/^  const TComScalingList& getScalingList() const                                           { return m_scalingList;                         }$/;"	f	class:TComPPS
getScalingListAddress	TComSlice.h	/^  Int*       getScalingListAddress(UInt sizeId, UInt listId)                    { return &(m_scalingListCoef[sizeId][listId][0]);            } \/\/!< get matrix coefficient$/;"	f	class:TComScalingList
getScalingListAddress	TComSlice.h	/^  const Int* getScalingListAddress(UInt sizeId, UInt listId) const              { return &(m_scalingListCoef[sizeId][listId][0]);            } \/\/!< get matrix coefficient$/;"	f	class:TComScalingList
getScalingListDC	TComSlice.h	/^  Int        getScalingListDC(UInt sizeId, UInt listId) const                   { return m_scalingListDC[sizeId][listId];                    } \/\/!< get DC value$/;"	f	class:TComScalingList
getScalingListDefaultAddress	TComSlice.cpp	/^const Int* TComScalingList::getScalingListDefaultAddress(UInt sizeId, UInt listId)$/;"	f	class:TComScalingList
getScalingListFlag	TComSlice.h	/^  Bool                   getScalingListFlag() const                                                      { return m_scalingListEnabledFlag;                                     }$/;"	f	class:TComSPS
getScalingListPredModeFlag	TComSlice.h	/^  Bool       getScalingListPredModeFlag(UInt sizeId, UInt listId) const         { return m_scalingListPredModeFlagIsDPCM[sizeId][listId];    }$/;"	f	class:TComScalingList
getScalingListPresentFlag	TComSlice.h	/^  Bool                   getScalingListPresentFlag() const                                               { return m_scalingListPresentFlag;                                     }$/;"	f	class:TComSPS
getScalingListPresentFlag	TComSlice.h	/^  Bool                   getScalingListPresentFlag() const                                { return m_scalingListPresentFlag;              }$/;"	f	class:TComPPS
getScalingListType	TComChromaFormat.h	/^static inline Int getScalingListType(const PredMode predMode, const ComponentID compID)$/;"	f
getSeisByType	SEI.cpp	/^SEIMessages getSeisByType(SEIMessages &seiList, SEI::PayloadType seiType)$/;"	f
getSigCoeffGroupCtxInc	TComTrQuant.cpp	/^UInt TComTrQuant::getSigCoeffGroupCtxInc  (const UInt*  uiSigCoeffGroupFlag,$/;"	f	class:TComTrQuant
getSigCtxInc	TComTrQuant.cpp	/^Int TComTrQuant::getSigCtxInc    (       Int                        patternSigCtx,$/;"	f	class:TComTrQuant
getSignDataHidingEnabledFlag	TComSlice.h	/^  Bool                   getSignDataHidingEnabledFlag() const                             { return m_signDataHidingEnabledFlag;           }$/;"	f	class:TComPPS
getSignificanceMapContextOffset	TComChromaFormat.h	/^static inline UInt getSignificanceMapContextOffset (const ComponentID component)$/;"	f
getSkipFlag	TComDataCU.h	/^  Bool          getSkipFlag                   ( UInt idx ) const                                           { return m_skipFlag[idx];                    }$/;"	f	class:TComDataCU
getSkipFlag	TComDataCU.h	/^  Bool*         getSkipFlag                   ( )                                                          { return m_skipFlag;                         }$/;"	f	class:TComDataCU
getSlice	TComDataCU.h	/^  TComSlice*       getSlice                   ( )                                                          { return m_pcSlice;                          }$/;"	f	class:TComDataCU
getSlice	TComDataCU.h	/^  const TComSlice* getSlice                   ( ) const                                                    { return m_pcSlice;                          }$/;"	f	class:TComDataCU
getSlice	TComPic.h	/^  TComSlice*    getSlice(Int i)                    { return  m_picSym.getSlice(i);  }$/;"	f	class:TComPic
getSlice	TComPic.h	/^  const TComSlice* getSlice(Int i) const           { return  m_picSym.getSlice(i);  }$/;"	f	class:TComPic
getSlice	TComPicSym.h	/^    const TComSlice* getSlice()                         const { return m_pSlice; }$/;"	f	struct:TComPicSym::DPBPerCtuData
getSlice	TComPicSym.h	/^  TComSlice*         getSlice(UInt i)                                      { return m_apSlices[i];             }$/;"	f	class:TComPicSym
getSlice	TComPicSym.h	/^  const TComSlice*   getSlice(UInt i) const                                { return m_apSlices[i];             }$/;"	f	class:TComPicSym
getSliceArgument	TComSlice.h	/^  UInt                        getSliceArgument() const                               { return m_sliceArgument;                                       }$/;"	f	class:TComSlice
getSliceBits	TComSlice.h	/^  UInt                        getSliceBits() const                                   { return m_sliceBits;                                           }$/;"	f	class:TComSlice
getSliceChromaQpDelta	TComSlice.h	/^  Int                         getSliceChromaQpDelta(ComponentID compID) const        { return isLuma(compID) ? 0 : m_iSliceChromaQpDelta[compID];    }$/;"	f	class:TComSlice
getSliceChromaQpFlag	TComSlice.h	/^  Bool                   getSliceChromaQpFlag() const                                     { return  m_bSliceChromaQpFlag;                 }$/;"	f	class:TComPPS
getSliceCurEndCtuTsAddr	TComSlice.h	/^  UInt                        getSliceCurEndCtuTsAddr() const                        { return m_sliceCurEndCtuTsAddr;                                } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
getSliceCurStartCtuTsAddr	TComSlice.h	/^  UInt                        getSliceCurStartCtuTsAddr() const                      { return m_sliceCurStartCtuTsAddr;                              } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
getSliceHeaderExtensionPresentFlag	TComSlice.h	/^  Bool                   getSliceHeaderExtensionPresentFlag() const                       { return m_sliceHeaderExtensionPresentFlag;     }$/;"	f	class:TComPPS
getSliceIdx	TComSlice.h	/^  UInt                        getSliceIdx() const                                    { return  m_sliceIdx;                                           }$/;"	f	class:TComSlice
getSliceMode	TComSlice.h	/^  SliceConstraint             getSliceMode() const                                   { return m_sliceMode;                                           }$/;"	f	class:TComSlice
getSliceNSamples	TComTrQuant.h	/^  Int*    getSliceNSamples(){ return m_sliceNsamples ;}$/;"	f	class:TComTrQuant
getSliceQp	TComSlice.h	/^  Int                         getSliceQp() const                                     { return m_iSliceQp;                                            }$/;"	f	class:TComSlice
getSliceQpBase	TComSlice.h	/^  Int                         getSliceQpBase() const                                 { return m_iSliceQpBase;                                        }$/;"	f	class:TComSlice
getSliceQpDelta	TComSlice.h	/^  Int                         getSliceQpDelta() const                                { return m_iSliceQpDelta;                                       }$/;"	f	class:TComSlice
getSliceSegmentArgument	TComSlice.h	/^  UInt                        getSliceSegmentArgument() const                        { return m_sliceSegmentArgument;                                }$/;"	f	class:TComSlice
getSliceSegmentBits	TComSlice.h	/^  UInt                        getSliceSegmentBits() const                            { return m_sliceSegmentBits;                                    }$/;"	f	class:TComSlice
getSliceSegmentCurEndCtuTsAddr	TComSlice.h	/^  UInt                        getSliceSegmentCurEndCtuTsAddr() const                 { return m_sliceSegmentCurEndCtuTsAddr;                         } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
getSliceSegmentCurStartCtuTsAddr	TComSlice.h	/^  UInt                        getSliceSegmentCurStartCtuTsAddr() const               { return m_sliceSegmentCurStartCtuTsAddr;                       } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
getSliceSegmentMode	TComSlice.h	/^  SliceConstraint             getSliceSegmentMode() const                            { return m_sliceSegmentMode;                                    }$/;"	f	class:TComSlice
getSliceSumC	TComTrQuant.h	/^  Double* getSliceSumC()    { return m_sliceSumC; }$/;"	f	class:TComTrQuant
getSliceType	TComSlice.h	/^  SliceType                   getSliceType() const                                   { return m_eSliceType;                                          }$/;"	f	class:TComSlice
getSpsRangeExtension	TComSlice.h	/^  TComSPSRExt&           getSpsRangeExtension()                                                          { return m_spsRangeExtension;                                          }$/;"	f	class:TComSPS
getSpsRangeExtension	TComSlice.h	/^  const TComSPSRExt&     getSpsRangeExtension() const                                                    { return m_spsRangeExtension;                                          }$/;"	f	class:TComSPS
getSqrtLambda	TComRdCost.h	/^  Double  getSqrtLambda ()   { return m_sqrtLambda; }$/;"	f	class:TComRdCost
getState	ContextModel.h	/^  UChar getState  ()                { return ( m_ucState >> 1 ); }                    \/\/\/< get current state$/;"	f	class:ContextModel
getStreamBitDepth	TComSlice.h	/^  Int                    getStreamBitDepth(ChannelType type) const                                       { return m_bitDepths.stream[type];                                     }$/;"	f	class:TComSPS
getStride	TComPic.h	/^  Int           getStride(const ComponentID id) const          { return m_apcPicYuv[PIC_YUV_REC]->getStride(id); }$/;"	f	class:TComPic
getStride	TComPicYuv.h	/^  Int           getStride         (const ChannelType id) const { return ((m_picWidth     ) + (m_marginX  <<1)) >> getChannelTypeScaleX(id); }$/;"	f	class:TComPicYuv
getStride	TComPicYuv.h	/^  Int           getStride         (const ComponentID id) const { return ((m_picWidth     ) + (m_marginX  <<1)) >> getComponentScaleX(id); }$/;"	f	class:TComPicYuv
getStride	TComYuv.h	/^  UInt         getStride                  (const ComponentID id) const { return m_iWidth >> getComponentScaleX(id);   }$/;"	f	class:TComYuv
getString	Debug.h	/^  const std::string  &getString()   const       { return m_sVal;    }$/;"	f	class:EnvVar
getSubLayerLevelPresentFlag	TComSlice.h	/^  Bool                    getSubLayerLevelPresentFlag(Int i) const     { return m_subLayerLevelPresentFlag[i];   }$/;"	f	class:TComPTL
getSubLayerPTL	TComSlice.h	/^  ProfileTierLevel*       getSubLayerPTL(Int i)                        { return &m_subLayerPTL[i];               }$/;"	f	class:TComPTL
getSubLayerPTL	TComSlice.h	/^  const ProfileTierLevel* getSubLayerPTL(Int i) const                  { return &m_subLayerPTL[i];               }$/;"	f	class:TComPTL
getSubLayerProfilePresentFlag	TComSlice.h	/^  Bool                    getSubLayerProfilePresentFlag(Int i) const   { return m_subLayerProfilePresentFlag[i]; }$/;"	f	class:TComPTL
getSubPicCpbParamsInPicTimingSEIFlag	TComSlice.h	/^  Bool    getSubPicCpbParamsInPicTimingSEIFlag( ) const                              { return m_subPicCpbParamsInPicTimingSEIFlag;                }$/;"	f	class:TComHRD
getSubPicCpbParamsPresentFlag	TComSlice.h	/^  Bool    getSubPicCpbParamsPresentFlag( ) const                                     { return m_subPicCpbParamsPresentFlag;                       }$/;"	f	class:TComHRD
getSubstreamForCtuAddr	TComPic.cpp	/^UInt TComPic::getSubstreamForCtuAddr(const UInt ctuAddr, const Bool bAddressInRaster, TComSlice *pcSlice)$/;"	f	class:TComPic
getSubstreamSize	TComSlice.h	/^  UInt                        getSubstreamSize( Int idx )                            { assert(idx<getNumberOfSubstreamSizes()); return m_substreamSizes[idx]; }$/;"	f	class:TComSlice
getTComTile	TComPicSym.h	/^  TComTile*          getTComTile  ( UInt tileIdx )                         { return &(m_tileParameters[tileIdx]); }$/;"	f	class:TComPicSym
getTComTile	TComPicSym.h	/^  const TComTile*    getTComTile  ( UInt tileIdx ) const                   { return &(m_tileParameters[tileIdx]); }$/;"	f	class:TComPicSym
getTLayer	TComPic.h	/^  UInt          getTLayer() const               { return m_uiTLayer;   }$/;"	f	class:TComPic
getTLayer	TComSlice.h	/^  UInt                        getTLayer() const                                      { return m_uiTLayer;                                            }$/;"	f	class:TComSlice
getTMctsMvpIsValid	TComDataCU.h	/^  Bool          getTMctsMvpIsValid()          { return m_tMctsMvpIsValid; }$/;"	f	class:TComDataCU
getTUEntropyCodingParameters	TComChromaFormat.cpp	/^Void getTUEntropyCodingParameters(      TUEntropyCodingParameters &result,$/;"	f
getTemporalIdNestingFlag	TComSlice.h	/^  Bool                   getTemporalIdNestingFlag() const                                                { return m_bTemporalIdNestingFlag;                                     }$/;"	f	class:TComSPS
getTemporalLayerNonReferenceFlag	TComSlice.h	/^  Bool                        getTemporalLayerNonReferenceFlag()                     { return m_temporalLayerNonReferenceFlag;                       }$/;"	f	class:TComSlice
getTemporalNestingFlag	TComSlice.h	/^  Bool              getTemporalNestingFlag() const                       { return m_bTemporalIdNestingFlag;                                 }$/;"	f	class:TComVPS
getTickDivisorMinus2	TComSlice.h	/^  UInt    getTickDivisorMinus2( ) const                                              { return m_tickDivisorMinus2;                                }$/;"	f	class:TComHRD
getTier	ProfileLevelTierFeatures.h	/^    Level::Tier                getTier() const { return m_tier; }$/;"	f	class:ProfileLevelTierFeatures
getTierFlag	TComSlice.h	/^  Level::Tier   getTierFlag() const                         { return m_tierFlag;                    }$/;"	f	class:ProfileTierLevel
getTileColumnWidth	TComSlice.h	/^  UInt                   getTileColumnWidth(UInt columnIdx) const                         { return  m_tileColumnWidth[columnIdx];         }$/;"	f	class:TComPPS
getTileHeightInCtus	TComPicSym.h	/^  UInt      getTileHeightInCtus    () const              { return m_tileHeightInCtus; }$/;"	f	class:TComTile
getTileIdxMap	TComPicSym.h	/^  UInt               getTileIdxMap( Int ctuRsAddr ) const                  { return *(m_puiTileIdxMap + ctuRsAddr); }$/;"	f	class:TComPicSym
getTileLeftTopPelPosX	TComPattern.h	/^  Int   getTileLeftTopPelPosX() const { return m_tileLeftTopPelPosX; }$/;"	f	class:TComPattern
getTileLeftTopPelPosY	TComPattern.h	/^  Int   getTileLeftTopPelPosY() const { return m_tileLeftTopPelPosY; }$/;"	f	class:TComPattern
getTilePosition	TComPicSym.cpp	/^Void getTilePosition(const TComDataCU* const pcCU, UInt &tileXPosInCtus, UInt &tileYPosInCtus, UInt &tileWidthtInCtus, UInt &tileHeightInCtus)$/;"	f
getTileRightBottomPelPosX	TComPattern.h	/^  Int   getTileRightBottomPelPosX() const { return m_tileRightBottomPelPosX; }$/;"	f	class:TComPattern
getTileRightBottomPelPosY	TComPattern.h	/^  Int   getTileRightBottomPelPosY() const { return m_tileRightBottomPelPosY; }$/;"	f	class:TComPattern
getTileRowHeight	TComSlice.h	/^  UInt                   getTileRowHeight(UInt rowIdx) const                              { return m_tileRowHeight[rowIdx];               }$/;"	f	class:TComPPS
getTileUniformSpacingFlag	TComSlice.h	/^  Bool                   getTileUniformSpacingFlag() const                                { return m_uniformSpacingFlag;                  }$/;"	f	class:TComPPS
getTileWidthInCtus	TComPicSym.h	/^  UInt      getTileWidthInCtus     () const              { return m_tileWidthInCtus; }$/;"	f	class:TComTile
getTilesEnabledFlag	TComSlice.h	/^  Bool                   getTilesEnabledFlag() const                                      { return m_tilesEnabledFlag;                    }$/;"	f	class:TComPPS
getTilesFixedStructureFlag	TComSlice.h	/^  Bool              getTilesFixedStructureFlag() const                     { return m_tilesFixedStructureFlag;              }$/;"	f	class:TComVUI
getTimeScale	TComSlice.h	/^  UInt getTimeScale( ) const                   { return m_timeScale;                   }$/;"	f	class:TimingInfo
getTimingInfo	TComSlice.h	/^  TimingInfo*       getTimingInfo()                                        { return &m_timingInfo;                          }$/;"	f	class:TComVUI
getTimingInfo	TComSlice.h	/^  TimingInfo*       getTimingInfo()                                      { return &m_timingInfo;                                            }$/;"	f	class:TComVPS
getTimingInfo	TComSlice.h	/^  const TimingInfo* getTimingInfo() const                                  { return &m_timingInfo;                          }$/;"	f	class:TComVUI
getTimingInfo	TComSlice.h	/^  const TimingInfo* getTimingInfo() const                                { return &m_timingInfo;                                            }$/;"	f	class:TComVPS
getTimingInfoPresentFlag	TComSlice.h	/^  Bool getTimingInfoPresentFlag( ) const       { return m_timingInfoPresentFlag;       }$/;"	f	class:TimingInfo
getTotalBins	TComDataCU.h	/^  UInt&         getTotalBins                  ( )                                                          { return m_uiTotalBins;       }$/;"	f	class:TComDataCU
getTotalBits	TComChromaFormat.h	/^static inline UInt getTotalBits(const UInt width, const UInt height, const ChromaFormat format, const Int bitDepths[MAX_NUM_CHANNEL_TYPE])$/;"	f
getTotalBits	TComDataCU.h	/^  UInt&         getTotalBits                  ( )                                                          { return m_uiTotalBits;       }$/;"	f	class:TComDataCU
getTotalCost	TComDataCU.h	/^  Double&       getTotalCost                  ( )                                                          { return m_dTotalCost;        }$/;"	f	class:TComDataCU
getTotalDistortion	TComDataCU.h	/^  Distortion&   getTotalDistortion            ( )                                                          { return m_uiTotalDistortion; }$/;"	f	class:TComDataCU
getTotalHeight	TComPicYuv.h	/^  Int           getTotalHeight    (const ComponentID id) const { return ((m_picHeight    ) + (m_marginY  <<1)) >> getComponentScaleY(id); }$/;"	f	class:TComPicYuv
getTotalNumPart	TComDataCU.h	/^  UInt&         getTotalNumPart               ( )                                                          { return m_uiNumPartition;    }$/;"	f	class:TComDataCU
getTotalSamples	TComChromaFormat.h	/^static inline UInt getTotalSamples(const UInt width, const UInt height, const ChromaFormat format)$/;"	f
getTransferCharacteristics	TComSlice.h	/^  Int               getTransferCharacteristics() const                     { return m_transferCharacteristics;              }$/;"	f	class:TComVUI
getTransformIdx	TComDataCU.h	/^  UChar         getTransformIdx               ( UInt uiIdx ) const                                         { return m_puhTrIdx[uiIdx];                  }$/;"	f	class:TComDataCU
getTransformIdx	TComDataCU.h	/^  UChar*        getTransformIdx               ( )                                                          { return m_puhTrIdx;                         }$/;"	f	class:TComDataCU
getTransformShift	TComChromaFormat.h	/^static inline Int getTransformShift(const Int channelBitDepth, const UInt uiLog2TrSize, const Int maxLog2TrDynamicRange)$/;"	f
getTransformSkip	TComDataCU.h	/^  UChar         getTransformSkip              ( UInt uiIdx, ComponentID compID ) const                     { return m_puhTransformSkip[compID][uiIdx];  }$/;"	f	class:TComDataCU
getTransformSkip	TComDataCU.h	/^  UChar*        getTransformSkip              ( ComponentID compID )                                       { return m_puhTransformSkip[compID];         }$/;"	f	class:TComDataCU
getTransformSkipContextEnabledFlag	TComSlice.h	/^  Bool getTransformSkipContextEnabledFlag() const                                      { return m_transformSkipContextEnabledFlag;      }$/;"	f	class:TComSPSRExt
getTransformSkipRotationEnabledFlag	TComSlice.h	/^  Bool getTransformSkipRotationEnabledFlag() const                                     { return m_transformSkipRotationEnabledFlag;     }$/;"	f	class:TComSPSRExt
getTransquantBypassEnabledFlag	TComSlice.h	/^  Bool                   getTransquantBypassEnabledFlag() const                           { return m_TransquantBypassEnabledFlag;         }$/;"	f	class:TComPPS
getUseAMP	TComSlice.h	/^  Bool                   getUseAMP() const                                                               { return m_useAMP;                                                     }$/;"	f	class:TComSPS
getUseChromaQpAdj	TComSlice.h	/^  Bool                        getUseChromaQpAdj() const                              { return m_ChromaQpAdjEnabled;                                  }$/;"	f	class:TComSlice
getUseDQP	TComSlice.h	/^  Bool                   getUseDQP() const                                                { return m_useDQP;                              }$/;"	f	class:TComPPS
getUsePCM	TComSlice.h	/^  Bool                   getUsePCM() const                                                               { return m_usePCM;                                                     }$/;"	f	class:TComSPS
getUseSAO	TComSlice.h	/^  Bool                   getUseSAO() const                                                               { return m_bUseSAO;                                                    }$/;"	f	class:TComSPS
getUseScalingList	TComTrQuant.h	/^  Bool getUseScalingList   (const UInt width, const UInt height, const Bool isTransformSkip){ return m_scalingListEnabledFlag && (!isTransformSkip || ((width == 4) && (height == 4))); };$/;"	f	class:TComTrQuant
getUseStrongIntraSmoothing	TComSlice.h	/^  Bool                   getUseStrongIntraSmoothing() const                                              { return m_useStrongIntraSmoothing;                                    }$/;"	f	class:TComSPS
getUseTransformSkip	TComSlice.h	/^  Bool                   getUseTransformSkip() const                                      { return m_useTransformSkip;                    }$/;"	f	class:TComPPS
getUseWP	TComSlice.h	/^  Bool                   getUseWP() const                                                 { return m_bUseWeightPred;                      }$/;"	f	class:TComPPS
getUseWeightedPrediction	TComSlice.h	/^  Bool                        getUseWeightedPrediction() const                       { return( (m_eSliceType==P_SLICE && testWeightPred()) || (m_eSliceType==B_SLICE && testWeightBiPred()) ); }$/;"	f	class:TComSlice
getUsed	TComSlice.cpp	/^Int TComReferencePictureSet::getUsed(Int bufferNum) const$/;"	f	class:TComReferencePictureSet
getUsedByCurr	TComPic.h	/^  Bool          getUsedByCurr() const            { return m_bUsedByCurr; }$/;"	f	class:TComPic
getUsedByCurrPicLtSPSFlag	TComSlice.h	/^  Bool                   getUsedByCurrPicLtSPSFlag(Int i) const                                          { assert( i < MAX_NUM_LONG_TERM_REF_PICS ); return m_usedByCurrPicLtSPSFlag[i];    }$/;"	f	class:TComSPS
getVPS	TComSlice.h	/^  TComVPS*       getVPS(Int vpsId)                                           { return m_vpsMap.getPS(vpsId); };$/;"	f	class:ParameterSetManager
getVPS	TComSlice.h	/^  const TComVPS*              getVPS() const                                         { return m_pcVPS;                                               }$/;"	f	class:TComSlice
getVPSChangedFlag	TComSlice.h	/^  Bool           getVPSChangedFlag(Int vpsId) const                          { return m_vpsMap.getChangedFlag(vpsId); }$/;"	f	class:ParameterSetManager
getVPSId	TComSlice.h	/^  Int                    getVPSId() const                                                                { return m_VPSId;                                                      }$/;"	f	class:TComSPS
getVPSId	TComSlice.h	/^  Int               getVPSId() const                                     { return m_VPSId;                                                  }$/;"	f	class:TComVPS
getVclHrdParametersPresentFlag	TComSlice.h	/^  Bool    getVclHrdParametersPresentFlag( ) const                                    { return m_vclHrdParametersPresentFlag;                      }$/;"	f	class:TComHRD
getVer	TComMotionInfo.h	/^  Int getVer   () const { return  m_acMv.getVer(); }$/;"	f	class:TComMvField
getVer	TComMv.h	/^  Int   getVer    () const { return m_iVer;          }$/;"	f	class:TComMv
getVideoFormat	TComSlice.h	/^  Int               getVideoFormat() const                                 { return m_videoFormat;                          }$/;"	f	class:TComVUI
getVideoFullRangeFlag	TComSlice.h	/^  Bool              getVideoFullRangeFlag() const                          { return m_videoFullRangeFlag;                   }$/;"	f	class:TComVUI
getVideoSignalTypePresentFlag	TComSlice.h	/^  Bool              getVideoSignalTypePresentFlag() const                  { return m_videoSignalTypePresentFlag;           }$/;"	f	class:TComVUI
getVuiParameters	TComSlice.h	/^  TComVUI*               getVuiParameters()                                                              { return &m_vuiParameters;                                             }$/;"	f	class:TComSPS
getVuiParameters	TComSlice.h	/^  const TComVUI*         getVuiParameters() const                                                        { return &m_vuiParameters;                                             }$/;"	f	class:TComSPS
getVuiParametersPresentFlag	TComSlice.h	/^  Bool                   getVuiParametersPresentFlag() const                                             { return m_vuiParametersPresentFlag;                                   }$/;"	f	class:TComSPS
getWPBiPred	TComSlice.h	/^  Bool                   getWPBiPred() const                                              { return m_useWeightedBiPred;                   }$/;"	f	class:TComPPS
getWidth	TComDataCU.h	/^  UChar         getWidth                      ( UInt uiIdx ) const                                         { return m_puhWidth[uiIdx];                  }$/;"	f	class:TComDataCU
getWidth	TComDataCU.h	/^  UChar*        getWidth                      ( )                                                          { return m_puhWidth;                         }$/;"	f	class:TComDataCU
getWidth	TComPicYuv.h	/^  Int           getWidth          (const ComponentID id) const { return  m_picWidth >> getComponentScaleX(id);   }$/;"	f	class:TComPicYuv
getWidth	TComYuv.h	/^  UInt         getWidth                   (const ComponentID id) const { return m_iWidth >> getComponentScaleX(id);   }$/;"	f	class:TComYuv
getWinUnitX	TComSlice.h	/^  static Int             getWinUnitX (Int chromaFormatIdc)                                               { assert (chromaFormatIdc >= 0 && chromaFormatIdc < NUM_CHROMA_FORMAT); return m_winUnitX[chromaFormatIdc]; }$/;"	f	class:TComSPS
getWinUnitY	TComSlice.h	/^  static Int             getWinUnitY (Int chromaFormatIdc)                                               { assert (chromaFormatIdc >= 0 && chromaFormatIdc < NUM_CHROMA_FORMAT); return m_winUnitY[chromaFormatIdc]; }$/;"	f	class:TComSPS
getWindowBottomOffset	TypeDef.h	/^  Int  getWindowBottomOffset() const  { return m_enabledFlag ? m_winBottomOffset: 0;   }$/;"	f	class:Window
getWindowEnabledFlag	TypeDef.h	/^  Bool getWindowEnabledFlag() const   { return m_enabledFlag;                          }$/;"	f	class:Window
getWindowLeftOffset	TypeDef.h	/^  Int  getWindowLeftOffset() const    { return m_enabledFlag ? m_winLeftOffset : 0;    }$/;"	f	class:Window
getWindowRightOffset	TypeDef.h	/^  Int  getWindowRightOffset() const   { return m_enabledFlag ? m_winRightOffset : 0;   }$/;"	f	class:Window
getWindowTopOffset	TypeDef.h	/^  Int  getWindowTopOffset() const     { return m_enabledFlag ? m_winTopOffset : 0;     }$/;"	f	class:Window
getWpAcDcParam	TComSlice.cpp	/^Void  TComSlice::getWpAcDcParam(WPACDCParam *&wp)$/;"	f	class:TComSlice
getWpScaling	TComSlice.cpp	/^Void  TComSlice::getWpScaling( RefPicList e, Int iRefIdx, WPScalingParam *&wp )$/;"	f	class:TComSlice
getWpScaling	TComWeightPrediction.cpp	/^Void TComWeightPrediction::getWpScaling(       TComDataCU *const pcCU,$/;"	f	class:TComWeightPrediction
getZScanIndex	Debug.cpp	/^UInt getZScanIndex(const UInt x, const UInt y)$/;"	f
getZorderIdxInCtu	TComDataCU.h	/^  UInt          getZorderIdxInCtu             ( ) const                                                    { return m_absZIdxInCtu;                     }$/;"	f	class:TComDataCU
golombRiceAdaptationStatistics	TComTrQuant.h	/^  Int golombRiceAdaptationStatistics[RExt__GOLOMB_RICE_ADAPTATION_STATISTICS_SETS];$/;"	m	struct:__anon3
grainSynthesizeAndBlend	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::grainSynthesizeAndBlend(TComPicYuv* pGrainBuf, Bool isIdrPic)$/;"	f	class:SEIFilmGrainSynthesizer
grainValidateParams	SEIFilmGrainSynthesizer.cpp	/^uint8_t SEIFilmGrainSynthesizer::grainValidateParams()$/;"	f	class:SEIFilmGrainSynthesizer
hasDPBPerCtuData	TComPicSym.h	/^  Bool                 hasDPBPerCtuData() const                            { return (m_dpbPerCtuData!=0); };$/;"	f	class:TComPicSym
hasEqualMotion	TComDataCU.cpp	/^Bool TComDataCU::hasEqualMotion( UInt uiAbsPartIdx, const TComDataCU* pcCandCU, UInt uiCandAbsPartIdx ) const$/;"	f	class:TComDataCU
hash	TypeDef.h	/^  std::vector<UChar> hash;$/;"	m	struct:TComPictureHash
hashToString	TComPicYuvMD5.cpp	/^std::string hashToString(const TComPictureHash &digest, Int numChar)$/;"	f
hbrFactorEqn	ProfileLevelTierFeatures.h	/^  HBRFACTOREQN             hbrFactorEqn;$/;"	m	struct:ProfileFeatures
height	TComRectangle.h	/^  UInt height;$/;"	m	struct:TComRectangle
heightInGroups	TypeDef.h	/^        UInt             heightInGroups;$/;"	m	struct:TUEntropyCodingParameters
horFlip	SEI.h	/^  Bool horFlip;$/;"	m	class:SEIDisplayOrientation
horRange	SEI.h	/^    UInt horRange;$/;"	m	struct:SEIOmniViewport::OmniViewport
hoursFlag	TypeDef.h	/^  Bool hoursFlag;$/;"	m	struct:TComSEITimeSet
hoursValue	TypeDef.h	/^  Int  hoursValue;$/;"	m	struct:TComSEITimeSet
iAC	TComSlice.h	/^  Int64 iAC;$/;"	m	struct:WPACDCParam
iCols	TComRdCost.h	/^  Int                   iCols;$/;"	m	class:DistParam
iDC	TComSlice.h	/^  Int64 iDC;$/;"	m	struct:WPACDCParam
iN	TComMotionInfo.h	/^  Int    iN;                                \/\/\/< number of motion vector predictor candidates$/;"	m	struct:_AMVPInfo
iNNZbeforePos0	TComTrQuant.cpp	/^  Int    iNNZbeforePos0;$/;"	m	struct:__anon1	file:
iOffset	TComSlice.h	/^  Int  iOffset;$/;"	m	struct:WPScalingParam
iRows	TComRdCost.h	/^  Int                   iRows;$/;"	m	class:DistParam
iStep	TComRdCost.h	/^  Int                   iStep;$/;"	m	class:DistParam
iStrideCur	TComRdCost.h	/^  Int                   iStrideCur;$/;"	m	class:DistParam
iStrideOrg	TComRdCost.h	/^  Int                   iStrideOrg;$/;"	m	class:DistParam
iSubShift	TComRdCost.h	/^  Int             iSubShift;$/;"	m	class:DistParam
iWeight	TComSlice.h	/^  Int  iWeight;$/;"	m	struct:WPScalingParam
indentNewLines	Debug.cpp	/^std::string indentNewLines(const std::string &input, const UInt indentBy)$/;"	f
init	ContextModel.cpp	/^Void ContextModel::init( Int qp, Int initValue )$/;"	f	class:ContextModel
init	TComRdCost.cpp	/^Void TComRdCost::init()$/;"	f	class:TComRdCost
init	TComTrQuant.cpp	/^Void TComTrQuant::init(   UInt  uiMaxTrSize,$/;"	f	class:TComTrQuant
initBuffer	ContextModel3DBuffer.cpp	/^Void ContextModel3DBuffer::initBuffer( SliceType sliceType, Int qp, UChar* ctxModel )$/;"	f	class:ContextModel3DBuffer
initCtu	TComDataCU.cpp	/^Void TComDataCU::initCtu( TComPic* pcPic, UInt ctuRsAddr )$/;"	f	class:TComDataCU
initEqualRef	TComSlice.cpp	/^Void TComSlice::initEqualRef()$/;"	f	class:TComSlice
initEstData	TComDataCU.cpp	/^Void TComDataCU::initEstData( const UInt uiDepth, const Int qp, const Bool bTransquantBypass )$/;"	f	class:TComDataCU
initIntraPatternChType	TComPattern.cpp	/^Void TComPrediction::initIntraPatternChType( TComTU &rTu, const ComponentID compID, const Bool bFilterRefSamples DEBUG_STRING_FN_DECLARE(sDebug))$/;"	f	class:TComPrediction
initPattern	TComPattern.cpp	/^Void TComPattern::initPattern(Pel* piY,$/;"	f	class:TComPattern
initROM	TComRom.cpp	/^Void initROM()$/;"	f
initRasterToPelXY	TComRom.cpp	/^Void initRasterToPelXY ( UInt uiMaxCUWidth, UInt uiMaxCUHeight, UInt uiMaxDepth )$/;"	f
initRasterToZscan	TComRom.cpp	/^Void initRasterToZscan ( UInt uiMaxCUWidth, UInt uiMaxCUHeight, UInt uiMaxDepth )$/;"	f
initScalingList	TComTrQuant.cpp	/^Void TComTrQuant::initScalingList()$/;"	f	class:TComTrQuant
initSlice	TComSlice.cpp	/^Void TComSlice::initSlice()$/;"	f	class:TComSlice
initSliceQpDelta	TComTrQuant.cpp	/^Void TComTrQuant::initSliceQpDelta()$/;"	f	class:TComTrQuant
initSubCU	TComDataCU.cpp	/^Void TComDataCU::initSubCU( TComDataCU* pcCU, UInt uiPartUnitIdx, UInt uiDepth, Int qp )$/;"	f	class:TComDataCU
initTempBuff	TComPrediction.cpp	/^Void TComPrediction::initTempBuff(ChromaFormat chromaFormatIDC)$/;"	f	class:TComPrediction
initWpAcDcParam	TComSlice.cpp	/^Void  TComSlice::initWpAcDcParam()$/;"	f	class:TComSlice
initWpScaling	TComSlice.cpp	/^Void  TComSlice::initWpScaling(const TComSPS *sps)$/;"	f	class:TComSlice
initZscanToRaster	TComRom.cpp	/^Void initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt*& rpuiCurrIdx )$/;"	f
insertAt	TComBitStream.cpp	/^Void TComOutputBitstream::insertAt(const TComOutputBitstream& src, UInt pos)$/;"	f	class:TComOutputBitstream
intensityInterval	SEIFilmGrainSynthesizer.h	/^  int16_t intensityInterval[MAX_NUM_COMPONENT][MAX_NUM_INTENSITIES];$/;"	m	struct:GrainSynthesisStruct_t
intensityIntervalLowerBound	SEI.h	/^    UChar intensityIntervalLowerBound;$/;"	m	struct:SEIFilmGrainCharacteristics::CompModelIntensityValues
intensityIntervalUpperBound	SEI.h	/^    UChar intensityIntervalUpperBound;$/;"	m	struct:SEIFilmGrainCharacteristics::CompModelIntensityValues
intensityValues	SEI.h	/^    std::vector<CompModelIntensityValues> intensityValues;$/;"	m	struct:SEIFilmGrainCharacteristics::CompModel
invRdpcmNxN	TComTrQuant.cpp	/^Void TComTrQuant::invRdpcmNxN( TComTU& rTu, const ComponentID compID, Pel* pcResidual, const UInt uiStride )$/;"	f	class:TComTrQuant
invRecurTransformNxN	TComTrQuant.cpp	/^Void TComTrQuant::invRecurTransformNxN( const ComponentID compID,$/;"	f	class:TComTrQuant
invTrSkipDeQuantOneSample	TComTrQuant.cpp	/^Void TComTrQuant::invTrSkipDeQuantOneSample( TComTU &rTu, ComponentID compID, TCoeff inSample, Pel &reconSample, const QpParam &cQP, UInt uiPos )$/;"	f	class:TComTrQuant
invTransformNxN	TComTrQuant.cpp	/^Void TComTrQuant::invTransformNxN(      TComTU        &rTu,$/;"	f	class:TComTrQuant
invertQuantOffsets	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::invertQuantOffsets(ComponentID compIdx, Int typeIdc, Int typeAuxInfo, Int* dstOffsets, Int* srcOffsets)$/;"	f	class:TComSampleAdaptiveOffset
isAboveAvailable	TComPattern.cpp	/^Int isAboveAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT, UInt uiPartIdxRT, Bool *bValidFlags )$/;"	f
isAboveLeftAvailable	TComPattern.cpp	/^Bool isAboveLeftAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT )$/;"	f
isAboveRightAvailable	TComPattern.cpp	/^Int isAboveRightAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT, UInt uiPartIdxRT, Bool *bValidFlags )$/;"	f
isAlignedBins	TComCodingStatistics.h	/^static inline Bool isAlignedBins(TComCodingStatisticsType statT) { return statT==STATS__CABAC_BITS__ALIGNED_SIGN_BIT || statT==STATS__CABAC_BITS__ALIGNED_ESCAPE_BITS; }$/;"	f
isBelowLeftAvailable	TComPattern.cpp	/^Int isBelowLeftAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT, UInt uiPartIdxLB, Bool *bValidFlags )$/;"	f
isBipredRestriction	TComDataCU.cpp	/^Bool TComDataCU::isBipredRestriction(UInt puIdx) const$/;"	f	class:TComDataCU
isChroma	TComChromaFormat.h	/^static inline Bool        isChroma                  (const ChannelType id)                         { return (id!=CHANNEL_TYPE_LUMA);                                    }$/;"	f
isChroma	TComChromaFormat.h	/^static inline Bool        isChroma                  (const ComponentID id)                         { return (id!=COMPONENT_Y);                                          }$/;"	f
isChromaEnabled	TComChromaFormat.h	/^static inline Bool        isChromaEnabled           (const ChromaFormat fmt)                       { return  fmt!=CHROMA_400;                                           }$/;"	f
isDiffMER	TComDataCU.cpp	/^Bool TComDataCU::isDiffMER(Int xN, Int yN, Int xP, Int yP) const$/;"	f	class:TComDataCU
isEnabled	TypeDef.h	/^  Bool isEnabled() const { return enabled; }$/;"	f	struct:WCGChromaQPControl
isEnabled	TypeDef.h	/^  Bool isEnabled() const { return mode!=LUMALVL_TO_DQP_DISABLED; }$/;"	f	struct:LumaLevelToDeltaQPMapping
isEqualCol	TComDataCU.h	/^  static inline Bool isEqualCol( Int addrA, Int addrB, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
isEqualRef	TComSlice.h	/^  Bool                        isEqualRef( RefPicList e, Int iRefIdx1, Int iRefIdx2 )$/;"	f	class:TComSlice
isEqualRow	TComDataCU.h	/^  static inline Bool isEqualRow( Int addrA, Int addrB, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
isEqualRowOrCol	TComDataCU.h	/^  static inline Bool isEqualRowOrCol( Int addrA, Int addrB, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
isField	TComPic.h	/^   Bool              isField() const                      {return m_isField;}$/;"	f	class:TComPic
isFirstAbsZorderIdxInDepth	TComDataCU.cpp	/^Bool TComDataCU::isFirstAbsZorderIdxInDepth (UInt uiAbsPartIdx, UInt uiDepth) const$/;"	f	class:TComDataCU
isIRAP	TComSlice.h	/^  Bool                        isIRAP() const                                         { return (getNalUnitType() >= 16) && (getNalUnitType() <= 23);  }$/;"	f	class:TComSlice
isInter	TComDataCU.h	/^  Bool          isInter                       ( UInt uiPartIdx ) const                                     { return m_pePredMode[ uiPartIdx ] == MODE_INTER; }$/;"	f	class:TComDataCU
isInter	TComPicSym.h	/^    Bool isInter(const UInt absPartAddr)                const { return m_pePredMode[absPartAddr] == MODE_INTER; }$/;"	f	struct:TComPicSym::DPBPerCtuData
isInterB	TComSlice.h	/^  Bool                        isInterB() const                                       { return m_eSliceType == B_SLICE;                               }$/;"	f	class:TComSlice
isInterP	TComSlice.h	/^  Bool                        isInterP() const                                       { return m_eSliceType == P_SLICE;                               }$/;"	f	class:TComSlice
isIntra	TComDataCU.h	/^  Bool          isIntra                       ( UInt uiPartIdx ) const                                     { return m_pePredMode[ uiPartIdx ] == MODE_INTRA; }$/;"	f	class:TComDataCU
isIntra	TComSlice.h	/^  Bool                        isIntra() const                                        { return m_eSliceType == I_SLICE;                               }$/;"	f	class:TComSlice
isLastColumnCTUInTile	TComDataCU.cpp	/^Bool TComDataCU::isLastColumnCTUInTile() const$/;"	f	class:TComDataCU
isLastSubCUOfCtu	TComDataCU.cpp	/^Bool TComDataCU::isLastSubCUOfCtu(const UInt absPartIdx) const$/;"	f	class:TComDataCU
isLeftAvailable	TComPattern.cpp	/^Int isLeftAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT, UInt uiPartIdxLB, Bool *bValidFlags )$/;"	f
isLosslessCoded	TComDataCU.cpp	/^Bool TComDataCU::isLosslessCoded(UInt absPartIdx) const$/;"	f	class:TComDataCU
isLuma	TComChromaFormat.h	/^static inline Bool        isLuma                    (const ChannelType id)                         { return (id==CHANNEL_TYPE_LUMA);                                    }$/;"	f
isLuma	TComChromaFormat.h	/^static inline Bool        isLuma                    (const ComponentID id)                         { return (id==COMPONENT_Y);                                          }$/;"	f
isNonTransformedResidualRotated	TComTU.cpp	/^Bool TComTU::isNonTransformedResidualRotated(const ComponentID compID)$/;"	f	class:TComTU
isRDPCMEnabled	TComDataCU.h	/^  Bool          isRDPCMEnabled                ( UInt uiAbsPartIdx ) const                                  { return getSlice()->getSPS()->getSpsRangeExtension().getRdpcmEnabledFlag(isIntra(uiAbsPartIdx) ? RDPCM_SIGNAL_IMPLICIT : RDPCM_SIGNAL_EXPLICIT); }$/;"	f	class:TComDataCU
isReferenceNalu	TComSlice.h	/^  Bool                        isReferenceNalu() const                                { return ((getNalUnitType() <= NAL_UNIT_RESERVED_VCL_R15) && (getNalUnitType()%2 != 0)) || ((getNalUnitType() >= NAL_UNIT_CODED_SLICE_BLA_W_LP) && (getNalUnitType() <= NAL_UNIT_RESERVED_IRAP_VCL23) ); }$/;"	f	class:TComSlice
isReferenced	TComSlice.h	/^  Bool                        isReferenced() const                                   { return m_bRefenced;                                           }$/;"	f	class:TComSlice
isSei	NAL.h	/^  Bool isSei()$/;"	f	struct:NALUnit
isSet	Debug.h	/^  Bool                isSet()       const       { return m_bSet;    }$/;"	f	class:EnvVar
isSkipped	TComDataCU.cpp	/^Bool TComDataCU::isSkipped( UInt uiPartIdx ) const$/;"	f	class:TComDataCU
isSlice	NAL.h	/^  Bool isSlice()$/;"	f	struct:NALUnit
isStepwiseTemporalLayerSwitchingPointCandidate	TComSlice.cpp	/^Bool TComSlice::isStepwiseTemporalLayerSwitchingPointCandidate(TComList<TComPic*>& rcListPic)$/;"	f	class:TComSlice
isTemporalLayerSwitchingPoint	TComSlice.cpp	/^Bool TComSlice::isTemporalLayerSwitchingPoint(TComList<TComPic*>& rcListPic)$/;"	f	class:TComSlice
isTopField	TComPic.h	/^   Bool              isTopField()                         {return m_isTop;}$/;"	f	class:TComPic
isTrue	Debug.h	/^  Bool                isTrue()      const       { return m_iVal!=0; }$/;"	f	class:EnvVar
isVcl	NAL.h	/^  Bool isVcl()$/;"	f	struct:NALUnit
isZeroCol	TComDataCU.h	/^  static inline Bool isZeroCol( Int addr, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
isZeroRow	TComDataCU.h	/^  static inline Bool isZeroRow( Int addr, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
label	SEI.h	/^    std::string label;           \/\/ only valid if bLabelValid$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionLabel
labelValid	SEI.h	/^    Bool        labelValid;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionLabel
lastXBits	TComTrQuant.h	/^  Int lastXBits[MAX_NUM_CHANNEL_TYPE][LAST_SIGNIFICANT_GROUPS];$/;"	m	struct:__anon3
lastYBits	TComTrQuant.h	/^  Int lastYBits[MAX_NUM_CHANNEL_TYPE][LAST_SIGNIFICANT_GROUPS];$/;"	m	struct:__anon3
leftOffset	SEI.h	/^    Int leftOffset;$/;"	m	struct:SEIPanScanRect::PanScanRect
leftShift	CommonDef.h	/^template <typename ValueType> inline ValueType leftShift       (const ValueType value, const Int shift) { return (shift >= 0) ? ( value                                  << shift) : ( value                                   >> -shift); }$/;"	f
leftShift_round	CommonDef.h	/^template <typename ValueType> inline ValueType leftShift_round (const ValueType value, const Int shift) { return (shift >= 0) ? ( value                                  << shift) : ((value + (ValueType(1) << (-shift - 1))) >> -shift); }$/;"	f
lessThanCol	TComDataCU.h	/^  static inline Bool lessThanCol( Int addr, Int val, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
lessThanRow	TComDataCU.h	/^  static inline Bool lessThanRow( Int addr, Int val, Int numUnitsPerRow )$/;"	f	namespace:RasterAddress
level	ProfileLevelTierFeatures.h	/^  Level::Name level;$/;"	m	struct:LevelTierFeatures
lineWrap	Debug.cpp	/^std::string lineWrap(const std::string &input, const UInt maximumLineLength)$/;"	f
linkToWithOffset	TComMotionInfo.h	/^  Void linkToWithOffset( TComCUMvField const * src, Int offset )$/;"	f	class:TComCUMvField
loopFilterPic	TComLoopFilter.cpp	/^Void TComLoopFilter::loopFilterPic( TComPic* pcPic )$/;"	f	class:TComLoopFilter
lowDelayHrdFlag	TComSlice.h	/^  Bool lowDelayHrdFlag;$/;"	m	struct:HrdSubLayerInfo
mAbsPartIdxCU	TComTU.h	/^    UInt          mAbsPartIdxCU;$/;"	m	class:TComTU
mAbsPartIdxStep	TComTU.h	/^    UInt          mAbsPartIdxStep;$/;"	m	class:TComTU
mAbsPartIdxTURelCU	TComTU.h	/^    UInt          mAbsPartIdxTURelCU;$/;"	m	class:TComTU
mChromaFormat	TComTU.h	/^    ChromaFormat  mChromaFormat;$/;"	m	class:TComTU
mCodeAll	TComTU.h	/^    Bool          mCodeAll[MAX_NUM_COMPONENT];$/;"	m	class:TComTU
mCuDepth	TComTU.h	/^    UInt          mCuDepth;$/;"	m	class:TComTU
mLog2TrLumaSize	TComTU.h	/^    UInt          mLog2TrLumaSize;$/;"	m	class:TComTU
mOffsets	TComTU.h	/^    UInt          mOffsets[MAX_NUM_COMPONENT];$/;"	m	class:TComTU
mOrigWidth	TComTU.h	/^    UInt          mOrigWidth[MAX_NUM_COMPONENT];$/;"	m	class:TComTU
mRect	TComTU.h	/^    TComRectangle mRect[MAX_NUM_COMPONENT];$/;"	m	class:TComTU
mSection	TComTU.h	/^    UInt          mSection;$/;"	m	class:TComTU
mSplitMode	TComTU.h	/^    TU_SPLIT_MODE mSplitMode;$/;"	m	class:TComTU
mTrDepthRelCU	TComTU.h	/^    UInt          mTrDepthRelCU[MAX_NUM_COMPONENT];$/;"	m	class:TComTU
m_ArlCoeffIsAliasedAllocation	TComDataCU.h	/^  Bool          m_ArlCoeffIsAliasedAllocation;          \/\/\/< ARL coefficient buffer is an alias of the global buffer and must not be free()'d$/;"	m	class:TComDataCU
m_CUMvField	TComPicSym.h	/^    TComCUMvField  m_CUMvField[NUM_REF_PIC_LIST_01];$/;"	m	struct:TComPicSym::DPBPerCtuData
m_CUTransquantBypass	TComDataCU.h	/^  Bool*         m_CUTransquantBypass;                   \/\/\/< array of cu_transquant_bypass flags$/;"	m	class:TComDataCU
m_ChromaQpAdj	TComDataCU.h	/^  UChar*        m_ChromaQpAdj;                          \/\/\/< array of chroma QP adjustments (indexed). when value = 0, cu_chroma_qp_offset_flag=0; when value>0, indicates cu_chroma_qp_offset_flag=1 and cu_chroma_qp_offset_idx=value-1$/;"	m	class:TComDataCU
m_ChromaQpAdjEnabled	TComSlice.h	/^  Bool                       m_ChromaQpAdjEnabled;$/;"	m	class:TComSlice
m_ChromaQpAdjTableIncludingNullEntry	TComSlice.h	/^  ChromaQpAdj      m_ChromaQpAdjTableIncludingNullEntry[1+MAX_QP_OFFSET_LIST_SIZE]; \/\/!< Array includes entry [0] for the null offset used when cu_chroma_qp_offset_flag=0, and entries [cu_chroma_qp_offset_idx+1...] otherwise$/;"	m	class:TComPPSRExt
m_HRD	TComSlice.h	/^  HrdSubLayerInfo m_HRD[MAX_TLAYER];$/;"	m	class:TComHRD
m_LFCrossSliceBoundaryFlag	TComSlice.h	/^  Bool                       m_LFCrossSliceBoundaryFlag;$/;"	m	class:TComSlice
m_MCTSExtractionInfoSets	SEI.h	/^    std::vector<MCTSExtractionInfo> m_MCTSExtractionInfoSets;$/;"	m	class:SEIMCTSExtractionInfoSet
m_OutputFlagPresentFlag	TComSlice.h	/^  Bool             m_OutputFlagPresentFlag;             \/\/!< Indicates the presence of output_flag in slice header$/;"	m	class:TComPPS
m_POC	TComSlice.h	/^  Int  m_POC[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_PPSId	TComSlice.h	/^  Int              m_PPSId;                    \/\/ pic_parameter_set_id$/;"	m	class:TComPPS
m_PicOutputFlag	TComSlice.h	/^  Bool                       m_PicOutputFlag;        \/\/\/< pic_output_flag$/;"	m	class:TComSlice
m_RPSList	TComSlice.h	/^  TComRPSList      m_RPSList;$/;"	m	class:TComSPS
m_RefPicListModification	TComSlice.h	/^  TComRefPicListModification m_RefPicListModification;$/;"	m	class:TComSlice
m_RefPicSetIdxL0	TComSlice.h	/^  UInt m_RefPicSetIdxL0[REF_PIC_LIST_NUM_IDX];$/;"	m	class:TComRefPicListModification
m_RefPicSetIdxL1	TComSlice.h	/^  UInt m_RefPicSetIdxL1[REF_PIC_LIST_NUM_IDX];$/;"	m	class:TComRefPicListModification
m_SEIs	TComPic.h	/^  SEIMessages  m_SEIs; \/\/\/< Any SEI messages that have been received.  If !NULL we own the object.$/;"	m	class:TComPic
m_SPSId	TComSlice.h	/^  Int              m_SPSId;                    \/\/ seq_parameter_set_id$/;"	m	class:TComPPS
m_SPSId	TComSlice.h	/^  Int              m_SPSId;$/;"	m	class:TComSPS
m_SPSTemporalMVPEnabledFlag	TComSlice.h	/^  Bool             m_SPSTemporalMVPEnabledFlag;$/;"	m	class:TComSPS
m_TransquantBypassEnabledFlag	TComSlice.h	/^  Bool             m_TransquantBypassEnabledFlag;       \/\/!< Indicates presence of cu_transquant_bypass_flag in CUs.$/;"	m	class:TComPPS
m_VPSId	TComSlice.h	/^  Int                   m_VPSId;$/;"	m	class:TComVPS
m_VPSId	TComSlice.h	/^  Int              m_VPSId;$/;"	m	class:TComSPS
m_aapbEdgeFilter	TComLoopFilter.h	/^  Bool*     m_aapbEdgeFilter[NUM_EDGE_DIR];$/;"	m	class:TComLoopFilter
m_aapucBS	TComLoopFilter.h	/^  UChar*    m_aapucBS[NUM_EDGE_DIR];         \/\/\/< Bs for [Ver\/Hor][Y\/U\/V][Blk_Idx]$/;"	m	class:TComLoopFilter
m_abEqualRef	TComSlice.h	/^  Bool                       m_abEqualRef  [NUM_REF_PIC_LIST_01][MAX_NUM_REF][MAX_NUM_REF];$/;"	m	class:TComSlice
m_absZIdxInCtu	TComDataCU.h	/^  UInt          m_absZIdxInCtu;                         \/\/\/< absolute address in a CTU. It's Z scan order$/;"	m	class:TComDataCU
m_acCUMvField	TComDataCU.h	/^  TComCUMvField m_acCUMvField[NUM_REF_PIC_LIST_01];     \/\/\/< array of motion vectors.$/;"	m	class:TComDataCU
m_acMv	TComMotionInfo.h	/^  TComMv    m_acMv;$/;"	m	class:TComMvField
m_acMvCand	TComMotionInfo.h	/^  TComMv m_acMvCand[ AMVP_MAX_NUM_CANDS ];  \/\/\/< array of motion vector predictor candidates$/;"	m	struct:_AMVPInfo
m_acYuvPred	TComPrediction.h	/^  TComYuv   m_acYuvPred[NUM_REF_PIC_LIST_01];$/;"	m	class:TComPrediction
m_activeSPSId	TComSlice.h	/^  Int m_activeSPSId; \/\/ -1 for nothing active$/;"	m	class:ParameterSetManager
m_activeVPSId	TComSlice.h	/^  Int m_activeVPSId; \/\/ -1 for nothing active$/;"	m	class:ParameterSetManager
m_afpDistortFunc	TComRdCost.h	/^  FpDistFunc              m_afpDistortFunc[DF_TOTAL_FUNCTIONS]; \/\/ [eDFunc]$/;"	m	class:TComRdCost
m_aiNumRefIdx	TComSlice.h	/^  Int                        m_aiNumRefIdx   [NUM_REF_PIC_LIST_01];    \/\/  for multiple reference of current slice$/;"	m	class:TComSlice
m_aiRefPOCList	TComSlice.h	/^  Int                        m_aiRefPOCList  [NUM_REF_PIC_LIST_01][MAX_NUM_REF+1];$/;"	m	class:TComSlice
m_allLayersFlag	SEI.h	/^  Bool  m_allLayersFlag;                             \/\/value valid if m_nestingOpFlag == 0$/;"	m	class:SEIScalableNesting
m_ambientIlluminance	SEI.h	/^  UInt m_ambientIlluminance;$/;"	m	class:SEIAmbientViewingEnvironment
m_ambientLightX	SEI.h	/^  UShort m_ambientLightX;$/;"	m	class:SEIAmbientViewingEnvironment
m_ambientLightY	SEI.h	/^  UShort m_ambientLightY;$/;"	m	class:SEIAmbientViewingEnvironment
m_annotatedLabels	SEI.h	/^  std::vector<std::pair<AnnotatedRegionLabelIndex,  AnnotatedRegionLabel>  > m_annotatedLabels;$/;"	m	class:SEIAnnotatedRegions
m_annotatedRegions	SEI.h	/^  std::vector<std::pair<AnnotatedRegionObjectIndex, AnnotatedRegionObject> > m_annotatedRegions;$/;"	m	class:SEIAnnotatedRegions
m_annotatedRegionsObjectLabelLang	SEI.h	/^    std::string m_annotatedRegionsObjectLabelLang;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_apSlices	TComPicSym.h	/^  std::deque<TComSlice*> m_apSlices;$/;"	m	class:TComPicSym
m_apcPicYuv	TComPic.h	/^  TComPicYuv*           m_apcPicYuv[NUM_PIC_YUV];$/;"	m	class:TComPic
m_apcRefPicList	TComSlice.h	/^  TComPic*                   m_apcRefPicList [NUM_REF_PIC_LIST_01][MAX_NUM_REF+1];$/;"	m	class:TComSlice
m_apiBuf	TComYuv.h	/^  Pel*    m_apiBuf[MAX_NUM_COMPONENT];$/;"	m	class:TComYuv
m_apiMVPIdx	TComDataCU.h	/^  SChar*        m_apiMVPIdx[NUM_REF_PIC_LIST_01];       \/\/\/< array of motion vector predictor candidates$/;"	m	class:TComDataCU
m_apiMVPNum	TComDataCU.h	/^  SChar*        m_apiMVPNum[NUM_REF_PIC_LIST_01];       \/\/\/< array of number of possible motion vectors predictors$/;"	m	class:TComDataCU
m_apiPicBuf	TComPicYuv.h	/^  Pel*  m_apiPicBuf[MAX_NUM_COMPONENT];             \/\/\/< Buffer (including margin)$/;"	m	class:TComPicYuv
m_arrangementCancelFlag	SEI.h	/^  Bool m_arrangementCancelFlag;$/;"	m	class:SEIFramePacking
m_arrangementCancelFlag	SEI.h	/^  Bool m_arrangementCancelFlag;$/;"	m	class:SEISegmentedRectFramePacking
m_arrangementId	SEI.h	/^  Int  m_arrangementId;$/;"	m	class:SEIFramePacking
m_arrangementPersistenceFlag	SEI.h	/^  Bool m_arrangementPersistenceFlag;$/;"	m	class:SEIFramePacking
m_arrangementPersistenceFlag	SEI.h	/^  Bool m_arrangementPersistenceFlag;$/;"	m	class:SEISegmentedRectFramePacking
m_arrangementReservedByte	SEI.h	/^  Int  m_arrangementReservedByte;$/;"	m	class:SEIFramePacking
m_arrangementType	SEI.h	/^  Int  m_arrangementType;$/;"	m	class:SEIFramePacking
m_aspectRatioIdc	TComSlice.h	/^  Int        m_aspectRatioIdc;$/;"	m	class:TComVUI
m_aspectRatioInfoPresentFlag	TComSlice.h	/^  Bool       m_aspectRatioInfoPresentFlag;$/;"	m	class:TComVUI
m_auCpbRemovalDelay	SEI.h	/^  UInt  m_auCpbRemovalDelay;$/;"	m	class:SEIPictureTiming
m_auCpbRemovalDelayDelta	SEI.h	/^  UInt m_auCpbRemovalDelayDelta;$/;"	m	class:SEIBufferingPeriod
m_aucIntraFilter	TComPrediction.cpp	/^const UChar TComPrediction::m_aucIntraFilter[MAX_NUM_CHANNEL_TYPE][MAX_INTRA_FILTER_DEPTHS] =$/;"	m	class:TComPrediction	file:
m_aucIntraFilter	TComPrediction.h	/^  static const UChar m_aucIntraFilter[MAX_NUM_CHANNEL_TYPE][MAX_INTRA_FILTER_DEPTHS];$/;"	m	class:TComPrediction
m_aucNextStateLPS	ContextModel.cpp	/^const UChar ContextModel::m_aucNextStateLPS[ ContextModel::m_totalStates ] =$/;"	m	class:ContextModel	file:
m_aucNextStateLPS	ContextModel.h	/^  static const  UChar m_aucNextStateLPS[m_totalStates];$/;"	m	class:ContextModel
m_aucNextStateMPS	ContextModel.cpp	/^const UChar ContextModel::m_aucNextStateMPS[ ContextModel::m_totalStates ] =$/;"	m	class:ContextModel	file:
m_aucNextStateMPS	ContextModel.h	/^  static const  UChar m_aucNextStateMPS[m_totalStates];$/;"	m	class:ContextModel
m_bCheckLDC	TComSlice.h	/^  Bool                       m_bCheckLDC;$/;"	m	class:TComSlice
m_bCheckLTMSB	TComPic.h	/^  Bool                  m_bCheckLTMSB;$/;"	m	class:TComPic
m_bCheckLTMSB	TComSlice.h	/^  Bool m_bCheckLTMSB[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_bConstrainedIntraPred	TComSlice.h	/^  Bool             m_bConstrainedIntraPred;    \/\/ constrained_intra_pred_flag$/;"	m	class:TComPPS
m_bDecSubCu	TComDataCU.h	/^  Bool          m_bDecSubCu;                            \/\/\/< indicates decoder-mode$/;"	m	class:TComDataCU
m_bEnc	TComTrQuant.h	/^  Bool     m_bEnc;$/;"	m	class:TComTrQuant
m_bFinalized	TComSlice.h	/^  Bool                       m_bFinalized;$/;"	m	class:TComSlice
m_bIsBorderExtended	TComPicYuv.h	/^  Bool  m_bIsBorderExtended;$/;"	m	class:TComPicYuv
m_bIsLongTerm	TComPic.h	/^  Bool                  m_bIsLongTerm;            \/\/  IS long term picture$/;"	m	class:TComPic
m_bIsMergeAMP	TComDataCU.h	/^  Bool          m_bIsMergeAMP;$/;"	m	class:TComDataCU
m_bIsMonochrome	SEI.h	/^  Bool             m_bIsMonochrome;$/;"	m	class:SEIPostFilterHint
m_bIsUsedAsLongTerm	TComSlice.h	/^  Bool                       m_bIsUsedAsLongTerm[NUM_REF_PIC_LIST_01][MAX_NUM_REF+1];$/;"	m	class:TComSlice
m_bLFCrossTileBoundary	TComLoopFilter.h	/^  Bool      m_bLFCrossTileBoundary;$/;"	m	class:TComLoopFilter
m_bLMvdL1Zero	TComSlice.h	/^  Bool                       m_bLMvdL1Zero;$/;"	m	class:TComSlice
m_bLongTermRefsPresent	TComSlice.h	/^  Bool             m_bLongTermRefsPresent;$/;"	m	class:TComSPS
m_bNeededForOutput	TComPic.h	/^  Bool                  m_bNeededForOutput;$/;"	m	class:TComPic
m_bPCMFilterDisableFlag	TComSlice.h	/^  Bool             m_bPCMFilterDisableFlag;$/;"	m	class:TComSPS
m_bPrevSceneIdValidFlag	SEI.h	/^  Bool m_bPrevSceneIdValidFlag;$/;"	m	class:SEISceneInfo
m_bReconstructed	TComPic.h	/^  Bool                  m_bReconstructed;$/;"	m	class:TComPic
m_bRefenced	TComSlice.h	/^  Bool                       m_bRefenced;$/;"	m	class:TComSlice
m_bSceneInfoPresentFlag	SEI.h	/^  Bool m_bSceneInfoPresentFlag;$/;"	m	class:SEISceneInfo
m_bSet	Debug.h	/^  Bool        m_bSet;$/;"	m	class:EnvVar
m_bSliceChromaQpFlag	TComSlice.h	/^  Bool             m_bSliceChromaQpFlag;       \/\/ slicelevel_chroma_qp_flag$/;"	m	class:TComPPS
m_bTLayerSwitchingFlag	TComSlice.h	/^  Bool                       m_bTLayerSwitchingFlag;$/;"	m	class:TComSlice
m_bTemporalIdNestingFlag	TComSlice.h	/^  Bool                  m_bTemporalIdNestingFlag;$/;"	m	class:TComVPS
m_bTemporalIdNestingFlag	TComSlice.h	/^  Bool             m_bTemporalIdNestingFlag; \/\/ temporal_id_nesting_flag$/;"	m	class:TComSPS
m_bTestWeightBiPred	TComSlice.h	/^  Bool                       m_bTestWeightBiPred;$/;"	m	class:TComSlice
m_bTestWeightPred	TComSlice.h	/^  Bool                       m_bTestWeightPred;$/;"	m	class:TComSlice
m_bUseAdaptQpSelect	TComTrQuant.h	/^  Bool     m_bUseAdaptQpSelect;$/;"	m	class:TComTrQuant
m_bUseSAO	TComSlice.h	/^  Bool             m_bUseSAO;$/;"	m	class:TComSPS
m_bUseWeightPred	TComSlice.h	/^  Bool             m_bUseWeightPred;                    \/\/!< Use of Weighting Prediction (P_SLICE)$/;"	m	class:TComPPS
m_bUsedByCurr	TComPic.h	/^  Bool                  m_bUsedByCurr;            \/\/  Used by current picture$/;"	m	class:TComPic
m_binsCoded	ContextModel.h	/^  UInt          m_binsCoded;$/;"	m	class:ContextModel
m_bitDepth	SEIFilmGrainSynthesizer.h	/^  uint8_t                      m_bitDepth;$/;"	m	class:SEIFilmGrainSynthesizer
m_bitDepth	TComPattern.h	/^  Int   m_bitDepth;$/;"	m	class:TComPattern
m_bitDepthConstraintValue	TComSlice.h	/^  UInt              m_bitDepthConstraintValue;$/;"	m	class:ProfileTierLevel
m_bitDepths	TComSlice.h	/^  BitDepths        m_bitDepths;$/;"	m	class:TComSPS
m_bitRateScale	TComSlice.h	/^  UInt m_bitRateScale;$/;"	m	class:TComHRD
m_bitStreamSubsetFlag	SEI.h	/^  Bool  m_bitStreamSubsetFlag;$/;"	m	class:SEIScalableNesting
m_bitstreamRestrictionFlag	TComSlice.h	/^  Bool       m_bitstreamRestrictionFlag;$/;"	m	class:TComVUI
m_blendingModeId	SEI.h	/^  UChar     m_blendingModeId;$/;"	m	class:SEIFilmGrainCharacteristics
m_blockHeight	TComRom.cpp	/^  const UInt m_blockWidth, m_blockHeight;$/;"	m	class:ScanGenerator	file:
m_blockWidth	TComRom.cpp	/^  const UInt m_blockWidth, m_blockHeight;$/;"	m	class:ScanGenerator	file:
m_bottomEdgePosInCtus	TComPicSym.h	/^  UInt      m_bottomEdgePosInCtus;$/;"	m	class:TComTile
m_bottom_right_tile_index	SEI.h	/^      std::vector<Int> m_bottom_right_tile_index;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_bpSeqParameterSetId	SEI.h	/^  UInt m_bpSeqParameterSetId;$/;"	m	class:SEIBufferingPeriod
m_brokenLinkFlag	SEI.h	/^  Bool m_brokenLinkFlag;$/;"	m	class:SEIRecoveryPoint
m_cAMVPInfo	TComMotionInfo.h	/^  AMVPInfo  m_cAMVPInfo;$/;"	m	class:TComCUMvField
m_cMvFieldA	TComDataCU.h	/^  TComMvField   m_cMvFieldA;                            \/\/\/< motion vector of position A$/;"	m	class:TComDataCU
m_cMvFieldB	TComDataCU.h	/^  TComMvField   m_cMvFieldB;                            \/\/\/< motion vector of position B$/;"	m	class:TComDataCU
m_cMvFieldC	TComDataCU.h	/^  TComMvField   m_cMvFieldC;                            \/\/\/< motion vector of position C$/;"	m	class:TComDataCU
m_cMvPred	TComDataCU.h	/^  TComMv        m_cMvPred;                              \/\/\/< motion vector predictor$/;"	m	class:TComDataCU
m_cYuvPredTemp	TComPrediction.h	/^  TComYuv   m_cYuvPredTemp;$/;"	m	class:TComPrediction
m_cabacBypassAlignmentEnabledFlag	TComSlice.h	/^  Bool             m_cabacBypassAlignmentEnabledFlag;$/;"	m	class:TComSPSRExt
m_cabacInitFlag	TComSlice.h	/^  Bool                       m_cabacInitFlag;$/;"	m	class:TComSlice
m_cabacInitPresentFlag	TComSlice.h	/^  Bool             m_cabacInitPresentFlag;$/;"	m	class:TComPPS
m_cameraIsoSpeedIdc	SEI.h	/^  Int    m_cameraIsoSpeedIdc;$/;"	m	class:SEIToneMappingInfo
m_cameraIsoSpeedValue	SEI.h	/^  Int    m_cameraIsoSpeedValue;$/;"	m	class:SEIToneMappingInfo
m_cancelFlag	SEI.h	/^    Bool      m_cancelFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_ccvAvgLuminanceValue	SEI.h	/^  UInt    m_ccvAvgLuminanceValue;$/;"	m	class:SEIContentColourVolume
m_ccvAvgLuminanceValuePresentFlag	SEI.h	/^  Bool    m_ccvAvgLuminanceValuePresentFlag;$/;"	m	class:SEIContentColourVolume
m_ccvCancelFlag	SEI.h	/^  Bool    m_ccvCancelFlag;$/;"	m	class:SEIContentColourVolume
m_ccvMaxLuminanceValue	SEI.h	/^  UInt    m_ccvMaxLuminanceValue;$/;"	m	class:SEIContentColourVolume
m_ccvMaxLuminanceValuePresentFlag	SEI.h	/^  Bool    m_ccvMaxLuminanceValuePresentFlag;$/;"	m	class:SEIContentColourVolume
m_ccvMinLuminanceValue	SEI.h	/^  UInt    m_ccvMinLuminanceValue;$/;"	m	class:SEIContentColourVolume
m_ccvMinLuminanceValuePresentFlag	SEI.h	/^  Bool    m_ccvMinLuminanceValuePresentFlag;$/;"	m	class:SEIContentColourVolume
m_ccvPersistenceFlag	SEI.h	/^  Bool    m_ccvPersistenceFlag;$/;"	m	class:SEIContentColourVolume
m_ccvPrimariesPresentFlag	SEI.h	/^  Bool    m_ccvPrimariesPresentFlag;$/;"	m	class:SEIContentColourVolume
m_ccvPrimariesX	SEI.h	/^  Int     m_ccvPrimariesX[MAX_NUM_COMPONENT];$/;"	m	class:SEIContentColourVolume
m_ccvPrimariesY	SEI.h	/^  Int     m_ccvPrimariesY[MAX_NUM_COMPONENT];$/;"	m	class:SEIContentColourVolume
m_chromaCbQpOffset	TComSlice.h	/^  Int              m_chromaCbQpOffset;$/;"	m	class:TComPPS
m_chromaCrQpOffset	TComSlice.h	/^  Int              m_chromaCrQpOffset;$/;"	m	class:TComPPS
m_chromaFilter	TComInterpolationFilter.cpp	/^const TFilterCoeff TComInterpolationFilter::m_chromaFilter[CHROMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS][NTAPS_CHROMA] =$/;"	m	class:TComInterpolationFilter	file:
m_chromaFilter	TComInterpolationFilter.h	/^  static const TFilterCoeff m_chromaFilter[CHROMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS][NTAPS_CHROMA]; \/\/\/< Chroma filter taps$/;"	m	class:TComInterpolationFilter
m_chromaFormat	SEIFilmGrainSynthesizer.h	/^  ChromaFormat                 m_chromaFormat;$/;"	m	class:SEIFilmGrainSynthesizer
m_chromaFormatConstraintValue	TComSlice.h	/^  ChromaFormat      m_chromaFormatConstraintValue;$/;"	m	class:ProfileTierLevel
m_chromaFormatIDC	TComPicYuv.h	/^  ChromaFormat m_chromaFormatIDC;                   \/\/\/< Chroma Format$/;"	m	class:TComPicYuv
m_chromaFormatIDC	TComSampleAdaptiveOffset.h	/^  ChromaFormat m_chromaFormatIDC;$/;"	m	class:TComSampleAdaptiveOffset
m_chromaFormatIDC	TComYuv.h	/^  ChromaFormat m_chromaFormatIDC; \/\/\/\/< Chroma Format$/;"	m	class:TComYuv
m_chromaFormatIdc	TComSlice.h	/^  ChromaFormat     m_chromaFormatIdc;$/;"	m	class:TComSPS
m_chromaLocInfoPresentFlag	TComSlice.h	/^  Bool       m_chromaLocInfoPresentFlag;$/;"	m	class:TComVUI
m_chromaQpOffsetListLen	TComSlice.h	/^  Int              m_chromaQpOffsetListLen; \/\/ size (excludes the null entry used in the following array).$/;"	m	class:TComPPSRExt
m_chromaSampleLocTypeBottomField	TComSlice.h	/^  Int        m_chromaSampleLocTypeBottomField;$/;"	m	class:TComVUI
m_chromaSampleLocTypeTopField	TComSlice.h	/^  Int        m_chromaSampleLocTypeTopField;$/;"	m	class:TComVUI
m_cmpCancelFlag	SEI.h	/^  Bool                  m_cmpCancelFlag;$/;"	m	class:SEICubemapProjection
m_cmpPersistenceFlag	SEI.h	/^  Bool                  m_cmpPersistenceFlag;$/;"	m	class:SEICubemapProjection
m_codedChromaQpAdj	TComDataCU.h	/^  UInt          m_codedChromaQpAdj;$/;"	m	class:TComDataCU
m_codedDataBitDepth	SEI.h	/^  Int    m_codedDataBitDepth;$/;"	m	class:SEIToneMappingInfo
m_codedPivotValue	SEI.h	/^  std::vector<Int> m_codedPivotValue;$/;"	m	class:SEIToneMappingInfo
m_codedQP	TComDataCU.h	/^  SChar         m_codedQP;$/;"	m	class:TComDataCU
m_colFromL0Flag	TComSlice.h	/^  Bool                       m_colFromL0Flag;  \/\/ collocated picture from List0 flag$/;"	m	class:TComSlice
m_colRefIdx	TComSlice.h	/^  UInt                       m_colRefIdx;$/;"	m	class:TComSlice
m_colourDescriptionPresentFlag	TComSlice.h	/^  Bool       m_colourDescriptionPresentFlag;$/;"	m	class:TComVUI
m_colourPrimaries	TComSlice.h	/^  Int        m_colourPrimaries;$/;"	m	class:TComVUI
m_colourRemapBitDepth	SEI.h	/^  Int                 m_colourRemapBitDepth;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapCancelFlag	SEI.h	/^  Bool                m_colourRemapCancelFlag;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapCoeffs	SEI.h	/^  Int                 m_colourRemapCoeffs[3][3];$/;"	m	class:SEIColourRemappingInfo
m_colourRemapFullRangeFlag	SEI.h	/^  Bool                m_colourRemapFullRangeFlag;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapId	SEI.h	/^  UInt                m_colourRemapId;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapInputBitDepth	SEI.h	/^  Int                 m_colourRemapInputBitDepth;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapMatrixCoefficients	SEI.h	/^  Int                 m_colourRemapMatrixCoefficients;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapMatrixPresentFlag	SEI.h	/^  Bool                m_colourRemapMatrixPresentFlag;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapPersistenceFlag	SEI.h	/^  Bool                m_colourRemapPersistenceFlag;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapPrimaries	SEI.h	/^  Int                 m_colourRemapPrimaries;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapTransferFunction	SEI.h	/^  Int                 m_colourRemapTransferFunction;$/;"	m	class:SEIColourRemappingInfo
m_colourRemapVideoSignalInfoPresentFlag	SEI.h	/^  Bool                m_colourRemapVideoSignalInfoPresentFlag;$/;"	m	class:SEIColourRemappingInfo
m_column	TComRom.cpp	/^  UInt m_line, m_column;$/;"	m	class:ScanGenerator	file:
m_compModel	SEI.h	/^  CompModel m_compModel[MAX_NUM_COMPONENT];$/;"	m	class:SEIFilmGrainCharacteristics
m_concatenationFlag	SEI.h	/^  Bool m_concatenationFlag;$/;"	m	class:SEIBufferingPeriod
m_conformanceWindow	TComSlice.h	/^  Window           m_conformanceWindow;$/;"	m	class:TComSPS
m_constituentPictureMatchingFlag	SEI.h	/^  Bool                  m_constituentPictureMatchingFlag;$/;"	m	class:SEIRegionWisePacking
m_contentInterpretationType	SEI.h	/^  Int  m_contentInterpretationType;$/;"	m	class:SEIFramePacking
m_contentInterpretationType	SEI.h	/^  Int  m_contentInterpretationType;$/;"	m	class:SEISegmentedRectFramePacking
m_contextModel	ContextModel3DBuffer.h	/^  ContextModel* m_contextModel; \/\/\/< array of context models$/;"	m	class:ContextModel3DBuffer
m_costMode	TComRdCost.h	/^  CostMode                m_costMode;$/;"	m	class:TComRdCost
m_cpbDelayOffset	SEI.h	/^  UInt m_cpbDelayOffset;$/;"	m	class:SEIBufferingPeriod
m_cpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt m_cpbRemovalDelayLengthMinus1;$/;"	m	class:TComHRD
m_cpbSizeScale	TComSlice.h	/^  UInt m_cpbSizeScale;$/;"	m	class:TComHRD
m_cprmsPresentFlag	TComSlice.h	/^  std::vector<Bool>     m_cprmsPresentFlag;$/;"	m	class:TComVPS
m_crossComponentPredictionAlpha	TComDataCU.h	/^  SChar*        m_crossComponentPredictionAlpha[MAX_NUM_COMPONENT]; \/\/\/< array of cross-component prediction alpha values$/;"	m	class:TComDataCU
m_crossComponentPredictionEnabledFlag	TComSlice.h	/^  Bool             m_crossComponentPredictionEnabledFlag;$/;"	m	class:TComPPSRExt
m_ctuOffsetInBuffer	TComPicYuv.h	/^  Int*  m_ctuOffsetInBuffer[MAX_NUM_CHANNEL_TYPE];  \/\/\/< Gives an offset in the buffer for a given CTU (and channel)$/;"	m	class:TComPicYuv
m_ctuRsAddr	TComDataCU.h	/^  UInt          m_ctuRsAddr;                            \/\/\/< CTU (also known as LCU) address in a slice (Raster-scan address, as opposed to tile-scan\/encoding order).$/;"	m	class:TComDataCU
m_ctuRsToTsAddrMap	TComPicSym.h	/^  UInt*         m_ctuRsToTsAddrMap;    \/\/\/< for a given RS (Raster-Scan) address, returns the TS (Tile-Scan; coding order) address. cf CtbAddrRsToTs in specification.$/;"	m	class:TComPicSym
m_ctuTsToRsAddrMap	TComPicSym.h	/^  UInt*         m_ctuTsToRsAddrMap;    \/\/\/< for a given TS (Tile-Scan; coding order) address, returns the RS (Raster-Scan) address. cf CtbAddrTsToRs in specification.$/;"	m	class:TComPicSym
m_currentFrameIsFrame0Flag	SEI.h	/^  Bool m_currentFrameIsFrame0Flag;$/;"	m	class:SEIFramePacking
m_dFrameLambda	TComRdCost.h	/^  Double                  m_dFrameLambda;$/;"	m	class:TComRdCost
m_dLambda	TComRdCost.h	/^  Double                  m_dLambda;$/;"	m	class:TComRdCost
m_dLambda	TComTrQuant.h	/^  Double   m_dLambda;$/;"	m	class:TComTrQuant
m_dLambdaMotionSAD	TComRdCost.h	/^  Double                  m_dLambdaMotionSAD[2 \/* 0=standard, 1=for transquant bypass when mixed-lossless cost evaluation enabled*\/];$/;"	m	class:TComRdCost
m_dLambdaMotionSSE	TComRdCost.h	/^  Double                  m_dLambdaMotionSSE[2 \/* 0=standard, 1=for transquant bypass when mixed-lossless cost evaluation enabled*\/];$/;"	m	class:TComRdCost
m_dTotalCost	TComDataCU.h	/^  Double        m_dTotalCost;                           \/\/\/< sum of partition RD costs$/;"	m	class:TComDataCU
m_dVal	Debug.h	/^  Double      m_dVal;$/;"	m	class:EnvVar
m_deblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Int                        m_deblockingFilterBetaOffsetDiv2;    \/\/< beta offset for deblocking filter$/;"	m	class:TComSlice
m_deblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Int              m_deblockingFilterBetaOffsetDiv2;    \/\/< beta offset for deblocking filter$/;"	m	class:TComPPS
m_deblockingFilterControlPresentFlag	TComSlice.h	/^  Bool             m_deblockingFilterControlPresentFlag;$/;"	m	class:TComPPS
m_deblockingFilterDisable	TComSlice.h	/^  Bool                       m_deblockingFilterDisable;$/;"	m	class:TComSlice
m_deblockingFilterOverrideEnabledFlag	TComSlice.h	/^  Bool             m_deblockingFilterOverrideEnabledFlag;$/;"	m	class:TComPPS
m_deblockingFilterOverrideFlag	TComSlice.h	/^  Bool                       m_deblockingFilterOverrideFlag;      \/\/< offsets for deblocking filter inherit from PPS$/;"	m	class:TComSlice
m_deblockingFilterTcOffsetDiv2	TComSlice.h	/^  Int                        m_deblockingFilterTcOffsetDiv2;      \/\/< tc offset for deblocking filter$/;"	m	class:TComSlice
m_deblockingFilterTcOffsetDiv2	TComSlice.h	/^  Int              m_deblockingFilterTcOffsetDiv2;      \/\/< tc offset for deblocking filter$/;"	m	class:TComPPS
m_decodingUnitIdx	SEI.h	/^  Int m_decodingUnitIdx;$/;"	m	class:SEIDecodingUnitInfo
m_defaultDisplayWindow	TComSlice.h	/^  Window     m_defaultDisplayWindow;$/;"	m	class:TComVUI
m_defaultOpFlag	SEI.h	/^  Bool  m_defaultOpFlag;                             \/\/value valid if m_nestingOpFlag != 0$/;"	m	class:SEIScalableNesting
m_deinterlacedPictureSourceParityFlag	SEI.h	/^    Bool m_deinterlacedPictureSourceParityFlag;$/;"	m	class:SEIDeinterlaceFieldIdentification
m_deltaPOC	TComSlice.h	/^  Int  m_deltaPOC[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_deltaPOCMSBCycleLT	TComSlice.h	/^  Int  m_deltaPOCMSBCycleLT[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_deltaPocMSBPresentFlag	TComSlice.h	/^  Bool m_deltaPocMSBPresentFlag[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_deltaRIdxMinus1	TComSlice.h	/^  Int  m_deltaRIdxMinus1;$/;"	m	class:TComReferencePictureSet
m_deltaRPS	TComSlice.h	/^  Int  m_deltaRPS;$/;"	m	class:TComReferencePictureSet
m_dependentSliceSegmentFlag	TComSlice.h	/^  Bool                       m_dependentSliceSegmentFlag;$/;"	m	class:TComSlice
m_dependentSliceSegmentsEnabledFlag	TComSlice.h	/^  Bool             m_dependentSliceSegmentsEnabledFlag; \/\/!< Indicates the presence of dependent slices$/;"	m	class:TComPPS
m_dequantCoef	TComTrQuant.h	/^  Int      *m_dequantCoef          [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM][SCALING_LIST_REM_NUM]; \/\/\/< array of dequantization matrix coefficient 4x4$/;"	m	class:TComTrQuant
m_diffCuChromaQpOffsetDepth	TComSlice.h	/^  Int              m_diffCuChromaQpOffsetDepth;$/;"	m	class:TComPPSRExt
m_display_tile_set_flag	SEI.h	/^      Bool    m_display_tile_set_flag;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_distortionWeight	TComRdCost.h	/^  Double                  m_distortionWeight[MAX_NUM_COMPONENT]; \/\/ only chroma values are used.$/;"	m	class:TComRdCost
m_dpbDelayOffset	SEI.h	/^  UInt m_dpbDelayOffset;$/;"	m	class:SEIBufferingPeriod
m_dpbOutputDelayDuLengthMinus1	TComSlice.h	/^  UInt m_dpbOutputDelayDuLengthMinus1;$/;"	m	class:TComHRD
m_dpbOutputDelayLengthMinus1	TComSlice.h	/^  UInt m_dpbOutputDelayLengthMinus1;$/;"	m	class:TComHRD
m_dpbOutputDuDelayPresentFlag	SEI.h	/^  Bool m_dpbOutputDuDelayPresentFlag;$/;"	m	class:SEIDecodingUnitInfo
m_dpbPerCtuData	TComPicSym.h	/^  DPBPerCtuData *m_dpbPerCtuData;$/;"	m	class:TComPicSym
m_duCommonCpbRemovalDelayFlag	SEI.h	/^  Bool  m_duCommonCpbRemovalDelayFlag;$/;"	m	class:SEIPictureTiming
m_duCommonCpbRemovalDelayMinus1	SEI.h	/^  UInt  m_duCommonCpbRemovalDelayMinus1;$/;"	m	class:SEIPictureTiming
m_duCpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt m_duCpbRemovalDelayLengthMinus1;$/;"	m	class:TComHRD
m_duCpbRemovalDelayMinus1	SEI.h	/^  std::vector<UInt> m_duCpbRemovalDelayMinus1;$/;"	m	class:SEIPictureTiming
m_duSptCpbRemovalDelay	SEI.h	/^  Int m_duSptCpbRemovalDelay;$/;"	m	class:SEIDecodingUnitInfo
m_ducpbSizeScale	TComSlice.h	/^  UInt m_ducpbSizeScale;$/;"	m	class:TComHRD
m_duplicateFlag	SEI.h	/^  Bool  m_duplicateFlag;$/;"	m	class:SEIPictureTiming
m_eNalUnitType	TComSlice.h	/^  NalUnitType                m_eNalUnitType;         \/\/\/< Nal unit type for the slice$/;"	m	class:TComSlice
m_eSliceType	TComSlice.h	/^  SliceType                  m_eSliceType;$/;"	m	class:TComSlice
m_each_tile_one_tile_set_flag	SEI.h	/^  Bool    m_each_tile_one_tile_set_flag;$/;"	m	class:SEITempMotionConstrainedTileSets
m_emulationPreventionByteLocation	TComBitStream.h	/^  std::vector<UInt>    m_emulationPreventionByteLocation;$/;"	m	class:TComInputBitstream
m_enableDeblocking	SEIFilmGrainSynthesizer.h	/^  uint8_t                      m_enableDeblocking;$/;"	m	class:SEIFilmGrainSynthesizer
m_enableTMVPFlag	TComSlice.h	/^  Bool                       m_enableTMVPFlag;$/;"	m	class:TComSlice
m_enabledFlag	TypeDef.h	/^  Bool m_enabledFlag;$/;"	m	class:Window
m_encCABACTableIdx	TComSlice.h	/^  SliceType                  m_encCABACTableIdx;           \/\/ Used to transmit table selection across slices.$/;"	m	class:TComSlice
m_entropyBits	ContextModel.cpp	/^const Int ContextModel::m_entropyBits[ ContextModel::m_totalStates ] =$/;"	m	class:ContextModel	file:
m_entropyBits	ContextModel.h	/^  static const  Int   m_entropyBits    [m_totalStates];$/;"	m	class:ContextModel
m_entropyCodingSyncEnabledFlag	TComSlice.h	/^  Bool             m_entropyCodingSyncEnabledFlag;      \/\/!< Indicates the presence of wavefronts$/;"	m	class:TComPPS
m_erpCancelFlag	SEI.h	/^  Bool   m_erpCancelFlag;$/;"	m	class:SEIEquirectangularProjection
m_erpGuardBandFlag	SEI.h	/^  Bool   m_erpGuardBandFlag;$/;"	m	class:SEIEquirectangularProjection
m_erpGuardBandType	SEI.h	/^  UChar  m_erpGuardBandType;$/;"	m	class:SEIEquirectangularProjection
m_erpLeftGuardBandWidth	SEI.h	/^  UChar  m_erpLeftGuardBandWidth;$/;"	m	class:SEIEquirectangularProjection
m_erpPersistenceFlag	SEI.h	/^  Bool   m_erpPersistenceFlag;$/;"	m	class:SEIEquirectangularProjection
m_erpRightGuardBandWidth	SEI.h	/^  UChar  m_erpRightGuardBandWidth;$/;"	m	class:SEIEquirectangularProjection
m_errScale	TComTrQuant.h	/^  Double   *m_errScale             [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM][SCALING_LIST_REM_NUM]; \/\/\/< array of quantization matrix coefficient 4x4$/;"	m	class:TComTrQuant
m_errScaleNoScalingList	TComTrQuant.h	/^  Double    m_errScaleNoScalingList[SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM][SCALING_LIST_REM_NUM]; \/\/\/< array of quantization matrix coefficient 4x4$/;"	m	class:TComTrQuant
m_errorCode	SEIFilmGrainSynthesizer.h	/^  uint32_t                     m_errorCode;$/;"	m	class:SEIFilmGrainSynthesizer
m_exactMatchingFlag	SEI.h	/^  Bool m_exactMatchingFlag;$/;"	m	class:SEIRecoveryPoint
m_exact_sample_value_match_flag	SEI.h	/^      Bool    m_exact_sample_value_match_flag;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_explicitRdpcmMode	TComDataCU.h	/^  UChar*        m_explicitRdpcmMode[MAX_NUM_COMPONENT]; \/\/\/< Stores the explicit RDPCM mode for all TUs belonging to this CU$/;"	m	class:TComDataCU
m_exposureCompensationValueDenomIdc	SEI.h	/^  Int    m_exposureCompensationValueDenomIdc;$/;"	m	class:SEIToneMappingInfo
m_exposureCompensationValueNumerator	SEI.h	/^  Int    m_exposureCompensationValueNumerator;$/;"	m	class:SEIToneMappingInfo
m_exposureCompensationValueSignFlag	SEI.h	/^  Bool   m_exposureCompensationValueSignFlag;$/;"	m	class:SEIToneMappingInfo
m_exposureIndexIdc	SEI.h	/^  Int    m_exposureIndexIdc;$/;"	m	class:SEIToneMappingInfo
m_exposureIndexValue	SEI.h	/^  Int    m_exposureIndexValue;$/;"	m	class:SEIToneMappingInfo
m_extendedPrecisionProcessingFlag	TComSlice.h	/^  Bool             m_extendedPrecisionProcessingFlag;$/;"	m	class:TComSPSRExt
m_extendedRangeWhiteLevel	SEI.h	/^  Int    m_extendedRangeWhiteLevel;$/;"	m	class:SEIToneMappingInfo
m_extendedWhiteLevelLumaCodeValue	SEI.h	/^  Int    m_extendedWhiteLevelLumaCodeValue;$/;"	m	class:SEIToneMappingInfo
m_fieldSeqFlag	TComSlice.h	/^  Bool       m_fieldSeqFlag;$/;"	m	class:TComVUI
m_fieldViewsFlag	SEI.h	/^  Bool m_fieldViewsFlag;$/;"	m	class:SEIFramePacking
m_fifo	TComBitStream.h	/^  std::vector<uint8_t> m_fifo; \/\/\/ FIFO for storage of complete bytes$/;"	m	class:TComInputBitstream
m_fifo	TComBitStream.h	/^  std::vector<uint8_t> m_fifo;$/;"	m	class:TComOutputBitstream
m_fifo_idx	TComBitStream.h	/^  UInt m_fifo_idx; \/\/\/ Read index into m_fifo$/;"	m	class:TComInputBitstream
m_filmGrainBitDepthChromaMinus8	SEI.h	/^  UChar     m_filmGrainBitDepthChromaMinus8;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainBitDepthLumaMinus8	SEI.h	/^  UChar     m_filmGrainBitDepthLumaMinus8;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainCharacteristicsCancelFlag	SEI.h	/^  Bool      m_filmGrainCharacteristicsCancelFlag;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainCharacteristicsPersistenceFlag	SEI.h	/^  Bool      m_filmGrainCharacteristicsPersistenceFlag;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainColourPrimaries	SEI.h	/^  UChar     m_filmGrainColourPrimaries;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainFullRangeFlag	SEI.h	/^  Bool      m_filmGrainFullRangeFlag;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainMatrixCoeffs	SEI.h	/^  UChar     m_filmGrainMatrixCoeffs;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainModelId	SEI.h	/^  UChar     m_filmGrainModelId;$/;"	m	class:SEIFilmGrainCharacteristics
m_filmGrainTransferCharacteristics	SEI.h	/^  UChar     m_filmGrainTransferCharacteristics;$/;"	m	class:SEIFilmGrainCharacteristics
m_filterHintSizeX	SEI.h	/^  UInt             m_filterHintSizeX;$/;"	m	class:SEIPostFilterHint
m_filterHintSizeY	SEI.h	/^  UInt             m_filterHintSizeY;$/;"	m	class:SEIPostFilterHint
m_filterHintType	SEI.h	/^  UInt             m_filterHintType;$/;"	m	class:SEIPostFilterHint
m_filterHintValues	SEI.h	/^  std::vector<Int> m_filterHintValues; \/\/ values stored in linear array, [ ( ( component * sizeY + y ) * SizeX ) + x ]$/;"	m	class:SEIPostFilterHint
m_filteredBlock	TComPrediction.h	/^  TComYuv m_filteredBlock[LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS][LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS];$/;"	m	class:TComPrediction
m_filteredBlockTmp	TComPrediction.h	/^  TComYuv m_filteredBlockTmp[LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS];$/;"	m	class:TComPrediction
m_firstCtuRsAddr	TComPicSym.h	/^  UInt      m_firstCtuRsAddr;$/;"	m	class:TComTile
m_fisheyeActiveAreas	TypeDef.h	/^  std::vector<ActiveAreaInfo> m_fisheyeActiveAreas;$/;"	m	struct:TComSEIFisheyeVideoInfo
m_fisheyeCameraCentreAzimuth	TypeDef.h	/^    Int  m_fisheyeCameraCentreAzimuth;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCameraCentreElevation	TypeDef.h	/^    Int  m_fisheyeCameraCentreElevation;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCameraCentreOffsetX	TypeDef.h	/^    UInt m_fisheyeCameraCentreOffsetX;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCameraCentreOffsetY	TypeDef.h	/^    UInt m_fisheyeCameraCentreOffsetY;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCameraCentreOffsetZ	TypeDef.h	/^    UInt m_fisheyeCameraCentreOffsetZ;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCameraCentreTilt	TypeDef.h	/^    Int  m_fisheyeCameraCentreTilt;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCancelFlag	TypeDef.h	/^  Bool  m_fisheyeCancelFlag;$/;"	m	struct:TComSEIFisheyeVideoInfo
m_fisheyeCircularRegionCentreX	TypeDef.h	/^    UInt m_fisheyeCircularRegionCentreX;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCircularRegionCentreY	TypeDef.h	/^    UInt m_fisheyeCircularRegionCentreY;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeCircularRegionRadius	TypeDef.h	/^    UInt m_fisheyeCircularRegionRadius;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeFieldOfView	TypeDef.h	/^    UInt m_fisheyeFieldOfView;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyePersistenceFlag	TypeDef.h	/^  Bool  m_fisheyePersistenceFlag;$/;"	m	struct:TComSEIFisheyeVideoInfo
m_fisheyePolynomialCoeff	TypeDef.h	/^    std::vector<Int> m_fisheyePolynomialCoeff;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeRectRegionHeight	TypeDef.h	/^    UInt m_fisheyeRectRegionHeight;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeRectRegionLeft	TypeDef.h	/^    UInt m_fisheyeRectRegionLeft;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeRectRegionTop	TypeDef.h	/^    UInt m_fisheyeRectRegionTop;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeRectRegionWidth	TypeDef.h	/^    UInt m_fisheyeRectRegionWidth;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeSceneRadius	TypeDef.h	/^    UInt m_fisheyeSceneRadius;$/;"	m	struct:TComSEIFisheyeVideoInfo::ActiveAreaInfo
m_fisheyeViewDimensionIdc	TypeDef.h	/^  UInt  m_fisheyeViewDimensionIdc;$/;"	m	struct:TComSEIFisheyeVideoInfo
m_forceDecodeBitDepth	TComSlice.h	/^  UInt             m_forceDecodeBitDepth; \/\/ 0 = do not force the decoder's bit depth, other = force the decoder's bit depth to this value (best effort decoding)$/;"	m	class:TComSPS
m_frame0FlippedFlag	SEI.h	/^  Bool m_frame0FlippedFlag;$/;"	m	class:SEIFramePacking
m_frame0GridPositionX	SEI.h	/^  Int  m_frame0GridPositionX;$/;"	m	class:SEIFramePacking
m_frame0GridPositionY	SEI.h	/^  Int  m_frame0GridPositionY;$/;"	m	class:SEIFramePacking
m_frame0SelfContainedFlag	SEI.h	/^  Bool m_frame0SelfContainedFlag;$/;"	m	class:SEIFramePacking
m_frame1GridPositionX	SEI.h	/^  Int  m_frame1GridPositionX;$/;"	m	class:SEIFramePacking
m_frame1GridPositionY	SEI.h	/^  Int  m_frame1GridPositionY;$/;"	m	class:SEIFramePacking
m_frame1SelfContainedFlag	SEI.h	/^  Bool m_frame1SelfContainedFlag;$/;"	m	class:SEIFramePacking
m_frameFieldInfoPresentFlag	TComSlice.h	/^  Bool       m_frameFieldInfoPresentFlag;$/;"	m	class:TComVUI
m_frameHeightInCtus	TComPicSym.h	/^  UInt          m_frameHeightInCtus;$/;"	m	class:TComPicSym
m_frameOnlyConstraintFlag	TComSlice.h	/^  Bool              m_frameOnlyConstraintFlag;$/;"	m	class:ProfileTierLevel
m_frameWidthInCtus	TComPicSym.h	/^  UInt          m_frameWidthInCtus;$/;"	m	class:TComPicSym
m_gdrForegroundFlag	SEI.h	/^  Bool m_gdrForegroundFlag;$/;"	m	class:SEIRegionRefreshInfo
m_generalPTL	TComSlice.h	/^  ProfileTierLevel m_generalPTL;$/;"	m	class:TComPTL
m_grainBuf	TComPic.h	/^  TComPicYuv              *m_grainBuf;$/;"	m	class:TComPic
m_grainCharacteristic	TComPic.h	/^  SEIFilmGrainSynthesizer *m_grainCharacteristic;$/;"	m	class:TComPic
m_greaterOneBits	TComTrQuant.h	/^  Int m_greaterOneBits[NUM_ONE_FLAG_CTX][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
m_greenMetadataType	SEI.h	/^    UInt m_greenMetadataType;$/;"	m	class:SEIGreenMetadataInfo
m_handleCraAsBlaFlag	TComSlice.h	/^  Bool                       m_handleCraAsBlaFlag;$/;"	m	class:TComSlice
m_hdr	SEI.h	/^  AnnotatedRegionHeader m_hdr;$/;"	m	class:SEIAnnotatedRegions
m_height	SEIFilmGrainSynthesizer.h	/^  uint32_t                     m_height;$/;"	m	class:SEIFilmGrainSynthesizer
m_held_bits	TComBitStream.h	/^  UChar m_held_bits; \/\/\/ the bits held and not flushed to bytestream.$/;"	m	class:TComOutputBitstream
m_held_bits	TComBitStream.h	/^  UChar m_held_bits;$/;"	m	class:TComInputBitstream
m_highPrecisionOffsetsEnabledFlag	TComSlice.h	/^  Bool             m_highPrecisionOffsetsEnabledFlag;$/;"	m	class:TComSPSRExt
m_horChromaFilterIdc	SEI.h	/^  Int                            m_horChromaFilterIdc;$/;"	m	class:SEIChromaResamplingFilterHint
m_horFilterCoeff	SEI.h	/^  std::vector<std::vector<Int> > m_horFilterCoeff;$/;"	m	class:SEIChromaResamplingFilterHint
m_hrdOpSetIdx	TComSlice.h	/^  std::vector<UInt>     m_hrdOpSetIdx;$/;"	m	class:TComVPS
m_hrdParameters	TComSlice.h	/^  TComHRD    m_hrdParameters;$/;"	m	class:TComVUI
m_hrdParameters	TComSlice.h	/^  std::vector<TComHRD>  m_hrdParameters;$/;"	m	class:TComVPS
m_hrdParametersPresentFlag	TComSlice.h	/^  Bool       m_hrdParametersPresentFlag;$/;"	m	class:TComVUI
m_iAssociatedIRAP	TComSlice.h	/^  Int                        m_iAssociatedIRAP;$/;"	m	class:TComSlice
m_iAssociatedIRAPType	TComSlice.h	/^  NalUnitType                m_iAssociatedIRAPType;$/;"	m	class:TComSlice
m_iCostScale	TComRdCost.h	/^  Int                     m_iCostScale;$/;"	m	class:TComRdCost
m_iDepth	TComSlice.h	/^  Int                        m_iDepth;$/;"	m	class:TComSlice
m_iHeight	TComYuv.h	/^  UInt     m_iHeight;$/;"	m	class:TComYuv
m_iHor	TComMv.h	/^  Short m_iHor;     \/\/\/< horizontal component of motion vector$/;"	m	class:TComMv
m_iLastIDR	TComSlice.h	/^  Int                        m_iLastIDR;$/;"	m	class:TComSlice
m_iLumaRecStride	TComPrediction.h	/^  Int    m_iLumaRecStride;       \/\/\/< stride of #m_pLumaRecBuffer array$/;"	m	class:TComPrediction
m_iPOC	TComSlice.h	/^  Int                        m_iPOC;$/;"	m	class:TComSlice
m_iPPSId	TComSlice.h	/^  Int                        m_iPPSId;               \/\/\/< picture parameter set ID$/;"	m	class:TComSlice
m_iRefIdx	TComMotionInfo.h	/^  Int       m_iRefIdx;$/;"	m	class:TComMvField
m_iSliceChromaQpDelta	TComSlice.h	/^  Int                        m_iSliceChromaQpDelta[MAX_NUM_COMPONENT];$/;"	m	class:TComSlice
m_iSliceQp	TComSlice.h	/^  Int                        m_iSliceQp;$/;"	m	class:TComSlice
m_iSliceQpBase	TComSlice.h	/^  Int                        m_iSliceQpBase;$/;"	m	class:TComSlice
m_iSliceQpDelta	TComSlice.h	/^  Int                        m_iSliceQpDelta;$/;"	m	class:TComSlice
m_iVal	Debug.h	/^  Int         m_iVal;$/;"	m	class:EnvVar
m_iVer	TComMv.h	/^  Short m_iVer;     \/\/\/< vertical component of motion vector$/;"	m	class:TComMv
m_iWidth	TComYuv.h	/^  UInt     m_iWidth;$/;"	m	class:TComYuv
m_iYuvExtSize	TComPrediction.h	/^  Int       m_iYuvExtSize;$/;"	m	class:TComPrediction
m_idrPicId	SEIFilmGrainSynthesizer.h	/^  uint32_t                     m_idrPicId;$/;"	m	class:SEIFilmGrainSynthesizer
m_idxOfMctsInSet	SEI.h	/^    std::vector< std::vector<UInt> > m_idxOfMctsInSet;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_if	TComPrediction.h	/^  TComInterpolationFilter m_if;$/;"	m	class:TComPrediction
m_independentSliceSegmentFlag	SEI.h	/^  Bool m_independentSliceSegmentFlag;$/;"	m	class:SEICodedRegionCompletion
m_initialAltCpbRemovalDelay	SEI.h	/^  UInt m_initialAltCpbRemovalDelay      [MAX_CPB_CNT][2];$/;"	m	class:SEIBufferingPeriod
m_initialAltCpbRemovalDelayOffset	SEI.h	/^  UInt m_initialAltCpbRemovalDelayOffset[MAX_CPB_CNT][2];$/;"	m	class:SEIBufferingPeriod
m_initialCpbRemovalDelay	SEI.h	/^  UInt m_initialCpbRemovalDelay         [MAX_CPB_CNT][2];$/;"	m	class:SEIBufferingPeriod
m_initialCpbRemovalDelayLengthMinus1	TComSlice.h	/^  UInt m_initialCpbRemovalDelayLengthMinus1;$/;"	m	class:TComHRD
m_initialCpbRemovalDelayOffset	SEI.h	/^  UInt m_initialCpbRemovalDelayOffset   [MAX_CPB_CNT][2];$/;"	m	class:SEIBufferingPeriod
m_interRPSPrediction	TComSlice.h	/^  Bool m_interRPSPrediction;$/;"	m	class:TComReferencePictureSet
m_interlacedSourceFlag	TComSlice.h	/^  Bool              m_interlacedSourceFlag;$/;"	m	class:ProfileTierLevel
m_intraConstraintFlag	TComSlice.h	/^  Bool              m_intraConstraintFlag;$/;"	m	class:ProfileTierLevel
m_intraSmoothingDisabledFlag	TComSlice.h	/^  Bool             m_intraSmoothingDisabledFlag;$/;"	m	class:TComSPSRExt
m_isField	TComPic.h	/^  Bool                  m_isField;$/;"	m	class:TComPic
m_isTop	TComPic.h	/^  Bool                  m_isTop;$/;"	m	class:TComPic
m_ituCountryCode	SEI.h	/^  UShort m_ituCountryCode;$/;"	m	class:SEIUserDataRegistered
m_kneeCancelFlag	SEI.h	/^  Bool  m_kneeCancelFlag;$/;"	m	class:SEIKneeFunctionInfo
m_kneeId	SEI.h	/^  Int   m_kneeId;$/;"	m	class:SEIKneeFunctionInfo
m_kneeInputDispLuminance	SEI.h	/^  Int   m_kneeInputDispLuminance;$/;"	m	class:SEIKneeFunctionInfo
m_kneeInputDrange	SEI.h	/^  Int   m_kneeInputDrange;$/;"	m	class:SEIKneeFunctionInfo
m_kneeInputKneePoint	SEI.h	/^  std::vector<Int> m_kneeInputKneePoint;$/;"	m	class:SEIKneeFunctionInfo
m_kneeNumKneePointsMinus1	SEI.h	/^  Int   m_kneeNumKneePointsMinus1;$/;"	m	class:SEIKneeFunctionInfo
m_kneeOutputDispLuminance	SEI.h	/^  Int   m_kneeOutputDispLuminance;$/;"	m	class:SEIKneeFunctionInfo
m_kneeOutputDrange	SEI.h	/^  Int   m_kneeOutputDrange;$/;"	m	class:SEIKneeFunctionInfo
m_kneeOutputKneePoint	SEI.h	/^  std::vector<Int> m_kneeOutputKneePoint;$/;"	m	class:SEIKneeFunctionInfo
m_kneePersistenceFlag	SEI.h	/^  Bool  m_kneePersistenceFlag;$/;"	m	class:SEIKneeFunctionInfo
m_lambdas	TComSlice.h	/^  Double                     m_lambdas[MAX_NUM_COMPONENT];$/;"	m	class:TComSlice
m_lambdas	TComTrQuant.h	/^  Double   m_lambdas[MAX_NUM_COMPONENT];$/;"	m	class:TComTrQuant
m_layerIdIncludedFlag	TComSlice.h	/^  Bool                  m_layerIdIncludedFlag[MAX_VPS_OP_SETS_PLUS1][MAX_VPS_NUH_RESERVED_ZERO_LAYER_ID_PLUS1];$/;"	m	class:TComVPS
m_levelAbsBits	TComTrQuant.h	/^  Int m_levelAbsBits[NUM_ABS_FLAG_CTX][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
m_levelIdc	TComSlice.h	/^  Level::Name       m_levelIdc;$/;"	m	class:ProfileTierLevel
m_limited_tile_set_display_flag	SEI.h	/^  Bool    m_limited_tile_set_display_flag;$/;"	m	class:SEITempMotionConstrainedTileSets
m_line	TComRom.cpp	/^  UInt m_line, m_column;$/;"	m	class:ScanGenerator	file:
m_lineBufWidth	TComSampleAdaptiveOffset.h	/^  Int m_lineBufWidth;$/;"	m	class:TComSampleAdaptiveOffset
m_list1IdxToList0Idx	TComSlice.h	/^  Int                        m_list1IdxToList0Idx[MAX_NUM_REF];$/;"	m	class:TComSlice
m_listOfIndices	SEI.h	/^    std::vector<UInt> m_listOfIndices;$/;"	m	struct:SEIRegionalNesting::SEIListOfIndices
m_listsModificationPresentFlag	TComSlice.h	/^  Bool             m_listsModificationPresentFlag;$/;"	m	class:TComPPS
m_localRPS	TComSlice.h	/^  TComReferencePictureSet    m_localRPS;             \/\/< RPS when present in slice header$/;"	m	class:TComSlice
m_log2DiffMaxMinCodingBlockSize	TComSlice.h	/^  Int              m_log2DiffMaxMinCodingBlockSize;$/;"	m	class:TComSPS
m_log2MatrixDenom	SEI.h	/^  Int                 m_log2MatrixDenom;$/;"	m	class:SEIColourRemappingInfo
m_log2MaxMvLengthHorizontal	TComSlice.h	/^  Int        m_log2MaxMvLengthHorizontal;$/;"	m	class:TComVUI
m_log2MaxMvLengthVertical	TComSlice.h	/^  Int        m_log2MaxMvLengthVertical;$/;"	m	class:TComVUI
m_log2MaxTransformSkipBlockSize	TComSlice.h	/^  Int              m_log2MaxTransformSkipBlockSize;$/;"	m	class:TComPPSRExt
m_log2MinCodingBlockSize	TComSlice.h	/^  Int              m_log2MinCodingBlockSize;$/;"	m	class:TComSPS
m_log2ParallelMergeLevelMinus2	TComSlice.h	/^  UInt             m_log2ParallelMergeLevelMinus2;$/;"	m	class:TComPPS
m_log2SaoOffsetScale	TComSlice.h	/^  UInt             m_log2SaoOffsetScale[MAX_NUM_CHANNEL_TYPE];$/;"	m	class:TComPPSRExt
m_log2ScaleFactor	SEI.h	/^  UChar     m_log2ScaleFactor;$/;"	m	class:SEIFilmGrainCharacteristics
m_loopFilterAcrossSlicesEnabledFlag	TComSlice.h	/^  Bool             m_loopFilterAcrossSlicesEnabledFlag;$/;"	m	class:TComPPS
m_loopFilterAcrossTilesEnabledFlag	TComSlice.h	/^  Bool             m_loopFilterAcrossTilesEnabledFlag;$/;"	m	class:TComPPS
m_lowerBitRateConstraintFlag	TComSlice.h	/^  Bool              m_lowerBitRateConstraintFlag;$/;"	m	class:ProfileTierLevel
m_ltRefPicPocLsbSps	TComSlice.h	/^  UInt             m_ltRefPicPocLsbSps[MAX_NUM_LONG_TERM_REF_PICS];$/;"	m	class:TComSPS
m_lumaFilter	TComInterpolationFilter.cpp	/^const TFilterCoeff TComInterpolationFilter::m_lumaFilter[LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS][NTAPS_LUMA] =$/;"	m	class:TComInterpolationFilter	file:
m_lumaFilter	TComInterpolationFilter.h	/^  static const TFilterCoeff m_lumaFilter[LUMA_INTERPOLATION_FILTER_SUB_SAMPLE_POSITIONS][NTAPS_LUMA];     \/\/\/< Luma filter taps$/;"	m	class:TComInterpolationFilter
m_marginX	TComPicYuv.h	/^  Int   m_marginX;                                  \/\/\/< margin of Luma channel (chroma's may be smaller, depending on ratio)$/;"	m	class:TComPicYuv
m_marginY	TComPicYuv.h	/^  Int   m_marginY;                                  \/\/\/< margin of Luma channel (chroma's may be smaller, depending on ratio)$/;"	m	class:TComPicYuv
m_matrixCoefficients	TComSlice.h	/^  Int        m_matrixCoefficients;$/;"	m	class:TComVUI
m_maxBitsPerMinCuDenom	TComSlice.h	/^  Int        m_maxBitsPerMinCuDenom;$/;"	m	class:TComVUI
m_maxBytesPerPicDenom	TComSlice.h	/^  Int        m_maxBytesPerPicDenom;$/;"	m	class:TComVUI
m_maxCUHeight	TComSampleAdaptiveOffset.h	/^  Int m_maxCUHeight;$/;"	m	class:TComSampleAdaptiveOffset
m_maxCUWidth	TComSampleAdaptiveOffset.h	/^  Int m_maxCUWidth;$/;"	m	class:TComSampleAdaptiveOffset
m_maxContentLightLevel	SEI.h	/^    UInt m_maxContentLightLevel;$/;"	m	class:SEIContentLightLevelInfo
m_maxId	TComSlice.h	/^  Int                       m_maxId;$/;"	m	class:ParameterSetMap
m_maxNuhReservedZeroLayerId	TComSlice.h	/^  UInt                  m_maxNuhReservedZeroLayerId;$/;"	m	class:TComVPS
m_maxNumMergeCand	TComSlice.h	/^  UInt                       m_maxNumMergeCand;$/;"	m	class:TComSlice
m_maxPicAverageLightLevel	SEI.h	/^    UInt m_maxPicAverageLightLevel;$/;"	m	class:SEIContentLightLevelInfo
m_maxRawCtuBits	ProfileLevelTierFeatures.h	/^    UInt                     m_maxRawCtuBits;$/;"	m	class:ProfileLevelTierFeatures
m_maxValue	SEI.h	/^  Int    m_maxValue;$/;"	m	class:SEIToneMappingInfo
m_max_mcs_tier_level_idc_present_flag	SEI.h	/^  Bool    m_max_mcs_tier_level_idc_present_flag;$/;"	m	class:SEITempMotionConstrainedTileSets
m_max_mcts_level_idc	SEI.h	/^  Int     m_max_mcts_level_idc;$/;"	m	class:SEITempMotionConstrainedTileSets
m_max_mcts_tier_flag	SEI.h	/^  Bool    m_max_mcts_tier_flag;$/;"	m	class:SEITempMotionConstrainedTileSets
m_maximumDistortionForEarlyExit	TComRdCost.h	/^  Distortion            m_maximumDistortionForEarlyExit; \/\/\/ During cost calculations, if distortion exceeds this value, cost calculations may early-terminate.$/;"	m	class:DistParam
m_mc_all_tiles_exact_sample_value_match_flag	SEI.h	/^  Bool    m_mc_all_tiles_exact_sample_value_match_flag;$/;"	m	class:SEITempMotionConstrainedTileSets
m_mcts_id	SEI.h	/^      Int     m_mcts_id;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_mcts_level_idc	SEI.h	/^      Int     m_mcts_level_idc;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_mcts_tier_flag	SEI.h	/^      Bool    m_mcts_tier_flag;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_mcts_tier_level_idc_present_flag	SEI.h	/^      Bool    m_mcts_tier_level_idc_present_flag;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_minSpatialSegmentationIdc	TComSlice.h	/^  Int        m_minSpatialSegmentationIdc;$/;"	m	class:TComVUI
m_minValue	SEI.h	/^  Int    m_minValue;$/;"	m	class:SEIToneMappingInfo
m_modelId	SEI.h	/^  Int    m_modelId;$/;"	m	class:SEIToneMappingInfo
m_motionLambda	TComRdCost.h	/^  Double                  m_motionLambda;$/;"	m	class:TComRdCost
m_motionVectorsOverPicBoundariesFlag	TComSlice.h	/^  Bool       m_motionVectorsOverPicBoundariesFlag;$/;"	m	class:TComVUI
m_mvPredictor	TComRdCost.h	/^  TComMv                  m_mvPredictor;$/;"	m	class:TComRdCost
m_nalHrdParametersPresentFlag	TComSlice.h	/^  Bool m_nalHrdParametersPresentFlag;$/;"	m	class:TComHRD
m_nalUnitData	NAL.h	/^  std::ostringstream m_nalUnitData;$/;"	m	struct:NALUnitEBSP
m_nalUnitType	NAL.h	/^  NalUnitType m_nalUnitType; \/\/\/< nal_unit_type$/;"	m	struct:NALUnit
m_nestedSEIs	SEI.h	/^  SEIMessages m_nestedSEIs;$/;"	m	class:SEIScalableNesting
m_nestingLayerId	SEI.h	/^  UChar m_nestingLayerId[MAX_NESTING_NUM_LAYER];     \/\/value valid if m_nestingOpFlag == 0 and m_allLayersFlag == 0. This can e.g. be a static array of 64 UChar values$/;"	m	class:SEIScalableNesting
m_nestingMaxTemporalIdPlus1	SEI.h	/^  UInt  m_nestingMaxTemporalIdPlus1[MAX_TLAYER];     \/\/ -"-$/;"	m	class:SEIScalableNesting
m_nestingNoOpMaxTemporalIdPlus1	SEI.h	/^  UInt  m_nestingNoOpMaxTemporalIdPlus1;             \/\/value valid if m_nestingOpFlag == 0 and m_allLayersFlag == 0$/;"	m	class:SEIScalableNesting
m_nestingNumLayersMinus1	SEI.h	/^  UInt  m_nestingNumLayersMinus1;                    \/\/value valid if m_nestingOpFlag == 0 and m_allLayersFlag == 0$/;"	m	class:SEIScalableNesting
m_nestingNumOpsMinus1	SEI.h	/^  UInt  m_nestingNumOpsMinus1;                       \/\/ -"-$/;"	m	class:SEIScalableNesting
m_nestingOpFlag	SEI.h	/^  Bool  m_nestingOpFlag;$/;"	m	class:SEIScalableNesting
m_nestingOpIdx	SEI.h	/^  UInt  m_nestingOpIdx[MAX_NESTING_NUM_OPS];         \/\/ -"-$/;"	m	class:SEIScalableNesting
m_neutralChromaIndicationFlag	TComSlice.h	/^  Bool       m_neutralChromaIndicationFlag;$/;"	m	class:TComVUI
m_nextSegmentAddress	SEI.h	/^  UInt m_nextSegmentAddress;$/;"	m	class:SEICodedRegionCompletion
m_nextSlice	TComSlice.h	/^  Bool                       m_nextSlice;$/;"	m	class:TComSlice
m_nextSliceSegment	TComSlice.h	/^  Bool                       m_nextSliceSegment;$/;"	m	class:TComSlice
m_nextState	ContextModel.cpp	/^UChar ContextModel::m_nextState[ ContextModel::m_totalStates ][2 \/*MPS = [0|1]*\/];$/;"	m	class:ContextModel	file:
m_nextState	ContextModel.h	/^  static UChar m_nextState[m_totalStates][2 \/*MPS = [0|1]*\/];$/;"	m	class:ContextModel
m_noDisplay	SEI.h	/^  Bool m_noDisplay;$/;"	m	class:SEINoDisplay
m_noOutputPriorPicsFlag	TComSlice.h	/^  Bool                       m_noOutputPriorPicsFlag;$/;"	m	class:TComSlice
m_noParameterSetUpdateFlag	SEI.h	/^  Bool m_noParameterSetUpdateFlag;$/;"	m	class:SEIActiveParameterSets
m_noRaslOutputFlag	TComSlice.h	/^  Bool                       m_noRaslOutputFlag;$/;"	m	class:TComSlice
m_nominalBlackLevelLumaCodeValue	SEI.h	/^  Int    m_nominalBlackLevelLumaCodeValue;$/;"	m	class:SEIToneMappingInfo
m_nominalWhiteLevelLumaCodeValue	SEI.h	/^  Int    m_nominalWhiteLevelLumaCodeValue;$/;"	m	class:SEIToneMappingInfo
m_nonPackedConstraintFlag	TComSlice.h	/^  Bool              m_nonPackedConstraintFlag;$/;"	m	class:ProfileTierLevel
m_notOptimizedForViewingFlag	SEI.h	/^    Bool      m_notOptimizedForViewingFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_nuhLayerId	NAL.h	/^  UInt        m_nuhLayerId;  \/\/\/< nuh_layer_id$/;"	m	struct:NALUnit
m_numBitsRead	TComBitStream.h	/^  UInt  m_numBitsRead;$/;"	m	class:TComInputBitstream
m_numCTUInHeight	TComSampleAdaptiveOffset.h	/^  Int m_numCTUInHeight;$/;"	m	class:TComSampleAdaptiveOffset
m_numCTUInWidth	TComSampleAdaptiveOffset.h	/^  Int m_numCTUInWidth;$/;"	m	class:TComSampleAdaptiveOffset
m_numCTUsPic	TComSampleAdaptiveOffset.h	/^  Int m_numCTUsPic;$/;"	m	class:TComSampleAdaptiveOffset
m_numCtusInFrame	TComPicSym.h	/^  UInt          m_numCtusInFrame;$/;"	m	class:TComPicSym
m_numDecodingUnitsMinus1	SEI.h	/^  UInt  m_numDecodingUnitsMinus1;$/;"	m	class:SEIPictureTiming
m_numExtraSliceHeaderBits	TComSlice.h	/^  Int              m_numExtraSliceHeaderBits;$/;"	m	class:TComPPS
m_numFillerFFBytes	SEI.h	/^  UInt m_numFillerFFBytes;$/;"	m	class:SEIFillerPayload
m_numHrdParameters	TComSlice.h	/^  UInt                  m_numHrdParameters;$/;"	m	class:TComVPS
m_numLongTermRefPicSPS	TComSlice.h	/^  UInt             m_numLongTermRefPicSPS;$/;"	m	class:TComSPS
m_numNalusInDuMinus1	SEI.h	/^  std::vector<UInt> m_numNalusInDuMinus1;$/;"	m	class:SEIPictureTiming
m_numOpSets	TComSlice.h	/^  UInt                  m_numOpSets;$/;"	m	class:TComVPS
m_numPackedRegions	SEI.h	/^  Int                   m_numPackedRegions;$/;"	m	class:SEIRegionWisePacking
m_numPartInCtuHeight	TComPicSym.h	/^  UInt          m_numPartInCtuHeight;$/;"	m	class:TComPicSym
m_numPartInCtuWidth	TComPicSym.h	/^  UInt          m_numPartInCtuWidth;$/;"	m	class:TComPicSym
m_numPartitionsInCtu	TComPicSym.h	/^  UInt          m_numPartitionsInCtu;$/;"	m	class:TComPicSym
m_numPicsInSopMinus1	SEI.h	/^  UInt m_numPicsInSopMinus1;$/;"	m	class:SEISOPDescription
m_numPivots	SEI.h	/^  Int    m_numPivots;$/;"	m	class:SEIToneMappingInfo
m_numRefIdc	TComSlice.h	/^  Int  m_numRefIdc;$/;"	m	class:TComReferencePictureSet
m_numRefIdxL0DefaultActive	TComSlice.h	/^  UInt             m_numRefIdxL0DefaultActive;$/;"	m	class:TComPPS
m_numRefIdxL1DefaultActive	TComSlice.h	/^  UInt             m_numRefIdxL1DefaultActive;$/;"	m	class:TComPPS
m_numReorderPics	TComSlice.h	/^  Int              m_numReorderPics[MAX_TLAYER];$/;"	m	class:TComSPS
m_numReorderPics	TComSlice.h	/^  UInt                  m_numReorderPics[MAX_TLAYER];$/;"	m	class:TComVPS
m_numTicksPocDiffOneMinus1	TComSlice.h	/^  Int  m_numTicksPocDiffOneMinus1;$/;"	m	class:TimingInfo
m_numTileColumnsMinus1	TComPicSym.h	/^  Int           m_numTileColumnsMinus1;$/;"	m	class:TComPicSym
m_numTileColumnsMinus1	TComSlice.h	/^  Int              m_numTileColumnsMinus1;$/;"	m	class:TComPPS
m_numTileRowsMinus1	TComPicSym.h	/^  Int           m_numTileRowsMinus1;$/;"	m	class:TComPicSym
m_numTileRowsMinus1	TComSlice.h	/^  Int              m_numTileRowsMinus1;$/;"	m	class:TComPPS
m_numUnitsInTick	TComSlice.h	/^  UInt m_numUnitsInTick;$/;"	m	class:TimingInfo
m_num_held_bits	TComBitStream.h	/^  UInt m_num_held_bits; \/\/\/ number of bits not flushed to bytestream.$/;"	m	class:TComOutputBitstream
m_num_held_bits	TComBitStream.h	/^  UInt m_num_held_bits;$/;"	m	class:TComInputBitstream
m_num_tile_rects_in_set	SEI.h	/^      Int     m_num_tile_rects_in_set; \/\/_minus1;$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_numberOfLongtermPictures	TComSlice.h	/^  Int  m_numberOfLongtermPictures;$/;"	m	class:TComReferencePictureSet
m_numberOfNegativePictures	TComSlice.h	/^  Int  m_numberOfNegativePictures;$/;"	m	class:TComReferencePictureSet
m_numberOfPictures	TComSlice.h	/^  Int  m_numberOfPictures;$/;"	m	class:TComReferencePictureSet
m_numberOfPositivePictures	TComSlice.h	/^  Int  m_numberOfPositivePictures;$/;"	m	class:TComReferencePictureSet
m_objectConfidenceInfoPresentFlag	SEI.h	/^    Bool      m_objectConfidenceInfoPresentFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_objectConfidenceLength	SEI.h	/^    UInt      m_objectConfidenceLength;         \/\/ Only valid if m_objectConfidenceInfoPresentFlag$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_objectLabelLanguagePresentFlag	SEI.h	/^    Bool      m_objectLabelLanguagePresentFlag; \/\/ Only valid if m_objectLabelPresentFlag$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_objectLabelPresentFlag	SEI.h	/^    Bool      m_objectLabelPresentFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_occludedObjectFlag	SEI.h	/^    Bool      m_occludedObjectFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_offsetStepLog2	TComSampleAdaptiveOffset.h	/^  UInt m_offsetStepLog2[MAX_NUM_COMPONENT]; \/\/offset step$/;"	m	class:TComSampleAdaptiveOffset
m_omniViewportCancelFlag	SEI.h	/^  Bool  m_omniViewportCancelFlag;$/;"	m	class:SEIOmniViewport
m_omniViewportCntMinus1	SEI.h	/^  UChar m_omniViewportCntMinus1;$/;"	m	class:SEIOmniViewport
m_omniViewportId	SEI.h	/^  UInt  m_omniViewportId;$/;"	m	class:SEIOmniViewport
m_omniViewportPersistenceFlag	SEI.h	/^  Bool  m_omniViewportPersistenceFlag;$/;"	m	class:SEIOmniViewport
m_omniViewportRegions	SEI.h	/^  std::vector<OmniViewport> m_omniViewportRegions;  $/;"	m	class:SEIOmniViewport
m_onePictureOnlyConstraintFlag	TComSlice.h	/^  Bool              m_onePictureOnlyConstraintFlag;$/;"	m	class:ProfileTierLevel
m_outputSliceSegmentAddress	SEI.h	/^    std::vector<UInt> m_outputSliceSegmentAddress;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_overscanAppropriateFlag	TComSlice.h	/^  Bool       m_overscanAppropriateFlag;$/;"	m	class:TComVUI
m_overscanInfoPresentFlag	TComSlice.h	/^  Bool       m_overscanInfoPresentFlag;$/;"	m	class:TComVUI
m_pCtuAbove	TComDataCU.h	/^  TComDataCU*   m_pCtuAbove;                            \/\/\/< pointer of above CTU.$/;"	m	class:TComDataCU
m_pCtuAboveLeft	TComDataCU.h	/^  TComDataCU*   m_pCtuAboveLeft;                        \/\/\/< pointer of above-left CTU.$/;"	m	class:TComDataCU
m_pCtuAboveRight	TComDataCU.h	/^  TComDataCU*   m_pCtuAboveRight;                       \/\/\/< pointer of above-right CTU.$/;"	m	class:TComDataCU
m_pCtuLeft	TComDataCU.h	/^  TComDataCU*   m_pCtuLeft;                             \/\/\/< pointer of left CTU$/;"	m	class:TComDataCU
m_pFgcParameters	SEIFilmGrainSynthesizer.h	/^  SEIFilmGrainCharacteristics *m_pFgcParameters;$/;"	m	class:SEIFilmGrainSynthesizer
m_pGrainSynt	SEIFilmGrainSynthesizer.h	/^  GrainSynthesisStruct        *m_pGrainSynt;$/;"	m	class:SEIFilmGrainSynthesizer
m_pLevelTier	ProfileLevelTierFeatures.h	/^    const LevelTierFeatures *m_pLevelTier;$/;"	m	class:ProfileLevelTierFeatures
m_pLumaRecBuffer	TComPrediction.h	/^  Pel*   m_pLumaRecBuffer;       \/\/\/< array for downsampled reconstructed luma sample$/;"	m	class:TComPrediction
m_pParentARLBuffer	TComPicSym.h	/^  TCoeff*       m_pParentARLBuffer;$/;"	m	class:TComPicSym
m_pProfile	ProfileLevelTierFeatures.h	/^    const ProfileFeatures   *m_pProfile;$/;"	m	class:ProfileLevelTierFeatures
m_pRPS	TComSlice.h	/^  const TComReferencePictureSet* m_pRPS;             \/\/< pointer to RPS, either in the SPS or the local RPS in the same slice header$/;"	m	class:TComSlice
m_pSlice	TComPicSym.h	/^    TComSlice    * m_pSlice;$/;"	m	struct:TComPicSym::DPBPerCtuData
m_packedPictureHeight	SEI.h	/^  Int                   m_packedPictureHeight;$/;"	m	class:SEIRegionWisePacking
m_packedPictureWidth	SEI.h	/^  Int                   m_packedPictureWidth;$/;"	m	class:SEIRegionWisePacking
m_packedRegionHeight	SEI.h	/^  std::vector<UShort>   m_packedRegionHeight;$/;"	m	class:SEIRegionWisePacking
m_packedRegionLeft	SEI.h	/^  std::vector<UShort>   m_packedRegionLeft;$/;"	m	class:SEIRegionWisePacking
m_packedRegionTop	SEI.h	/^  std::vector<UShort>   m_packedRegionTop;$/;"	m	class:SEIRegionWisePacking
m_packedRegionWidth	SEI.h	/^  std::vector<UShort>   m_packedRegionWidth;$/;"	m	class:SEIRegionWisePacking
m_panScanRectCancelFlag	SEI.h	/^  Bool m_panScanRectCancelFlag;$/;"	m	class:SEIPanScanRect
m_panScanRectId	SEI.h	/^  UInt m_panScanRectId;$/;"	m	class:SEIPanScanRect
m_panScanRectPersistenceFlag	SEI.h	/^  Bool m_panScanRectPersistenceFlag;$/;"	m	class:SEIPanScanRect
m_panScanRectRegions	SEI.h	/^  std::vector<PanScanRect> m_panScanRectRegions;$/;"	m	class:SEIPanScanRect
m_paramsetMap	TComSlice.h	/^  std::map<Int,MapData<T> > m_paramsetMap;$/;"	m	class:ParameterSetMap
m_partialObjectFlagPresentFlag	SEI.h	/^    Bool      m_partialObjectFlagPresentFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_patternStride	TComPattern.h	/^  Int   m_patternStride;$/;"	m	class:TComPattern
m_pbIPCMFlag	TComDataCU.h	/^  Bool*         m_pbIPCMFlag;                           \/\/\/< array of intra_pcm flags$/;"	m	class:TComDataCU
m_pbMergeFlag	TComDataCU.h	/^  Bool*         m_pbMergeFlag;                          \/\/\/< array of merge flags$/;"	m	class:TComDataCU
m_pcArlCoeff	TComDataCU.h	/^  TCoeff*       m_pcArlCoeff[MAX_NUM_COMPONENT];        \/\/\/< ARL coefficient buffer (0->Y, 1->Cb, 2->Cr)$/;"	m	class:TComDataCU
m_pcEstBitsSbac	TComTrQuant.h	/^  estBitsSbacStruct* m_pcEstBitsSbac;$/;"	m	class:TComTrQuant
m_pcIPCMSample	TComDataCU.h	/^  Pel*          m_pcIPCMSample[MAX_NUM_COMPONENT];      \/\/\/< PCM sample buffer (0->Y, 1->Cb, 2->Cr)$/;"	m	class:TComDataCU
m_pcMv	TComMotionInfo.h	/^  TComMv*   m_pcMv;$/;"	m	class:TComCUMvField
m_pcMvd	TComMotionInfo.h	/^  TComMv*   m_pcMvd;$/;"	m	class:TComCUMvField
m_pcPPS	TComSlice.h	/^  const TComPPS*             m_pcPPS;$/;"	m	class:TComSlice
m_pcPTL	TComSlice.h	/^  TComPTL               m_pcPTL;$/;"	m	class:TComVPS
m_pcPTL	TComSlice.h	/^  TComPTL          m_pcPTL;$/;"	m	class:TComSPS
m_pcPic	TComDataCU.h	/^  TComPic*      m_pcPic;                                \/\/\/< picture class pointer$/;"	m	class:TComDataCU
m_pcPic	TComSlice.h	/^  TComPic*                   m_pcPic;$/;"	m	class:TComSlice
m_pcPicYuvPred	TComPic.h	/^  TComPicYuv*           m_pcPicYuvPred;           \/\/  Prediction$/;"	m	class:TComPic
m_pcPicYuvResi	TComPic.h	/^  TComPicYuv*           m_pcPicYuvResi;           \/\/  Residual$/;"	m	class:TComPic
m_pcSPS	TComSlice.h	/^  const TComSPS*             m_pcSPS;$/;"	m	class:TComSlice
m_pcSlice	TComDataCU.h	/^  TComSlice*    m_pcSlice;                              \/\/\/< slice header pointer$/;"	m	class:TComDataCU
m_pcTrCoeff	TComDataCU.h	/^  TCoeff*       m_pcTrCoeff[MAX_NUM_COMPONENT];         \/\/\/< array of transform coefficient buffers (0->Y, 1->Cb, 2->Cr)$/;"	m	class:TComDataCU
m_pcVPS	TComSlice.h	/^  const TComVPS*             m_pcVPS;$/;"	m	class:TComSlice
m_pcmBitDepths	TComSlice.h	/^  Int              m_pcmBitDepths[MAX_NUM_CHANNEL_TYPE];$/;"	m	class:TComSPS
m_pcmLog2MaxSize	TComSlice.h	/^  UInt             m_pcmLog2MaxSize;$/;"	m	class:TComSPS
m_pePartSize	TComDataCU.h	/^  SChar*        m_pePartSize;                           \/\/\/< array of partition sizes$/;"	m	class:TComDataCU
m_pePartSize	TComPicSym.h	/^    SChar        * m_pePartSize;$/;"	m	struct:TComPicSym::DPBPerCtuData
m_pePredMode	TComDataCU.h	/^  SChar*        m_pePredMode;                           \/\/\/< array of prediction modes$/;"	m	class:TComDataCU
m_pePredMode	TComPicSym.h	/^    SChar        * m_pePredMode;$/;"	m	struct:TComPicSym::DPBPerCtuData
m_perfectReconstructionFlag	SEI.h	/^  Bool                           m_perfectReconstructionFlag;$/;"	m	class:SEIChromaResamplingFilterHint
m_persistentRiceAdaptationEnabledFlag	TComSlice.h	/^  Bool             m_persistentRiceAdaptationEnabledFlag;$/;"	m	class:TComSPSRExt
m_phQP	TComDataCU.h	/^  SChar*        m_phQP;                                 \/\/\/< array of QP values$/;"	m	class:TComDataCU
m_piPicOrg	TComPicYuv.h	/^  Pel*  m_piPicOrg[MAX_NUM_COMPONENT];              \/\/\/< m_apiPicBufY + m_iMarginLuma*getStride() + m_iMarginLuma$/;"	m	class:TComPicYuv
m_piROIOrigin	TComPattern.h	/^  Pel*  m_piROIOrigin;$/;"	m	class:TComPattern
m_piRefIdx	TComMotionInfo.h	/^  SChar*    m_piRefIdx;$/;"	m	class:TComCUMvField
m_piYuvExt	TComPrediction.h	/^  Pel*      m_piYuvExt[MAX_NUM_COMPONENT][NUM_PRED_BUF];$/;"	m	class:TComPrediction
m_picDpbOutputDelay	SEI.h	/^  UInt  m_picDpbOutputDelay;$/;"	m	class:SEIPictureTiming
m_picDpbOutputDuDelay	SEI.h	/^  UInt  m_picDpbOutputDuDelay;$/;"	m	class:SEIPictureTiming
m_picHeight	TComPicYuv.h	/^  Int   m_picHeight;                                \/\/\/< Height of picture in pixels$/;"	m	class:TComPicYuv
m_picHeight	TComSampleAdaptiveOffset.h	/^  Int m_picHeight;$/;"	m	class:TComSampleAdaptiveOffset
m_picHeightInLumaSamples	TComSlice.h	/^  UInt             m_picHeightInLumaSamples;$/;"	m	class:TComSPS
m_picInitQPMinus26	TComSlice.h	/^  Int              m_picInitQPMinus26;$/;"	m	class:TComPPS
m_picOrderCntDelta	SEI.h	/^  UInt m_picOrderCntDelta;$/;"	m	class:SEIProgressiveRefinementSegmentStart
m_picSAOEnabled	TComSampleAdaptiveOffset.h	/^  Bool m_picSAOEnabled[MAX_NUM_COMPONENT];$/;"	m	class:TComSampleAdaptiveOffset
m_picSptDpbOutputDuDelay	SEI.h	/^  Int m_picSptDpbOutputDuDelay;$/;"	m	class:SEIDecodingUnitInfo
m_picStruct	SEI.h	/^  UInt  m_picStruct;$/;"	m	class:SEIPictureTiming
m_picSym	TComPic.h	/^  TComPicSym            m_picSym;                 \/\/  Symbol$/;"	m	class:TComPic
m_picWidth	TComPicYuv.h	/^  Int   m_picWidth;                                 \/\/\/< Width of picture in pixels$/;"	m	class:TComPicYuv
m_picWidth	TComSampleAdaptiveOffset.h	/^  Int m_picWidth;$/;"	m	class:TComSampleAdaptiveOffset
m_picWidthInLumaSamples	TComSlice.h	/^  UInt             m_picWidthInLumaSamples;$/;"	m	class:TComSPS
m_pictureCtuArray	TComPicSym.h	/^  TComDataCU**  m_pictureCtuArray;        \/\/\/< array of CU data.$/;"	m	class:TComPicSym
m_pictureHash	SEI.h	/^  TComPictureHash m_pictureHash;$/;"	m	class:SEIDecodedPictureHash
m_plTempCoeff	TComTrQuant.h	/^  TCoeff* m_plTempCoeff;$/;"	m	class:TComTrQuant
m_poc	SEIFilmGrainSynthesizer.h	/^  uint32_t                     m_poc;$/;"	m	class:SEIFilmGrainSynthesizer
m_pocLSBLT	TComSlice.h	/^  Int  m_pocLSBLT[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_pocProportionalToTimingFlag	TComSlice.h	/^  Bool m_pocProportionalToTimingFlag;$/;"	m	class:TimingInfo
m_postLut	SEI.h	/^  std::vector<CRIlut> m_postLut[3];$/;"	m	class:SEIColourRemappingInfo
m_postLutNumValMinus1	SEI.h	/^  Int                 m_postLutNumValMinus1[3];$/;"	m	class:SEIColourRemappingInfo
m_pps	TComPicSym.h	/^  TComPPS       m_pps;$/;"	m	class:TComPicSym
m_ppsDeblockingFilterDisabledFlag	TComSlice.h	/^  Bool             m_ppsDeblockingFilterDisabledFlag;$/;"	m	class:TComPPS
m_ppsMap	TComSlice.h	/^  ParameterSetMap<TComPPS> m_ppsMap;$/;"	m	class:ParameterSetManager
m_ppsNuhTemporalIdPlus1	SEI.h	/^    std::vector<UInt> m_ppsNuhTemporalIdPlus1;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_ppsRangeExtension	TComSlice.h	/^  TComPPSRExt      m_ppsRangeExtension;$/;"	m	class:TComPPS
m_ppsRbspData	SEI.h	/^    std::vector< std::vector<uint8_t> > m_ppsRbspData;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_ppsRbspDataLength	SEI.h	/^    std::vector<UInt> m_ppsRbspDataLength;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_preLut	SEI.h	/^  std::vector<CRIlut> m_preLut[3];$/;"	m	class:SEIColourRemappingInfo
m_preLutNumValMinus1	SEI.h	/^  Int                 m_preLutNumValMinus1[3];$/;"	m	class:SEIColourRemappingInfo
m_preferredTransferCharacteristics	SEI.h	/^  UInt m_preferredTransferCharacteristics;$/;"	m	class:SEIAlternativeTransferCharacteristics
m_profileCompatibilityFlag	TComSlice.h	/^  Bool              m_profileCompatibilityFlag[32];$/;"	m	class:ProfileTierLevel
m_profileIdc	TComSlice.h	/^  Profile::Name     m_profileIdc;$/;"	m	class:ProfileTierLevel
m_profileSpace	TComSlice.h	/^  Int               m_profileSpace;$/;"	m	class:ProfileTierLevel
m_progressiveRefinementId	SEI.h	/^  UInt m_progressiveRefinementId;$/;"	m	class:SEIProgressiveRefinementSegmentEnd
m_progressiveRefinementId	SEI.h	/^  UInt m_progressiveRefinementId;$/;"	m	class:SEIProgressiveRefinementSegmentStart
m_progressiveSourceFlag	TComSlice.h	/^  Bool              m_progressiveSourceFlag;$/;"	m	class:ProfileTierLevel
m_projPictureHeight	SEI.h	/^  Int                   m_projPictureHeight;$/;"	m	class:SEIRegionWisePacking
m_projPictureWidth	SEI.h	/^  Int                   m_projPictureWidth;$/;"	m	class:SEIRegionWisePacking
m_projRegionHeight	SEI.h	/^  std::vector<UInt>     m_projRegionHeight;$/;"	m	class:SEIRegionWisePacking
m_projRegionLeft	SEI.h	/^  std::vector<UInt>     m_projRegionLeft;$/;"	m	class:SEIRegionWisePacking
m_projRegionWidth	SEI.h	/^  std::vector<UInt>     m_projRegionWidth;$/;"	m	class:SEIRegionWisePacking
m_puhCbf	TComDataCU.h	/^  UChar*        m_puhCbf[MAX_NUM_COMPONENT];            \/\/\/< array of coded block flags (CBF)$/;"	m	class:TComDataCU
m_puhDepth	TComDataCU.h	/^  UChar*        m_puhDepth;                             \/\/\/< array of depths$/;"	m	class:TComDataCU
m_puhHeight	TComDataCU.h	/^  UChar*        m_puhHeight;                            \/\/\/< array of heights$/;"	m	class:TComDataCU
m_puhInterDir	TComDataCU.h	/^  UChar*        m_puhInterDir;                          \/\/\/< array of inter directions$/;"	m	class:TComDataCU
m_puhIntraDir	TComDataCU.h	/^  UChar*        m_puhIntraDir[MAX_NUM_CHANNEL_TYPE];$/;"	m	class:TComDataCU
m_puhMergeIndex	TComDataCU.h	/^  UChar*        m_puhMergeIndex;                        \/\/\/< array of merge candidate indices$/;"	m	class:TComDataCU
m_puhTrIdx	TComDataCU.h	/^  UChar*        m_puhTrIdx;                             \/\/\/< array of transform indices$/;"	m	class:TComDataCU
m_puhTransformSkip	TComDataCU.h	/^  UChar*        m_puhTransformSkip[MAX_NUM_COMPONENT];  \/\/\/< array of transform skipping flags$/;"	m	class:TComDataCU
m_puhWidth	TComDataCU.h	/^  UChar*        m_puhWidth;                             \/\/\/< array of widths$/;"	m	class:TComDataCU
m_puiTileIdxMap	TComPicSym.h	/^  UInt*         m_puiTileIdxMap;       \/\/\/< the map of the tile index relative to CTU raster scan address$/;"	m	class:TComPicSym
m_qpBDOffset	TComSlice.h	/^  Int              m_qpBDOffset[MAX_NUM_CHANNEL_TYPE];$/;"	m	class:TComSPS
m_qpDelta	TComTrQuant.h	/^  Int     m_qpDelta[MAX_QP+1];$/;"	m	class:TComTrQuant
m_quantCoef	TComTrQuant.h	/^  Int      *m_quantCoef            [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM][SCALING_LIST_REM_NUM]; \/\/\/< array of quantization matrix coefficient 4x4$/;"	m	class:TComTrQuant
m_quincunxSamplingFlag	SEI.h	/^  Bool m_quincunxSamplingFlag;$/;"	m	class:SEIFramePacking
m_rapCpbParamsPresentFlag	SEI.h	/^  Bool m_rapCpbParamsPresentFlag;$/;"	m	class:SEIBufferingPeriod
m_rdpcmEnabledFlag	TComSlice.h	/^  Bool             m_rdpcmEnabledFlag[NUMBER_OF_RDPCM_SIGNALLING_MODES];$/;"	m	class:TComSPSRExt
m_receivedSettingsOnce	SEI.h	/^    Bool      m_receivedSettingsOnce; \/\/ used for decoder conformance checking. Other confidence flags must be unchanged once this flag is set.$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_recoveryPocCnt	SEI.h	/^  Int  m_recoveryPocCnt;$/;"	m	class:SEIRecoveryPoint
m_refIdc	TComSlice.h	/^  Int  m_refIdc[MAX_NUM_REF_PICS+1];$/;"	m	class:TComReferencePictureSet
m_refMatrixId	TComSlice.h	/^  UInt             m_refMatrixId                   [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM]; \/\/!< RefMatrixID$/;"	m	class:TComScalingList
m_refPicListModificationFlagL0	TComSlice.h	/^  Bool m_refPicListModificationFlagL0;$/;"	m	class:TComRefPicListModification
m_refPicListModificationFlagL1	TComSlice.h	/^  Bool m_refPicListModificationFlagL1;$/;"	m	class:TComRefPicListModification
m_refScreenLuminanceWhite	SEI.h	/^  Int    m_refScreenLuminanceWhite;$/;"	m	class:SEIToneMappingInfo
m_referencePictureSets	TComSlice.h	/^  std::vector<TComReferencePictureSet> m_referencePictureSets;$/;"	m	class:TComRPSList
m_regionId	TypeDef.h	/^  UInt m_regionId;$/;"	m	class:RNSEIWindow
m_regions	SEI.h	/^  RNSEIWindowVec m_regions; $/;"	m	class:RegionalSEI
m_regions	SEI.h	/^  RNSEIWindowVec m_regions;$/;"	m	class:SEIRegionalNesting
m_restrictedRefPicListsFlag	TComSlice.h	/^  Bool       m_restrictedRefPicListsFlag;$/;"	m	class:TComVUI
m_rightEdgePosInCtus	TComPicSym.h	/^  UInt      m_rightEdgePosInCtus;$/;"	m	class:TComTile
m_rnId	SEI.h	/^  UInt m_rnId;$/;"	m	class:SEIRegionalNesting
m_rnSeiMessages	SEI.h	/^  std::vector< SEIListOfIndices > m_rnSeiMessages;$/;"	m	class:SEIRegionalNesting
m_roiHeight	TComPattern.h	/^  Int   m_roiHeight;$/;"	m	class:TComPattern
m_roiPosX	TComPattern.h	/^  Int   m_roiPosX;$/;"	m	class:TComPattern
m_roiPosY	TComPattern.h	/^  Int   m_roiPosY;$/;"	m	class:TComPattern
m_roiWidth	TComPattern.h	/^  Int   m_roiWidth;$/;"	m	class:TComPattern
m_rpsIdx	TComSlice.h	/^  Int                        m_rpsIdx;               \/\/< index of used RPS in the SPS or -1 for local RPS in the slice header$/;"	m	class:TComSlice
m_rwpBottomGuardBandHeight	SEI.h	/^  std::vector<UChar>    m_rwpBottomGuardBandHeight;$/;"	m	class:SEIRegionWisePacking
m_rwpCancelFlag	SEI.h	/^  Bool                  m_rwpCancelFlag;$/;"	m	class:SEIRegionWisePacking
m_rwpGuardBandFlag	SEI.h	/^  std::vector<Bool>     m_rwpGuardBandFlag;$/;"	m	class:SEIRegionWisePacking
m_rwpGuardBandNotUsedForPredFlag	SEI.h	/^  std::vector<Bool>     m_rwpGuardBandNotUsedForPredFlag;$/;"	m	class:SEIRegionWisePacking
m_rwpGuardBandType	SEI.h	/^  std::vector<UChar>    m_rwpGuardBandType;$/;"	m	class:SEIRegionWisePacking
m_rwpLeftGuardBandWidth	SEI.h	/^  std::vector<UChar>    m_rwpLeftGuardBandWidth;$/;"	m	class:SEIRegionWisePacking
m_rwpPersistenceFlag	SEI.h	/^  Bool                  m_rwpPersistenceFlag;$/;"	m	class:SEIRegionWisePacking
m_rwpProjRegionTop	SEI.h	/^  std::vector<UInt>     m_rwpProjRegionTop;$/;"	m	class:SEIRegionWisePacking
m_rwpRightGuardBandWidth	SEI.h	/^  std::vector<UChar>    m_rwpRightGuardBandWidth;$/;"	m	class:SEIRegionWisePacking
m_rwpTopGuardBandHeight	SEI.h	/^  std::vector<UChar>    m_rwpTopGuardBandHeight;$/;"	m	class:SEIRegionWisePacking
m_rwpTransformType	SEI.h	/^  std::vector<UChar>    m_rwpTransformType;$/;"	m	class:SEIRegionWisePacking
m_sHelp	Debug.h	/^  std::string m_sHelp;$/;"	m	class:EnvVar
m_sName	Debug.h	/^  std::string m_sName;$/;"	m	class:EnvVar
m_sVal	Debug.h	/^  std::string m_sVal;$/;"	m	class:EnvVar
m_saoBlkParams	TComPicSym.h	/^  SAOBlkParam  *m_saoBlkParams;$/;"	m	class:TComPicSym
m_saoEnabledFlag	TComSlice.h	/^  Bool                       m_saoEnabledFlag[MAX_NUM_CHANNEL_TYPE];$/;"	m	class:TComSlice
m_sarHeight	TComSlice.h	/^  Int        m_sarHeight;$/;"	m	class:TComVUI
m_sarWidth	TComSlice.h	/^  Int        m_sarWidth;$/;"	m	class:TComVUI
m_scalingList	TComSlice.h	/^  TComScalingList  m_scalingList;                       \/\/!< ScalingList class$/;"	m	class:TComPPS
m_scalingList	TComSlice.h	/^  TComScalingList  m_scalingList;$/;"	m	class:TComSPS
m_scalingListCoef	TComSlice.h	/^  std::vector<Int> m_scalingListCoef               [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM]; \/\/!< quantization matrix$/;"	m	class:TComScalingList
m_scalingListDC	TComSlice.h	/^  Int              m_scalingListDC                 [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM]; \/\/!< the DC value of the matrix coefficient for 16x16$/;"	m	class:TComScalingList
m_scalingListEnabledFlag	TComSlice.h	/^  Bool             m_scalingListEnabledFlag;$/;"	m	class:TComSPS
m_scalingListEnabledFlag	TComTrQuant.h	/^  Bool     m_scalingListEnabledFlag;$/;"	m	class:TComTrQuant
m_scalingListPredModeFlagIsDPCM	TComSlice.h	/^  Bool             m_scalingListPredModeFlagIsDPCM [SCALING_LIST_SIZE_NUM][SCALING_LIST_NUM]; \/\/!< reference list index$/;"	m	class:TComScalingList
m_scalingListPresentFlag	TComSlice.h	/^  Bool             m_scalingListPresentFlag;$/;"	m	class:TComPPS
m_scalingListPresentFlag	TComSlice.h	/^  Bool             m_scalingListPresentFlag;$/;"	m	class:TComSPS
m_scanType	TComRom.cpp	/^  const COEFF_SCAN_TYPE m_scanType;$/;"	m	class:ScanGenerator	file:
m_sceneId	SEI.h	/^  UInt m_sceneId;$/;"	m	class:SEISceneInfo
m_sceneTransitionType	SEI.h	/^  UInt m_sceneTransitionType;$/;"	m	class:SEISceneInfo
m_secondSceneId	SEI.h	/^  UInt m_secondSceneId;$/;"	m	class:SEISceneInfo
m_seiMessage	SEI.h	/^    SEI *m_seiMessage;$/;"	m	struct:SEIRegionalNesting::SEIListOfIndices
m_seiMessage	SEI.h	/^  SEI *m_seiMessage;$/;"	m	class:RegionalSEI
m_selfContainedCvsFlag	SEI.h	/^  Bool m_selfContainedCvsFlag;$/;"	m	class:SEIActiveParameterSets
m_separateColourDescriptionPresentFlag	SEI.h	/^  Bool      m_separateColourDescriptionPresentFlag;$/;"	m	class:SEIFilmGrainCharacteristics
m_sigmoidMidpoint	SEI.h	/^  Int    m_sigmoidMidpoint;$/;"	m	class:SEIToneMappingInfo
m_sigmoidWidth	SEI.h	/^  Int    m_sigmoidWidth;$/;"	m	class:SEIToneMappingInfo
m_signDataHidingEnabledFlag	TComSlice.h	/^  Bool             m_signDataHidingEnabledFlag;$/;"	m	class:TComPPS
m_signLineBuf1	TComSampleAdaptiveOffset.h	/^  SChar* m_signLineBuf1;$/;"	m	class:TComSampleAdaptiveOffset
m_signLineBuf2	TComSampleAdaptiveOffset.h	/^  SChar* m_signLineBuf2;$/;"	m	class:TComSampleAdaptiveOffset
m_siiEnabled	SEI.h	/^  Bool                  m_siiEnabled;$/;"	m	class:SEIShutterIntervalInfo
m_siiFixedSIwithinCLVS	SEI.h	/^  Bool                  m_siiFixedSIwithinCLVS;$/;"	m	class:SEIShutterIntervalInfo
m_siiMaxSubLayersMinus1	SEI.h	/^  UInt                  m_siiMaxSubLayersMinus1;$/;"	m	class:SEIShutterIntervalInfo
m_siiNumUnitsInShutterInterval	SEI.h	/^  UInt                  m_siiNumUnitsInShutterInterval;$/;"	m	class:SEIShutterIntervalInfo
m_siiSubLayerNumUnitsInSI	SEI.h	/^  std::vector<UInt>     m_siiSubLayerNumUnitsInSI;$/;"	m	class:SEIShutterIntervalInfo
m_siiTimeScale	SEI.h	/^  UInt                  m_siiTimeScale;$/;"	m	class:SEIShutterIntervalInfo
m_sizeX	ContextModel3DBuffer.h	/^  const UInt    m_sizeX;        \/\/\/< X size of 3D buffer$/;"	m	class:ContextModel3DBuffer
m_sizeXY	ContextModel3DBuffer.h	/^  const UInt    m_sizeXY;       \/\/\/< X times Y size of 3D buffer$/;"	m	class:ContextModel3DBuffer
m_sizeXYZ	ContextModel3DBuffer.h	/^  const UInt    m_sizeXYZ;      \/\/\/< total size of 3D buffer$/;"	m	class:ContextModel3DBuffer
m_skipFlag	TComDataCU.h	/^  Bool*         m_skipFlag;                             \/\/\/< array of skip flags$/;"	m	class:TComDataCU
m_sliceArgument	TComSlice.h	/^  UInt                       m_sliceArgument;$/;"	m	class:TComSlice
m_sliceBits	TComSlice.h	/^  UInt                       m_sliceBits;$/;"	m	class:TComSlice
m_sliceCurEndCtuTsAddr	TComSlice.h	/^  UInt                       m_sliceCurEndCtuTsAddr;$/;"	m	class:TComSlice
m_sliceCurStartCtuTsAddr	TComSlice.h	/^  UInt                       m_sliceCurStartCtuTsAddr;$/;"	m	class:TComSlice
m_sliceHeaderExtensionPresentFlag	TComSlice.h	/^  Bool             m_sliceHeaderExtensionPresentFlag;$/;"	m	class:TComPPS
m_sliceIdx	TComSlice.h	/^  UInt                       m_sliceIdx;$/;"	m	class:TComSlice
m_sliceMode	TComSlice.h	/^  SliceConstraint            m_sliceMode;$/;"	m	class:TComSlice
m_sliceNsamples	TComTrQuant.h	/^  Int     m_sliceNsamples[LEVEL_RANGE+1];$/;"	m	class:TComTrQuant
m_sliceReorderingEnabledFlag	SEI.h	/^    Bool m_sliceReorderingEnabledFlag;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_sliceSegmentArgument	TComSlice.h	/^  UInt                       m_sliceSegmentArgument;$/;"	m	class:TComSlice
m_sliceSegmentBits	TComSlice.h	/^  UInt                       m_sliceSegmentBits;$/;"	m	class:TComSlice
m_sliceSegmentCurEndCtuTsAddr	TComSlice.h	/^  UInt                       m_sliceSegmentCurEndCtuTsAddr;$/;"	m	class:TComSlice
m_sliceSegmentCurStartCtuTsAddr	TComSlice.h	/^  UInt                       m_sliceSegmentCurStartCtuTsAddr;$/;"	m	class:TComSlice
m_sliceSegmentMode	TComSlice.h	/^  SliceConstraint            m_sliceSegmentMode;$/;"	m	class:TComSlice
m_sliceSumC	TComTrQuant.h	/^  Double  m_sliceSumC[LEVEL_RANGE+1] ;$/;"	m	class:TComTrQuant
m_snapshotId	SEI.h	/^  UInt m_snapshotId;$/;"	m	class:SEIPictureSnapshot
m_sopDescPocDelta	SEI.h	/^  Int m_sopDescPocDelta[MAX_NUM_PICS_IN_SOP];$/;"	m	class:SEISOPDescription
m_sopDescStRpsIdx	SEI.h	/^  UInt m_sopDescStRpsIdx[MAX_NUM_PICS_IN_SOP];$/;"	m	class:SEISOPDescription
m_sopDescTemporalId	SEI.h	/^  UInt m_sopDescTemporalId[MAX_NUM_PICS_IN_SOP];$/;"	m	class:SEISOPDescription
m_sopDescVclNaluType	SEI.h	/^  UInt m_sopDescVclNaluType[MAX_NUM_PICS_IN_SOP];$/;"	m	class:SEISOPDescription
m_sopSeqParameterSetId	SEI.h	/^  UInt m_sopSeqParameterSetId;$/;"	m	class:SEISOPDescription
m_sourceScanType	SEI.h	/^  UInt  m_sourceScanType;$/;"	m	class:SEIPictureTiming
m_spatialFlippingFlag	SEI.h	/^  Bool m_spatialFlippingFlag;$/;"	m	class:SEIFramePacking
m_sphereRotationCancelFlag	SEI.h	/^  Bool  m_sphereRotationCancelFlag;$/;"	m	class:SEISphereRotation
m_sphereRotationPersistenceFlag	SEI.h	/^  Bool  m_sphereRotationPersistenceFlag;$/;"	m	class:SEISphereRotation
m_sphereRotationPitch	SEI.h	/^  Int   m_sphereRotationPitch;$/;"	m	class:SEISphereRotation
m_sphereRotationRoll	SEI.h	/^  Int   m_sphereRotationRoll;$/;"	m	class:SEISphereRotation
m_sphereRotationYaw	SEI.h	/^  Int   m_sphereRotationYaw;$/;"	m	class:SEISphereRotation
m_sps	TComPicSym.h	/^  TComSPS       m_sps;$/;"	m	class:TComPicSym
m_spsMap	TComSlice.h	/^  ParameterSetMap<TComSPS> m_spsMap;$/;"	m	class:ParameterSetManager
m_spsRangeExtension	TComSlice.h	/^  TComSPSRExt      m_spsRangeExtension;$/;"	m	class:TComSPS
m_spsRbspData	SEI.h	/^    std::vector< std::vector<uint8_t> > m_spsRbspData;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_spsRbspDataLength	SEI.h	/^    std::vector<UInt> m_spsRbspDataLength;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_sqrtLambda	TComRdCost.h	/^  Double                  m_sqrtLambda;$/;"	m	class:TComRdCost
m_stLFCUParam	TComLoopFilter.h	/^  LFCUParam m_stLFCUParam;                   \/\/\/< status structure$/;"	m	class:TComLoopFilter
m_startOfCodedInterval	SEI.h	/^  std::vector<Int> m_startOfCodedInterval;$/;"	m	class:SEIToneMappingInfo
m_stride	TComRom.cpp	/^  const UInt m_stride;$/;"	m	class:ScanGenerator	file:
m_subCuOffsetInBuffer	TComPicYuv.h	/^  Int*  m_subCuOffsetInBuffer[MAX_NUM_CHANNEL_TYPE];\/\/\/< Gives an offset in the buffer for a given sub-CU (and channel), relative to start of CTU$/;"	m	class:TComPicYuv
m_subLayerLevelPresentFlag	TComSlice.h	/^  Bool m_subLayerLevelPresentFlag   [MAX_TLAYER-1];$/;"	m	class:TComPTL
m_subLayerPTL	TComSlice.h	/^  ProfileTierLevel m_subLayerPTL    [MAX_TLAYER-1];      \/\/ max. value of max_sub_layers_minus1 is MAX_TLAYER-1 (= 6)$/;"	m	class:TComPTL
m_subLayerProfilePresentFlag	TComSlice.h	/^  Bool m_subLayerProfilePresentFlag [MAX_TLAYER-1];$/;"	m	class:TComPTL
m_subPicCpbParamsInPicTimingSEIFlag	TComSlice.h	/^  Bool m_subPicCpbParamsInPicTimingSEIFlag;$/;"	m	class:TComHRD
m_subPicCpbParamsPresentFlag	TComSlice.h	/^  Bool m_subPicCpbParamsPresentFlag;$/;"	m	class:TComHRD
m_substreamSizes	TComSlice.h	/^  std::vector<UInt>          m_substreamSizes;$/;"	m	class:TComSlice
m_tMctsMvpIsValid	TComDataCU.h	/^  Bool          m_tMctsMvpIsValid;$/;"	m	class:TComDataCU
m_targetBitDepth	SEI.h	/^  Int    m_targetBitDepth;$/;"	m	class:SEIToneMappingInfo
m_targetFormatIdc	SEI.h	/^  Int                            m_targetFormatIdc;$/;"	m	class:SEIChromaResamplingFilterHint
m_targetPivotValue	SEI.h	/^  std::vector<Int> m_targetPivotValue;$/;"	m	class:SEIToneMappingInfo
m_tempPicYuv	TComSampleAdaptiveOffset.h	/^  TComPicYuv*   m_tempPicYuv; \/\/temporary buffer$/;"	m	class:TComSampleAdaptiveOffset
m_temporalId	NAL.h	/^  UInt        m_temporalId;  \/\/\/< temporal_id$/;"	m	struct:NALUnit
m_temporalLayerNonReferenceFlag	TComSlice.h	/^  Bool                       m_temporalLayerNonReferenceFlag;$/;"	m	class:TComSlice
m_tickDivisorMinus2	TComSlice.h	/^  UInt m_tickDivisorMinus2;$/;"	m	class:TComHRD
m_tier	ProfileLevelTierFeatures.h	/^    Level::Tier              m_tier;$/;"	m	class:ProfileLevelTierFeatures
m_tierFlag	TComSlice.h	/^  Level::Tier       m_tierFlag;$/;"	m	class:ProfileTierLevel
m_tileColumnWidth	TComSlice.h	/^  std::vector<Int> m_tileColumnWidth;$/;"	m	class:TComPPS
m_tileHeightInCtus	TComPicSym.h	/^  UInt      m_tileHeightInCtus;$/;"	m	class:TComTile
m_tileLeftTopPelPosX	TComPattern.h	/^  Int   m_tileLeftTopPelPosX;$/;"	m	class:TComPattern
m_tileLeftTopPelPosY	TComPattern.h	/^  Int   m_tileLeftTopPelPosY;$/;"	m	class:TComPattern
m_tileParameters	TComPicSym.h	/^  std::vector<TComTile> m_tileParameters;$/;"	m	class:TComPicSym
m_tileRightBottomPelPosX	TComPattern.h	/^  Int   m_tileRightBottomPelPosX;$/;"	m	class:TComPattern
m_tileRightBottomPelPosY	TComPattern.h	/^  Int   m_tileRightBottomPelPosY;$/;"	m	class:TComPattern
m_tileRowHeight	TComSlice.h	/^  std::vector<Int> m_tileRowHeight;$/;"	m	class:TComPPS
m_tileWidthInCtus	TComPicSym.h	/^  UInt      m_tileWidthInCtus;$/;"	m	class:TComTile
m_tile_set_data	SEI.h	/^  std::vector<TileSetData> m_tile_set_data;$/;"	m	class:SEITempMotionConstrainedTileSets
m_tilesEnabledFlag	TComSlice.h	/^  Bool             m_tilesEnabledFlag;                  \/\/!< Indicates the presence of tiles$/;"	m	class:TComPPS
m_tilesFixedStructureFlag	TComSlice.h	/^  Bool       m_tilesFixedStructureFlag;$/;"	m	class:TComVUI
m_timeScale	TComSlice.h	/^  UInt m_timeScale;$/;"	m	class:TimingInfo
m_timingInfo	TComSlice.h	/^  TimingInfo            m_timingInfo;$/;"	m	class:TComVPS
m_timingInfo	TComSlice.h	/^  TimingInfo m_timingInfo;$/;"	m	class:TComVUI
m_timingInfoPresentFlag	TComSlice.h	/^  Bool m_timingInfoPresentFlag;$/;"	m	class:TimingInfo
m_toneMapCancelFlag	SEI.h	/^  Bool   m_toneMapCancelFlag;$/;"	m	class:SEIToneMappingInfo
m_toneMapId	SEI.h	/^  Int    m_toneMapId;$/;"	m	class:SEIToneMappingInfo
m_toneMapPersistenceFlag	SEI.h	/^  Bool   m_toneMapPersistenceFlag;$/;"	m	class:SEIToneMappingInfo
m_top_left_tile_index	SEI.h	/^      std::vector<Int> m_top_left_tile_index;  \/\/[tileSetIdx][tileIdx];$/;"	m	class:SEITempMotionConstrainedTileSets::TileSetData
m_totalStates	ContextModel.h	/^  static const  UInt  m_totalStates = (1 << CONTEXT_STATE_BITS) * 2; \/\/*2 for MPS = [0|1]$/;"	m	class:ContextModel
m_transferCharacteristics	TComSlice.h	/^  Int        m_transferCharacteristics;$/;"	m	class:TComVUI
m_transformSkipContextEnabledFlag	TComSlice.h	/^  Bool             m_transformSkipContextEnabledFlag;$/;"	m	class:TComSPSRExt
m_transformSkipRotationEnabledFlag	TComSlice.h	/^  Bool             m_transformSkipRotationEnabledFlag;$/;"	m	class:TComSPSRExt
m_trueMotionFlag	SEI.h	/^    Bool      m_trueMotionFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionHeader
m_ucState	ContextModel.h	/^  UChar         m_ucState;                                                                  \/\/\/< internal state variable$/;"	m	class:ContextModel
m_uhTotalDepth	TComPicSym.h	/^  UChar         m_uhTotalDepth;       \/\/\/< max. depth$/;"	m	class:TComPicSym
m_uiBitCounter	TComBitCounter.h	/^  UInt  m_uiBitCounter;$/;"	m	class:TComBitCounter
m_uiBitsForPOC	TComSlice.h	/^  UInt             m_uiBitsForPOC;$/;"	m	class:TComSPS
m_uiCUPelX	TComDataCU.h	/^  UInt          m_uiCUPelX;                             \/\/\/< CU position in a pixel (X)$/;"	m	class:TComDataCU
m_uiCUPelY	TComDataCU.h	/^  UInt          m_uiCUPelY;                             \/\/\/< CU position in a pixel (Y)$/;"	m	class:TComDataCU
m_uiCurrSliceIdx	TComPic.h	/^  UInt                  m_uiCurrSliceIdx;         \/\/ Index of current slice$/;"	m	class:TComPic
m_uiMaxCUHeight	TComSlice.h	/^  UInt             m_uiMaxCUHeight;$/;"	m	class:TComSPS
m_uiMaxCUWidth	TComSlice.h	/^  UInt             m_uiMaxCUWidth;$/;"	m	class:TComSPS
m_uiMaxCuDQPDepth	TComSlice.h	/^  UInt             m_uiMaxCuDQPDepth;$/;"	m	class:TComPPS
m_uiMaxDecPicBuffering	TComSlice.h	/^  UInt                  m_uiMaxDecPicBuffering[MAX_TLAYER];$/;"	m	class:TComVPS
m_uiMaxDecPicBuffering	TComSlice.h	/^  UInt             m_uiMaxDecPicBuffering[MAX_TLAYER];$/;"	m	class:TComSPS
m_uiMaxLatencyIncrease	TComSlice.h	/^  UInt                  m_uiMaxLatencyIncrease[MAX_TLAYER]; \/\/ Really max latency increase plus 1 (value 0 expresses no limit)$/;"	m	class:TComVPS
m_uiMaxLatencyIncreasePlus1	TComSlice.h	/^  UInt             m_uiMaxLatencyIncreasePlus1[MAX_TLAYER];$/;"	m	class:TComSPS
m_uiMaxLayers	TComSlice.h	/^  UInt                  m_uiMaxLayers;$/;"	m	class:TComVPS
m_uiMaxTLayers	TComSlice.h	/^  UInt                  m_uiMaxTLayers;$/;"	m	class:TComVPS
m_uiMaxTLayers	TComSlice.h	/^  UInt             m_uiMaxTLayers;           \/\/ maximum number of temporal layers$/;"	m	class:TComSPS
m_uiMaxTotalCUDepth	TComSlice.h	/^  UInt             m_uiMaxTotalCUDepth; \/\/\/< Total CU depth, relative to the smallest possible transform block size.$/;"	m	class:TComSPS
m_uiMaxTrSize	TComSlice.h	/^  UInt             m_uiMaxTrSize;$/;"	m	class:TComSPS
m_uiMaxTrSize	TComTrQuant.h	/^  UInt     m_uiMaxTrSize;$/;"	m	class:TComTrQuant
m_uiMinCUHeight	TComPicSym.h	/^  UInt          m_uiMinCUHeight;$/;"	m	class:TComPicSym
m_uiMinCUWidth	TComPicSym.h	/^  UInt          m_uiMinCUWidth;$/;"	m	class:TComPicSym
m_uiNumPartition	TComDataCU.h	/^  UInt          m_uiNumPartition;                       \/\/\/< total number of minimum partitions in a CU$/;"	m	class:TComDataCU
m_uiNumPartition	TComMotionInfo.h	/^  UInt      m_uiNumPartition;$/;"	m	class:TComCUMvField
m_uiNumPartitions	TComLoopFilter.h	/^  UInt      m_uiNumPartitions;$/;"	m	class:TComLoopFilter
m_uiPCMLog2MinSize	TComSlice.h	/^  UInt             m_uiPCMLog2MinSize;$/;"	m	class:TComSPS
m_uiQuadtreeTULog2MaxSize	TComSlice.h	/^  UInt             m_uiQuadtreeTULog2MaxSize;$/;"	m	class:TComSPS
m_uiQuadtreeTULog2MinSize	TComSlice.h	/^  UInt             m_uiQuadtreeTULog2MinSize;$/;"	m	class:TComSPS
m_uiQuadtreeTUMaxDepthInter	TComSlice.h	/^  UInt             m_uiQuadtreeTUMaxDepthInter;$/;"	m	class:TComSPS
m_uiQuadtreeTUMaxDepthIntra	TComSlice.h	/^  UInt             m_uiQuadtreeTUMaxDepthIntra;$/;"	m	class:TComSPS
m_uiRDOQOffset	TComTrQuant.h	/^  UInt     m_uiRDOQOffset;$/;"	m	class:TComTrQuant
m_uiTLayer	TComPic.h	/^  UInt                  m_uiTLayer;               \/\/  Temporal layer$/;"	m	class:TComPic
m_uiTLayer	TComSlice.h	/^  UInt                       m_uiTLayer;$/;"	m	class:TComSlice
m_uiTotalBins	TComDataCU.h	/^  UInt          m_uiTotalBins;                          \/\/\/< sum of partition bins$/;"	m	class:TComDataCU
m_uiTotalBits	TComDataCU.h	/^  UInt          m_uiTotalBits;                          \/\/\/< sum of partition bits$/;"	m	class:TComDataCU
m_uiTotalDistortion	TComDataCU.h	/^  Distortion    m_uiTotalDistortion;                    \/\/\/< sum of partition distortion$/;"	m	class:TComDataCU
m_uniformSpacingFlag	TComSlice.h	/^  Bool             m_uniformSpacingFlag;$/;"	m	class:TComPPS
m_unitSize	TComDataCU.h	/^  Int           m_unitSize;                             \/\/\/< size of a "minimum partition"$/;"	m	class:TComDataCU
m_upsampledAspectRatio	SEI.h	/^  Bool m_upsampledAspectRatio;$/;"	m	class:SEIFramePacking
m_useAMP	TComSlice.h	/^  Bool             m_useAMP;$/;"	m	class:TComSPS
m_useDQP	TComSlice.h	/^  Bool             m_useDQP;$/;"	m	class:TComPPS
m_usePCM	TComSlice.h	/^  Bool             m_usePCM;$/;"	m	class:TComSPS
m_useRDOQ	TComTrQuant.h	/^  Bool     m_useRDOQ;$/;"	m	class:TComTrQuant
m_useRDOQTS	TComTrQuant.h	/^  Bool     m_useRDOQTS;$/;"	m	class:TComTrQuant
m_useSelectiveRDOQ	TComTrQuant.h	/^  Bool     m_useSelectiveRDOQ;$/;"	m	class:TComTrQuant
m_useStrongIntraSmoothing	TComSlice.h	/^  Bool             m_useStrongIntraSmoothing;$/;"	m	class:TComSPS
m_useTransformSkip	TComSlice.h	/^  Bool             m_useTransformSkip;$/;"	m	class:TComPPS
m_useTransformSkipFast	TComTrQuant.h	/^  Bool     m_useTransformSkipFast;$/;"	m	class:TComTrQuant
m_useWeightedBiPred	TComSlice.h	/^  Bool             m_useWeightedBiPred;                 \/\/!< Use of Weighting Bi-Prediction (B_SLICE)$/;"	m	class:TComPPS
m_used	TComSlice.h	/^  Bool m_used[MAX_NUM_REF_PICS];$/;"	m	class:TComReferencePictureSet
m_usedByCurrPicLtSPSFlag	TComSlice.h	/^  Bool             m_usedByCurrPicLtSPSFlag[MAX_NUM_LONG_TERM_REF_PICS];$/;"	m	class:TComSPS
m_userData	SEI.h	/^  std::vector<UChar> m_userData;$/;"	m	class:SEIUserDataRegistered
m_userData	SEI.h	/^  std::vector<UChar> m_userData;$/;"	m	class:SEIUserDataUnregistered
m_uuid_iso_iec_11578	SEI.h	/^  UChar m_uuid_iso_iec_11578[ISO_IEC_11578_LEN];$/;"	m	class:SEIUserDataUnregistered
m_vSliceCUDataLink	TComPic.h	/^  std::vector<std::vector<TComDataCU*> > m_vSliceCUDataLink;$/;"	m	class:TComPic
m_vclHrdParametersPresentFlag	TComSlice.h	/^  Bool m_vclHrdParametersPresentFlag;$/;"	m	class:TComHRD
m_verChromaFilterIdc	SEI.h	/^  Int                            m_verChromaFilterIdc;$/;"	m	class:SEIChromaResamplingFilterHint
m_verFilterCoeff	SEI.h	/^  std::vector<std::vector<Int> > m_verFilterCoeff;$/;"	m	class:SEIChromaResamplingFilterHint
m_verFilteringFieldProcessingFlag	SEI.h	/^  Bool                           m_verFilteringFieldProcessingFlag;$/;"	m	class:SEIChromaResamplingFilterHint
m_videoFormat	TComSlice.h	/^  Int        m_videoFormat;$/;"	m	class:TComVUI
m_videoFullRangeFlag	TComSlice.h	/^  Bool       m_videoFullRangeFlag;$/;"	m	class:TComVUI
m_videoSignalTypePresentFlag	TComSlice.h	/^  Bool       m_videoSignalTypePresentFlag;$/;"	m	class:TComVUI
m_vpsMap	TComSlice.h	/^  ParameterSetMap<TComVPS> m_vpsMap;$/;"	m	class:ParameterSetManager
m_vpsRbspData	SEI.h	/^    std::vector< std::vector<uint8_t> > m_vpsRbspData;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_vpsRbspDataLength	SEI.h	/^    std::vector<UInt> m_vpsRbspDataLength;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
m_vuiParameters	TComSlice.h	/^  TComVUI          m_vuiParameters;$/;"	m	class:TComSPS
m_vuiParametersPresentFlag	TComSlice.h	/^  Bool             m_vuiParametersPresentFlag;$/;"	m	class:TComSPS
m_weightACDCParam	TComSlice.h	/^  WPACDCParam                m_weightACDCParam[MAX_NUM_COMPONENT];$/;"	m	class:TComSlice
m_weightPredTable	TComSlice.h	/^  WPScalingParam             m_weightPredTable[NUM_REF_PIC_LIST_01][MAX_NUM_REF][MAX_NUM_COMPONENT]; \/\/ [REF_PIC_LIST_0 or REF_PIC_LIST_1][refIdx][0:Y, 1:U, 2:V]$/;"	m	class:TComSlice
m_width	SEIFilmGrainSynthesizer.h	/^  uint32_t                     m_width;$/;"	m	class:SEIFilmGrainSynthesizer
m_winBottomOffset	TypeDef.h	/^  Int  m_winBottomOffset;$/;"	m	class:Window
m_winLeftOffset	TypeDef.h	/^  Int  m_winLeftOffset;$/;"	m	class:Window
m_winRightOffset	TypeDef.h	/^  Int  m_winRightOffset;$/;"	m	class:Window
m_winTopOffset	TypeDef.h	/^  Int  m_winTopOffset;$/;"	m	class:Window
m_winUnitX	TComSlice.cpp	/^const Int TComSPS::m_winUnitX[]={1,2,2,1};$/;"	m	class:TComSPS	file:
m_winUnitX	TComSlice.h	/^  static const Int m_winUnitX[NUM_CHROMA_FORMAT];$/;"	m	class:TComSPS
m_winUnitY	TComSlice.cpp	/^const Int TComSPS::m_winUnitY[]={1,2,1,1};$/;"	m	class:TComSPS	file:
m_winUnitY	TComSlice.h	/^  static const Int m_winUnitY[NUM_CHROMA_FORMAT];$/;"	m	class:TComSPS
m_xsdMetricType	SEI.h	/^    UInt m_xsdMetricType;$/;"	m	class:SEIGreenMetadataInfo
m_xsdMetricValue	SEI.h	/^    UInt m_xsdMetricValue;$/;"	m	class:SEIGreenMetadataInfo
mainLevelTierInfo	ProfileLevelTierFeatures.cpp	/^static const LevelTierFeatures mainLevelTierInfo[] =$/;"	v	file:
mapping	TypeDef.h	/^  std::vector< std::pair<Int, Int> > mapping;          \/\/\/< first=luma level, second=delta QP.$/;"	m	struct:LumaLevelToDeltaQPMapping
mappings_ep	TComCodingStatistics.h	/^        std::map<std::string, SStat> mappings_ep;$/;"	m	class:TComCodingStatistics::TComCodingStatisticsData
maxBitDepth	ProfileLevelTierFeatures.h	/^  UInt                     maxBitDepth;$/;"	m	struct:ProfileFeatures
maxBr	ProfileLevelTierFeatures.h	/^  UInt        maxBr[Level::NUMBER_OF_TIERS];     \/\/ in units of BrVclFactor or BrNalFactor bits\/s$/;"	m	struct:LevelTierFeatures
maxChromaFormat	ProfileLevelTierFeatures.h	/^  ChromaFormat             maxChromaFormat;$/;"	m	struct:ProfileFeatures
maxCpb	ProfileLevelTierFeatures.h	/^  UInt        maxCpb[Level::NUMBER_OF_TIERS];    \/\/ in units of CpbVclFactor or CpbNalFactor bits$/;"	m	struct:LevelTierFeatures
maxLumaPs	ProfileLevelTierFeatures.h	/^  UInt        maxLumaPs;$/;"	m	struct:LevelTierFeatures
maxLumaSr	ProfileLevelTierFeatures.h	/^  UInt64      maxLumaSr;$/;"	m	struct:LevelTierFeatures
maxLuminance	TypeDef.h	/^  UInt      maxLuminance;$/;"	m	struct:TComSEIMasteringDisplay
maxMethodWeight	TypeDef.h	/^  Double                             maxMethodWeight;  \/\/\/< weight of max luma value when mode = 2$/;"	m	struct:LumaLevelToDeltaQPMapping
maxSliceSegmentsPerPicture	ProfileLevelTierFeatures.h	/^  UInt        maxSliceSegmentsPerPicture;$/;"	m	struct:LevelTierFeatures
maxTileCols	ProfileLevelTierFeatures.h	/^  UInt        maxTileCols;$/;"	m	struct:LevelTierFeatures
maxTileRows	ProfileLevelTierFeatures.h	/^  UInt        maxTileRows;$/;"	m	struct:LevelTierFeatures
mbProcessLastOfLevel	TComTU.h	/^    Bool          mbProcessLastOfLevel; \/\/ if true, then if size n\/2 x n\/2 is invalid, the nxn block for a channel is processed only for the last block, not the first.$/;"	m	class:TComTU
mctsHeight	SEI.h	/^    UInt mctsHeight;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
mctsWidth	SEI.h	/^    UInt mctsWidth;$/;"	m	struct:SEIMCTSExtractionInfoSet::MCTSExtractionInfo
md5_block	TComPicYuvMD5.cpp	/^static Void md5_block(MD5& md5, const Pel* plane, UInt n)$/;"	f	file:
md5_plane	TComPicYuvMD5.cpp	/^static Void md5_plane(MD5& md5, const Pel* plane, UInt width, UInt height, UInt stride)$/;"	f	file:
method	SEI.h	/^  HashType method;$/;"	m	class:SEIDecodedPictureHash
minCrBase	ProfileLevelTierFeatures.h	/^  UInt        minCrBase[Level::NUMBER_OF_TIERS];$/;"	m	struct:LevelTierFeatures
minCrScaleFactorx10	ProfileLevelTierFeatures.h	/^  UInt                     minCrScaleFactorx10;         \/\/ currently not used for checking$/;"	m	struct:ProfileFeatures
minLuminance	TypeDef.h	/^  UInt      minLuminance;$/;"	m	struct:TComSEIMasteringDisplay
minTileColumnWidthInLumaSamples	ProfileLevelTierFeatures.h	/^  UInt                     minTileColumnWidthInLumaSamples;$/;"	m	struct:ProfileFeatures
minTileRowHeightInLumaSamples	ProfileLevelTierFeatures.h	/^  UInt                     minTileRowHeightInLumaSamples;$/;"	m	struct:ProfileFeatures
minutesFlag	TypeDef.h	/^  Bool minutesFlag;$/;"	m	struct:TComSEITimeSet
minutesValue	TypeDef.h	/^  Int  minutesValue;$/;"	m	struct:TComSEITimeSet
mode	TypeDef.h	/^  LumaLevelToDQPMode                 mode;             \/\/\/< use deltaQP determined by block luma level$/;"	m	struct:LumaLevelToDeltaQPMapping
modeIdc	TypeDef.h	/^  SAOMode modeIdc; \/\/ NEW, MERGE, OFF$/;"	m	struct:SAOOffset
motionCompensation	TComPrediction.cpp	/^Void TComPrediction::motionCompensation ( TComDataCU* pcCU, TComYuv* pcYuvPred, RefPicList eRefPicList, Int iPartIdx )$/;"	f	class:TComPrediction
mpParent	TComTU.h	/^    TComTU       *mpParent;$/;"	m	class:TComTU
mpcCU	TComTU.h	/^    TComDataCU   *mpcCU;$/;"	m	class:TComTU
nalUnitTypeToString	TComRom.cpp	/^const TChar* nalUnitTypeToString(NalUnitType type)$/;"	f
nextSection	TComTU.cpp	/^Bool TComTURecurse::nextSection(const TComTU &parent)$/;"	f	class:TComTURecurse
noWeightOffsetUnidir	TComWeightPrediction.cpp	/^static inline Pel noWeightOffsetUnidir( Pel P0, Int round, Int shift, Int clipBD)$/;"	f	file:
noWeightUnidir	TComWeightPrediction.cpp	/^static inline Pel noWeightUnidir( Pel P0, Int round, Int shift, Int offset, Int clipBD)$/;"	f	file:
nonDiagonalScan8x8ContextOffset	ContextTables.h	/^static const UInt nonDiagonalScan8x8ContextOffset        [MAX_NUM_CHANNEL_TYPE]                          = {  6,               0              };$/;"	v
notFirstGroupNeighbourhoodContextOffset	ContextTables.h	/^static const UInt notFirstGroupNeighbourhoodContextOffset[MAX_NUM_CHANNEL_TYPE]                          = {  3,               0              };$/;"	v
numClockTs	SEI.h	/^  UInt numClockTs;$/;"	m	class:SEITimeCode
numEmulationPreventionBytesRead	TComBitStream.h	/^  UInt      numEmulationPreventionBytesRead     ()                                   { return (UInt) m_emulationPreventionByteLocation.size();    }$/;"	f	class:TComInputBitstream
numModelValues	SEI.h	/^    UChar numModelValues; \/\/ this must be the same as intensityValues[*].compModelValue.size()$/;"	m	struct:SEIFilmGrainCharacteristics::CompModel
numSpatialMVPCandidates	TComMotionInfo.h	/^  UInt   numSpatialMVPCandidates;$/;"	m	struct:_AMVPInfo
numSpsIdsMinus1	SEI.h	/^  Int numSpsIdsMinus1;$/;"	m	class:SEIActiveParameterSets
numUnitFieldBasedFlag	TypeDef.h	/^  Bool numUnitFieldBasedFlag;$/;"	m	struct:TComSEITimeSet
numberOfFrames	TypeDef.h	/^  Int  numberOfFrames;$/;"	m	struct:TComSEITimeSet
o	TComSlice.h	/^  Int  o;$/;"	m	struct:WPScalingParam
objLabelIdx	SEI.h	/^    UInt objLabelIdx;            \/\/ only valid if bObjectLabelValid$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
objectCancelFlag	SEI.h	/^    Bool objectCancelFlag;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
objectConfidence	SEI.h	/^    UInt objectConfidence;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
objectLabelValid	SEI.h	/^    Bool objectLabelValid;$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
offset	TComSlice.h	/^    Int offset[2]; \/* two chroma components *\/$/;"	m	union:ChromaQpAdj::__anon5
offset	TComSlice.h	/^  Int  offset;$/;"	m	struct:WPScalingParam
offset	TypeDef.h	/^  Int offset[MAX_NUM_SAO_CLASSES];$/;"	m	struct:SAOOffset
offsetBlock	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::offsetBlock(const Int channelBitDepth, Int typeIdx, Int* offset$/;"	f	class:TComSampleAdaptiveOffset
offsetCTU	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::offsetCTU(Int ctuRsAddr, TComPicYuv* srcYuv, TComPicYuv* resYuv, SAOBlkParam& saoblkParam, TComPic* pPic)$/;"	f	class:TComSampleAdaptiveOffset
offsetParam	TypeDef.h	/^  SAOOffset offsetParam[MAX_NUM_COMPONENT];$/;"	m	struct:SAOBlkParam
onlyIRAPPictures	ProfileLevelTierFeatures.h	/^  Bool onlyIRAPPictures()                    const { return generalIntraConstraintFlag; }$/;"	f	struct:ProfileFeatures
operator !=	TComMv.h	/^  Bool operator!= ( const TComMv& rcMv ) const$/;"	f	class:TComMv
operator !=	TypeDef.h	/^  Bool operator!=(const TComPictureHash &other) const$/;"	f	struct:TComPictureHash
operator +	TComMv.h	/^  const TComMv operator + ( const TComMv& rcMv ) const$/;"	f	class:TComMv
operator +=	TComCodingStatistics.h	/^      SStat &operator+=(const SStat &src)$/;"	f	struct:TComCodingStatistics::SStat
operator +=	TComList.h	/^  TComList& operator += ( const TComList& rcTComList)$/;"	f	class:TComList
operator +=	TComMv.h	/^  const TComMv& operator += (const TComMv& rcMv)$/;"	f	class:TComMv
operator -	TComMv.h	/^  const TComMv operator - ( const TComMv& rcMv ) const$/;"	f	class:TComMv
operator -=	TComMv.h	/^  const TComMv& operator-= (const TComMv& rcMv)$/;"	f	class:TComMv
operator <	SEI.h	/^    bool operator < (const CRIlut& a) const$/;"	f	struct:SEIColourRemappingInfo::CRIlut
operator <<	SEI.cpp	/^std::ostream& operator<<(std::ostream  &os, RNSEIWindow const &region)$/;"	f
operator <<=	TComMv.h	/^  const TComMv& operator<<= (const Int i)$/;"	f	class:TComMv
operator =	TComSampleAdaptiveOffset.cpp	/^const SAOBlkParam& SAOBlkParam::operator= (const SAOBlkParam& src)$/;"	f	class:SAOBlkParam
operator =	TComSampleAdaptiveOffset.cpp	/^const SAOOffset& SAOOffset::operator= (const SAOOffset& src)$/;"	f	class:SAOOffset
operator ==	TComMv.h	/^  Bool operator== ( const TComMv& rcMv ) const$/;"	f	class:TComMv
operator ==	TypeDef.h	/^  Bool operator == (RNSEIWindow const &rhs) const$/;"	f	class:RNSEIWindow
operator ==	TypeDef.h	/^  Bool operator == (const Window &rhs) const$/;"	f	class:Window
operator ==	TypeDef.h	/^  Bool operator==(const TComPictureHash &other) const$/;"	f	struct:TComPictureHash
operator >>=	TComMv.h	/^  const TComMv& operator>>= (const Int i)$/;"	f	class:TComMv
operator []	TypeDef.h	/^  SAOOffset& operator[](Int compIdx){ return offsetParam[compIdx];}$/;"	f	struct:SAOBlkParam
outputScalingListHelp	TComSlice.cpp	/^static Void outputScalingListHelp(std::ostream &os)$/;"	f	file:
outputScalingLists	TComSlice.cpp	/^Void TComScalingList::outputScalingLists(std::ostream &os) const$/;"	f	class:TComScalingList
pCur	TComRdCost.h	/^  const Pel*            pCur;$/;"	m	class:DistParam
pLevelTiersListInfo	ProfileLevelTierFeatures.h	/^  const LevelTierFeatures *pLevelTiersListInfo;$/;"	m	struct:ProfileFeatures
pNaluData	TComSlice.h	/^    std::vector<UChar>   *pNaluData; \/\/ Can be null$/;"	m	struct:ParameterSetMap::MapData
pNameString	ProfileLevelTierFeatures.h	/^  const TChar            *pNameString;$/;"	m	struct:ProfileFeatures
pOrg	TComRdCost.h	/^  const Pel*            pOrg;$/;"	m	class:DistParam
parameterSet	TComSlice.h	/^    Tm*                   parameterSet;$/;"	m	struct:ParameterSetMap::MapData
partIdxStepShift	TComTU.cpp	/^static     const UInt         partIdxStepShift  [TComTU::NUMBER_OF_SPLIT_MODES] = { 0, 1, 2 };$/;"	v	file:
partSizeToString	Debug.cpp	/^const TChar *partSizeToString[NUMBER_OF_PART_SIZES]={"2Nx2N(0)", "2NxN(1)", "Nx2N(2)", "NxN(3)", "2Nx(N\/2+3N\/2)(4)", "2Nx(3N\/2+N\/2)(5)", "(N\/2+3N\/2)x2N(6)", "(3N\/2+N\/2)x2N(7)"};$/;"	v
partialButterfly16	TComTrQuant.cpp	/^Void partialButterfly16(TCoeff *src, TCoeff *dst, Int shift, Int line)$/;"	f
partialButterfly32	TComTrQuant.cpp	/^Void partialButterfly32(TCoeff *src, TCoeff *dst, Int shift, Int line)$/;"	f
partialButterfly4	TComTrQuant.cpp	/^Void partialButterfly4(TCoeff *src, TCoeff *dst, Int shift, Int line)$/;"	f
partialButterfly8	TComTrQuant.cpp	/^Void partialButterfly8(TCoeff *src, TCoeff *dst, Int shift, Int line)$/;"	f
partialButterflyInverse16	TComTrQuant.cpp	/^Void partialButterflyInverse16(TCoeff *src, TCoeff *dst, Int shift, Int line, const TCoeff outputMinimum, const TCoeff outputMaximum)$/;"	f
partialButterflyInverse32	TComTrQuant.cpp	/^Void partialButterflyInverse32(TCoeff *src, TCoeff *dst, Int shift, Int line, const TCoeff outputMinimum, const TCoeff outputMaximum)$/;"	f
partialButterflyInverse4	TComTrQuant.cpp	/^Void partialButterflyInverse4(TCoeff *src, TCoeff *dst, Int shift, Int line, const TCoeff outputMinimum, const TCoeff outputMaximum)$/;"	f
partialButterflyInverse8	TComTrQuant.cpp	/^Void partialButterflyInverse8(TCoeff *src, TCoeff *dst, Int shift, Int line, const TCoeff outputMinimum, const TCoeff outputMaximum)$/;"	f
partialObjectFlag	SEI.h	/^    Bool partialObjectFlag;        \/\/ only valid if bPartialObjectFlagValid$/;"	m	struct:SEIAnnotatedRegions::AnnotatedRegionObject
payloadType	SEI.h	/^    PayloadType payloadType() const { return  DEINTERLACE_FIELD_IDENTIFICATION; }$/;"	f	class:SEIDeinterlaceFieldIdentification
payloadType	SEI.h	/^    PayloadType payloadType() const { return CONTENT_LIGHT_LEVEL_INFO; }$/;"	f	class:SEIContentLightLevelInfo
payloadType	SEI.h	/^    PayloadType payloadType() const { return GREEN_METADATA; }$/;"	f	class:SEIGreenMetadataInfo
payloadType	SEI.h	/^    PayloadType payloadType() const { return MASTERING_DISPLAY_COLOUR_VOLUME; }$/;"	f	class:SEIMasteringDisplayColourVolume
payloadType	SEI.h	/^    PayloadType payloadType() const { return MCTS_EXTRACTION_INFO_SET; }$/;"	f	class:SEIMCTSExtractionInfoSet
payloadType	SEI.h	/^  PayloadType payloadType() const { return ACTIVE_PARAMETER_SETS; }$/;"	f	class:SEIActiveParameterSets
payloadType	SEI.h	/^  PayloadType payloadType() const { return ALTERNATIVE_TRANSFER_CHARACTERISTICS; }$/;"	f	class:SEIAlternativeTransferCharacteristics
payloadType	SEI.h	/^  PayloadType payloadType() const { return AMBIENT_VIEWING_ENVIRONMENT; }$/;"	f	class:SEIAmbientViewingEnvironment
payloadType	SEI.h	/^  PayloadType payloadType() const { return ANNOTATED_REGIONS; }$/;"	f	class:SEIAnnotatedRegions
payloadType	SEI.h	/^  PayloadType payloadType() const { return BUFFERING_PERIOD; }$/;"	f	class:SEIBufferingPeriod
payloadType	SEI.h	/^  PayloadType payloadType() const { return CODED_REGION_COMPLETION; }$/;"	f	class:SEICodedRegionCompletion
payloadType	SEI.h	/^  PayloadType payloadType() const { return COLOUR_REMAPPING_INFO; }$/;"	f	class:SEIColourRemappingInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return CONTENT_COLOUR_VOLUME; }$/;"	f	class:SEIContentColourVolume
payloadType	SEI.h	/^  PayloadType payloadType() const { return CUBEMAP_PROJECTION; }$/;"	f	class:SEICubemapProjection
payloadType	SEI.h	/^  PayloadType payloadType() const { return DECODED_PICTURE_HASH; }$/;"	f	class:SEIDecodedPictureHash
payloadType	SEI.h	/^  PayloadType payloadType() const { return DECODING_UNIT_INFO; }$/;"	f	class:SEIDecodingUnitInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return DEPENDENT_RAP_INDICATION; }$/;"	f	class:SEIDependentRAPIndication
payloadType	SEI.h	/^  PayloadType payloadType() const { return DISPLAY_ORIENTATION; }$/;"	f	class:SEIDisplayOrientation
payloadType	SEI.h	/^  PayloadType payloadType() const { return EQUIRECTANGULAR_PROJECTION; }$/;"	f	class:SEIEquirectangularProjection
payloadType	SEI.h	/^  PayloadType payloadType() const { return FILLER_PAYLOAD; }$/;"	f	class:SEIFillerPayload
payloadType	SEI.h	/^  PayloadType payloadType() const { return FILM_GRAIN_CHARACTERISTICS; }$/;"	f	class:SEIFilmGrainCharacteristics
payloadType	SEI.h	/^  PayloadType payloadType() const { return FISHEYE_VIDEO_INFO; }$/;"	f	class:SEIFisheyeVideoInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return FRAME_PACKING; }$/;"	f	class:SEIFramePacking
payloadType	SEI.h	/^  PayloadType payloadType() const { return KNEE_FUNCTION_INFO; }$/;"	f	class:SEIKneeFunctionInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return NO_DISPLAY; }$/;"	f	class:SEINoDisplay
payloadType	SEI.h	/^  PayloadType payloadType() const { return OMNI_VIEWPORT; }$/;"	f	class:SEIOmniViewport
payloadType	SEI.h	/^  PayloadType payloadType() const { return PAN_SCAN_RECT; }$/;"	f	class:SEIPanScanRect
payloadType	SEI.h	/^  PayloadType payloadType() const { return PICTURE_SNAPSHOT; }$/;"	f	class:SEIPictureSnapshot
payloadType	SEI.h	/^  PayloadType payloadType() const { return PICTURE_TIMING; }$/;"	f	class:SEIPictureTiming
payloadType	SEI.h	/^  PayloadType payloadType() const { return POST_FILTER_HINT; }$/;"	f	class:SEIPostFilterHint
payloadType	SEI.h	/^  PayloadType payloadType() const { return PROGRESSIVE_REFINEMENT_SEGMENT_END; }$/;"	f	class:SEIProgressiveRefinementSegmentEnd
payloadType	SEI.h	/^  PayloadType payloadType() const { return PROGRESSIVE_REFINEMENT_SEGMENT_START; }$/;"	f	class:SEIProgressiveRefinementSegmentStart
payloadType	SEI.h	/^  PayloadType payloadType() const { return RECOVERY_POINT; }$/;"	f	class:SEIRecoveryPoint
payloadType	SEI.h	/^  PayloadType payloadType() const { return REGIONAL_NESTING; }$/;"	f	class:SEIRegionalNesting
payloadType	SEI.h	/^  PayloadType payloadType() const { return REGION_REFRESH_INFO; }$/;"	f	class:SEIRegionRefreshInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return REGION_WISE_PACKING; }$/;"	f	class:SEIRegionWisePacking
payloadType	SEI.h	/^  PayloadType payloadType() const { return SCALABLE_NESTING; }$/;"	f	class:SEIScalableNesting
payloadType	SEI.h	/^  PayloadType payloadType() const { return SCENE_INFO; }$/;"	f	class:SEISceneInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return SEGM_RECT_FRAME_PACKING; }$/;"	f	class:SEISegmentedRectFramePacking
payloadType	SEI.h	/^  PayloadType payloadType() const { return SHUTTER_INTERVAL_INFO; }$/;"	f	class:SEIShutterIntervalInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return SOP_DESCRIPTION; }$/;"	f	class:SEISOPDescription
payloadType	SEI.h	/^  PayloadType payloadType() const { return SPHERE_ROTATION; }$/;"	f	class:SEISphereRotation
payloadType	SEI.h	/^  PayloadType payloadType() const { return TEMPORAL_LEVEL0_INDEX; }$/;"	f	class:SEITemporalLevel0Index
payloadType	SEI.h	/^  PayloadType payloadType() const { return TEMP_MOTION_CONSTRAINED_TILE_SETS; }$/;"	f	class:SEITempMotionConstrainedTileSets
payloadType	SEI.h	/^  PayloadType payloadType() const { return TIME_CODE; }$/;"	f	class:SEITimeCode
payloadType	SEI.h	/^  PayloadType payloadType() const { return TONE_MAPPING_INFO; }$/;"	f	class:SEIToneMappingInfo
payloadType	SEI.h	/^  PayloadType payloadType() const { return USER_DATA_REGISTERED_ITU_T_T35; }$/;"	f	class:SEIUserDataRegistered
payloadType	SEI.h	/^  PayloadType payloadType() const { return USER_DATA_UNREGISTERED; }$/;"	f	class:SEIUserDataUnregistered
payloadType	SEI.h	/^  PayloadType payloadType() const {return CHROMA_RESAMPLING_FILTER_HINT;}$/;"	f	class:SEIChromaResamplingFilterHint
peekBits	TComBitStream.h	/^  UInt        peekBits (UInt uiBits) { UInt tmp; pseudoRead(uiBits, tmp); return tmp; }$/;"	f	class:TComInputBitstream
peekPreviousByte	TComBitStream.h	/^  Void        peekPreviousByte( UInt &byte )$/;"	f	class:TComInputBitstream
per	TComTrQuant.h	/^  Int per;$/;"	m	struct:QpParam
persistenceFlag	SEI.h	/^  Bool persistenceFlag;$/;"	m	class:SEIDisplayOrientation
picDurationInTcMinus1	TComSlice.h	/^  UInt picDurationInTcMinus1;$/;"	m	struct:HrdSubLayerInfo
popBack	TComList.h	/^  C popBack()$/;"	f	class:TComList
popFront	TComList.h	/^  C popFront()$/;"	f	class:TComList
predIntraAng	TComPrediction.cpp	/^Void TComPrediction::predIntraAng( const ComponentID compID, UInt uiDirMode, Pel* piOrg \/* Will be null for decoding *\/, UInt uiOrgStride, Pel* piPred, UInt uiStride, TComTU &rTu, const Bool bUseFilteredPredSamples, const Bool bUseLosslessDPCM )$/;"	f	class:TComPrediction
predIntraGetPredValDC	TComPrediction.cpp	/^Pel TComPrediction::predIntraGetPredValDC( const Pel* pSrc, Int iSrcStride, UInt iWidth, UInt iHeight)$/;"	f	class:TComPrediction
prefix_sei_messages	SEI.h	/^  static const std::vector <SEI::PayloadType> prefix_sei_messages;$/;"	m	class:SEI
prepareForEncoderSourcePicYuv	TComPic.cpp	/^Void TComPic::prepareForEncoderSourcePicYuv()$/;"	f	class:TComPic
prepareForReconstruction	TComPic.cpp	/^Void TComPic::prepareForReconstruction()$/;"	f	class:TComPic
prepareForReconstruction	TComPicSym.cpp	/^Void TComPicSym::prepareForReconstruction()$/;"	f	class:TComPicSym
primaries	TypeDef.h	/^  UShort    primaries[3][2];$/;"	m	struct:TComSEIMasteringDisplay
printBlock	Debug.h	/^Void printBlock(const ValueType    *const source,$/;"	f
printBlockToStream	Debug.cpp	/^Void printBlockToStream( std::ostream &ss, const TChar *pLinePrefix, TComYuv &src, const UInt numSubBlocksAcross, const UInt numSubBlocksUp, const UInt defWidth )$/;"	f
printBlockToStream	Debug.h	/^Void printBlockToStream( std::ostream &ss, const TChar *pLinePrefix, const T * blkSrc, const UInt width, const UInt height, const UInt stride, const UInt subBlockWidth=0, const UInt subBlockHeight=0, const UInt defWidth=3 )$/;"	f
printCbfArray	Debug.cpp	/^Void printCbfArray( TComDataCU* pcCU  )$/;"	f
printDeltaPOC	TComSlice.cpp	/^Void TComReferencePictureSet::printDeltaPOC() const$/;"	f	class:TComReferencePictureSet
printEnvVar	Debug.cpp	/^Void EnvVar::printEnvVar()$/;"	f	class:EnvVar
printEnvVarInUse	Debug.cpp	/^Void EnvVar::printEnvVarInUse()$/;"	f	class:EnvVar
printMacroSettings	Debug.cpp	/^Void printMacroSettings()$/;"	f
printPair	Debug.cpp	/^static inline Void printPair(const std::pair<std::string, std::string> &p)$/;"	f	file:
printSBACCoeffData	Debug.cpp	/^Void printSBACCoeffData(  const UInt          lastX,$/;"	f
printVal	Debug.cpp	/^static inline Void printVal(const EnvVar* env)$/;"	f	file:
prng	SEIFilmGrainSynthesizer.cpp	/^uint32_t SEIFilmGrainSynthesizer::prng(uint32_t x_r)$/;"	f	class:SEIFilmGrainSynthesizer
processDefaultMatrix	TComSlice.cpp	/^Void TComScalingList::processDefaultMatrix(UInt sizeId, UInt listId)$/;"	f	class:TComScalingList
processRefMatrix	TComSlice.cpp	/^Void TComScalingList::processRefMatrix( UInt sizeId, UInt listId , UInt refListId )$/;"	f	class:TComScalingList
processScalingListDec	TComTrQuant.cpp	/^Void TComTrQuant::processScalingListDec( const Int *coeff, Int *dequantcoeff, Int invQuantScales, UInt height, UInt width, UInt ratio, Int sizuNum, UInt dc)$/;"	f	class:TComTrQuant
processScalingListEnc	TComTrQuant.cpp	/^Void TComTrQuant::processScalingListEnc( Int *coeff, Int *quantcoeff, Int quantScales, UInt height, UInt width, UInt ratio, Int sizuNum, UInt dc)$/;"	f	class:TComTrQuant
profile	ProfileLevelTierFeatures.h	/^  Profile::Name            profile;$/;"	m	struct:ProfileFeatures
pseudoRead	TComBitStream.cpp	/^Void TComInputBitstream::pseudoRead ( UInt uiNumberOfBits, UInt& ruiBits )$/;"	f	class:TComInputBitstream
pushBack	TComList.h	/^  Void pushBack( const C& rcT )$/;"	f	class:TComList
pushEmulationPreventionByteLocation	TComBitStream.h	/^  Void      pushEmulationPreventionByteLocation ( UInt pos )                         { m_emulationPreventionByteLocation.push_back( pos ); }$/;"	f	class:TComInputBitstream
pushFront	TComList.h	/^  Void pushFront( const C& rcT )$/;"	f	class:TComList
rapIdx	SEI.h	/^  UInt rapIdx;$/;"	m	class:SEITemporalLevel0Index
rdpcmNxN	TComTrQuant.cpp	/^Void TComTrQuant::rdpcmNxN   ( TComTU& rTu, const ComponentID compID, Pel* pcResidual, const UInt uiStride, const QpParam& cQP, TCoeff* pcCoeff, TCoeff &uiAbsSum, RDPCMMode& rdpcmMode )$/;"	f	class:TComTrQuant
read	TComBitStream.cpp	/^Void TComInputBitstream::read (UInt uiNumberOfBits, UInt& ruiBits)$/;"	f	class:TComInputBitstream
read	TComBitStream.h	/^  UInt read(UInt numberOfBits) { UInt tmp; read(numberOfBits, tmp); return tmp; }$/;"	f	class:TComInputBitstream
readByte	TComBitStream.h	/^  UInt     readByte() { UInt tmp; readByte( tmp ); return tmp; }$/;"	f	class:TComInputBitstream
readByte	TComBitStream.h	/^  Void        readByte        ( UInt &ruiBits )$/;"	f	class:TComInputBitstream
readByteAlignment	TComBitStream.cpp	/^UInt TComInputBitstream::readByteAlignment()$/;"	f	class:TComInputBitstream
readOutTrailingBits	TComBitStream.cpp	/^UInt TComInputBitstream::readOutTrailingBits ()$/;"	f	class:TComInputBitstream
recon	TypeDef.h	/^  Int recon[MAX_NUM_CHANNEL_TYPE]; \/\/\/< the bit depth used for reconstructing the video$/;"	m	struct:BitDepths
reconstructBlkSAOParam	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::reconstructBlkSAOParam(SAOBlkParam& recParam, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES])$/;"	f	class:TComSampleAdaptiveOffset
reconstructBlkSAOParams	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::reconstructBlkSAOParams(TComPic* pic, SAOBlkParam* saoBlkParams)$/;"	f	class:TComSampleAdaptiveOffset
regional_nesting_sei_messages	SEI.h	/^  static const std::vector <SEI::PayloadType> regional_nesting_sei_messages;$/;"	m	class:SEI
releaseAllReconstructionData	TComPic.cpp	/^Void TComPic::releaseAllReconstructionData()$/;"	f	class:TComPic
releaseAllReconstructionData	TComPicSym.cpp	/^Void TComPicSym::releaseAllReconstructionData()$/;"	f	class:TComPicSym
releaseEncoderSourceImageData	TComPic.cpp	/^Void TComPic::releaseEncoderSourceImageData()$/;"	f	class:TComPic
releaseReconstructionIntermediateData	TComPic.cpp	/^Void TComPic::releaseReconstructionIntermediateData()$/;"	f	class:TComPic
releaseReconstructionIntermediateData	TComPicSym.cpp	/^Void TComPicSym::releaseReconstructionIntermediateData()$/;"	f	class:TComPicSym
rem	TComTrQuant.h	/^  Int rem;$/;"	m	struct:QpParam
removeHighFreq	TComYuv.cpp	/^Void TComYuv::removeHighFreq( const TComYuv* pcYuvSrc,$/;"	f	class:TComYuv
reset	TComSampleAdaptiveOffset.cpp	/^Void SAOBlkParam::reset()$/;"	f	class:SAOBlkParam
reset	TComSampleAdaptiveOffset.cpp	/^Void SAOOffset::reset()$/;"	f	class:SAOOffset
resetBits	TComBitCounter.h	/^  Void        resetBits             ()                                        { m_uiBitCounter = 0;               }$/;"	f	class:TComBitCounter
resetBits	TComBitStream.h	/^  Void resetBits() { assert(0); }$/;"	f	class:TComOutputBitstream
resetToStart	TComBitStream.cpp	/^Void TComInputBitstream::resetToStart()$/;"	f	class:TComInputBitstream
resetWpScaling	TComSlice.cpp	/^Void  TComSlice::resetWpScaling()$/;"	f	class:TComSlice
rightOffset	SEI.h	/^    Int rightOffset;$/;"	m	struct:SEIPanScanRect::PanScanRect
rightShift	CommonDef.h	/^template <typename ValueType> inline ValueType rightShift      (const ValueType value, const Int shift) { return (shift >= 0) ? ( value                                  >> shift) : ( value                                   << -shift); }$/;"	f
rightShiftEvenRounding	CommonDef.h	/^template <typename ValueType> inline ValueType rightShiftEvenRounding(const ValueType value, const UInt shift) { return (shift == 0) ? value : ((value + (1<<(shift-1))-1 + ((value>>shift)&1)) >> shift) ; }$/;"	f
rightShift_round	CommonDef.h	/^template <typename ValueType> inline ValueType rightShift_round(const ValueType value, const Int shift) { return (shift >= 0) ? ((value + (ValueType(1) << (shift - 1))) >> shift) : ( value                                   << -shift); }$/;"	f
round	TComSlice.h	/^  Int  round;$/;"	m	struct:WPScalingParam
scaleMv	TComMv.h	/^  const TComMv scaleMv( Int iScale ) const$/;"	f	class:TComMv
scan	TypeDef.h	/^  const UInt            *scan;$/;"	m	struct:TUEntropyCodingParameters
scanCG	TypeDef.h	/^  const UInt            *scanCG;$/;"	m	struct:TUEntropyCodingParameters
scanType	TypeDef.h	/^        COEFF_SCAN_TYPE  scanType;$/;"	m	struct:TUEntropyCodingParameters
secondsFlag	TypeDef.h	/^  Bool secondsFlag;$/;"	m	struct:TComSEITimeSet
secondsValue	TypeDef.h	/^  Int  secondsValue;$/;"	m	struct:TComSEITimeSet
seedLUT	SEIFilmGrainSynthesizer.cpp	/^static const uint32_t seedLUT[256] = {$/;"	v	file:
selectLambda	TComTrQuant.h	/^  Void selectLambda(const ComponentID compIdx) { m_dLambda = m_lambdas[compIdx]; }$/;"	f	class:TComTrQuant
selectMotionLambda	TComRdCost.h	/^  Void    selectMotionLambda( Bool bSad, Int iAdd, Bool bIsTransquantBypass ) { m_motionLambda = (bSad ? m_dLambdaMotionSAD[(bIsTransquantBypass && m_costMode==COST_MIXED_LOSSLESS_LOSSY_CODING) ?1:0] + iAdd : m_dLambdaMotionSSE[(bIsTransquantBypass && m_costMode==COST_MIXED_LOSSLESS_LOSSY_CODING)?1:0] + iAdd); }$/;"	f	class:TComRdCost
set	TComMv.h	/^  Void  set       ( Short iHor, Short iVer)     { m_iHor = iHor;  m_iVer = iVer;            }$/;"	f	class:TComMv
setAll	TComMotionInfo.cpp	/^Void TComCUMvField::setAll( T *p, T const & val, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx  )$/;"	f	class:TComCUMvField
setAllMv	TComMotionInfo.cpp	/^Void TComCUMvField::setAllMv( TComMv const & mv, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )$/;"	f	class:TComCUMvField
setAllMvField	TComMotionInfo.cpp	/^Void TComCUMvField::setAllMvField( TComMvField const & mvField, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )$/;"	f	class:TComCUMvField
setAllMvd	TComMotionInfo.cpp	/^Void TComCUMvField::setAllMvd( TComMv const & mvd, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )$/;"	f	class:TComCUMvField
setAllRefIdx	TComMotionInfo.cpp	/^Void TComCUMvField::setAllRefIdx ( Int iRefIdx, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )$/;"	f	class:TComCUMvField
setAspectRatioIdc	TComSlice.h	/^  Void              setAspectRatioIdc(Int i)                               { m_aspectRatioIdc = i;                          }$/;"	f	class:TComVUI
setAspectRatioInfoPresentFlag	TComSlice.h	/^  Void              setAspectRatioInfoPresentFlag(Bool i)                  { m_aspectRatioInfoPresentFlag = i;              }$/;"	f	class:TComVUI
setAssociatedIRAPPOC	TComSlice.h	/^  Void                        setAssociatedIRAPPOC(Int iAssociatedIRAPPOC)           { m_iAssociatedIRAP = iAssociatedIRAPPOC;                       }$/;"	f	class:TComSlice
setAssociatedIRAPType	TComSlice.h	/^  Void                        setAssociatedIRAPType(NalUnitType associatedIRAPType)  { m_iAssociatedIRAPType = associatedIRAPType;                   }$/;"	f	class:TComSlice
setBinsCoded	ContextModel.h	/^  Void setBinsCoded(UInt val)   { m_binsCoded = val;  }$/;"	f	class:ContextModel
setBitDepth	TComSlice.h	/^  Void                   setBitDepth(ChannelType type, Int u )                                           { m_bitDepths.recon[type] = u;                                         }$/;"	f	class:TComSPS
setBitDepthConstraint	TComSlice.h	/^  Void          setBitDepthConstraint(UInt bitDepth)        { m_bitDepthConstraintValue=bitDepth;   }$/;"	f	class:ProfileTierLevel
setBitRateScale	TComSlice.h	/^  Void    setBitRateScale( UInt value )                                              { m_bitRateScale = value;                                    }$/;"	f	class:TComHRD
setBitRateValueMinus1	TComSlice.h	/^  Void    setBitRateValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl, UInt value )   { m_HRD[layer].bitRateValueMinus1[cpbcnt][nalOrVcl] = value; }$/;"	f	class:TComHRD
setBitsForPOC	TComSlice.h	/^  Void                   setBitsForPOC( UInt u )                                                         { m_uiBitsForPOC = u;                                                  }$/;"	f	class:TComSPS
setBitstreamRestrictionFlag	TComSlice.h	/^  Void              setBitstreamRestrictionFlag(Bool i)                    { m_bitstreamRestrictionFlag = i;                }$/;"	f	class:TComVUI
setBorderExtension	TComPicYuv.h	/^  Void          setBorderExtension(Bool b) { m_bIsBorderExtended = b; }$/;"	f	class:TComPicYuv
setBottomEdgePosInCtus	TComPicSym.h	/^  Void      setBottomEdgePosInCtus ( UInt i )            { m_bottomEdgePosInCtus = i; }$/;"	f	class:TComTile
setCUTransquantBypassSubParts	TComDataCU.cpp	/^Void TComDataCU::setCUTransquantBypassSubParts( Bool flag, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setCabacBypassAlignmentEnabledFlag	TComSlice.h	/^  Void setCabacBypassAlignmentEnabledFlag(const Bool value)                            { m_cabacBypassAlignmentEnabledFlag = value;     }$/;"	f	class:TComSPSRExt
setCabacInitFlag	TComSlice.h	/^  Void                        setCabacInitFlag( Bool val )                           { m_cabacInitFlag = val;                                        } \/\/!< set CABAC initial flag$/;"	f	class:TComSlice
setCabacInitPresentFlag	TComSlice.h	/^  Void                   setCabacInitPresentFlag( Bool flag )                             { m_cabacInitPresentFlag = flag;                }$/;"	f	class:TComPPS
setCbf	TComDataCU.h	/^  Void          setCbf                        ( UInt uiIdx, ComponentID eType, UChar uh )                  { m_puhCbf[eType][uiIdx] = uh;               }$/;"	f	class:TComDataCU
setCbfPartRange	TComDataCU.cpp	/^Void TComDataCU::setCbfPartRange ( UInt uiCbf, ComponentID compID, UInt uiAbsPartIdx, UInt uiCoveredPartIdxes )$/;"	f	class:TComDataCU
setCbfSubParts	TComDataCU.cpp	/^Void TComDataCU::setCbfSubParts ( UInt uiCbf, ComponentID compID, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setCbfSubParts	TComDataCU.cpp	/^Void TComDataCU::setCbfSubParts( UInt uiCbf, ComponentID compID, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setCbfSubParts	TComDataCU.cpp	/^Void TComDataCU::setCbfSubParts( const UInt uiCbf[MAX_NUM_COMPONENT], UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setCbrFlag	TComSlice.h	/^  Void    setCbrFlag( Int layer, Int cpbcnt, Int nalOrVcl, Bool value )              { m_HRD[layer].cbrFlag[cpbcnt][nalOrVcl] = value;            }$/;"	f	class:TComHRD
setCfg	TComLoopFilter.cpp	/^Void TComLoopFilter::setCfg( Bool bLFCrossTileBoundary )$/;"	f	class:TComLoopFilter
setChangedFlag	TComSlice.h	/^  Void setChangedFlag(Int psId, Bool bChanged=true)$/;"	f	class:ParameterSetMap
setCheckLDC	TComSlice.h	/^  Void                        setCheckLDC( Bool b )                                  { m_bCheckLDC = b;                                              }$/;"	f	class:TComSlice
setCheckLTMSBPresent	TComPic.h	/^  Void          setCheckLTMSBPresent     (Bool b ) {m_bCheckLTMSB=b;}$/;"	f	class:TComPic
setCheckLTMSBPresent	TComSlice.cpp	/^Void TComReferencePictureSet::setCheckLTMSBPresent(Int bufferNum, Bool b)$/;"	f	class:TComReferencePictureSet
setChromaFormatConstraint	TComSlice.h	/^  Void          setChromaFormatConstraint(ChromaFormat fmt) { m_chromaFormatConstraintValue=fmt;    }$/;"	f	class:ProfileTierLevel
setChromaFormatIdc	TComSlice.h	/^  Void                   setChromaFormatIdc (ChromaFormat i)                                             { m_chromaFormatIdc = i;                                               }$/;"	f	class:TComSPS
setChromaLocInfoPresentFlag	TComSlice.h	/^  Void              setChromaLocInfoPresentFlag(Bool i)                    { m_chromaLocInfoPresentFlag = i;                }$/;"	f	class:TComVUI
setChromaQpAdj	TComDataCU.h	/^  Void          setChromaQpAdj                ( Int idx, UChar val )                                       { m_ChromaQpAdj[idx] = val;                  } \/\/\/< When val = 0,   cu_chroma_qp_offset_flag=0; when val>0,   indicates cu_chroma_qp_offset_flag=1 and cu_chroma_qp_offset_idx=val-1$/;"	f	class:TComDataCU
setChromaQpAdjSubParts	TComDataCU.cpp	/^Void TComDataCU::setChromaQpAdjSubParts( UChar val, Int absPartIdx, Int depth )$/;"	f	class:TComDataCU
setChromaQpOffsetListEntry	TComSlice.h	/^  Void                   setChromaQpOffsetListEntry( Int cuChromaQpOffsetIdxPlus1, Int cbOffset, Int crOffset )$/;"	f	class:TComPPSRExt
setChromaSampleLocTypeBottomField	TComSlice.h	/^  Void              setChromaSampleLocTypeBottomField(Int i)               { m_chromaSampleLocTypeBottomField = i;          }$/;"	f	class:TComVUI
setChromaSampleLocTypeTopField	TComSlice.h	/^  Void              setChromaSampleLocTypeTopField(Int i)                  { m_chromaSampleLocTypeTopField = i;             }$/;"	f	class:TComVUI
setCodedChromaQpAdj	TComDataCU.h	/^  Void          setCodedChromaQpAdj           ( SChar qp )                                                 { m_codedChromaQpAdj = qp;                   }$/;"	f	class:TComDataCU
setCodedQP	TComDataCU.h	/^  Void          setCodedQP                    ( SChar qp )                                                 { m_codedQP = qp;                            }$/;"	f	class:TComDataCU
setColFromL0Flag	TComSlice.h	/^  Void                        setColFromL0Flag( Bool colFromL0 )                     { m_colFromL0Flag = colFromL0;                                  }$/;"	f	class:TComSlice
setColRefIdx	TComSlice.h	/^  Void                        setColRefIdx( UInt refIdx)                             { m_colRefIdx = refIdx;                                         }$/;"	f	class:TComSlice
setColourDescriptionPresentFlag	TComSlice.h	/^  Void              setColourDescriptionPresentFlag(Bool i)                { m_colourDescriptionPresentFlag = i;            }$/;"	f	class:TComVUI
setColourPrimaries	TComSlice.h	/^  Void              setColourPrimaries(Int i)                              { m_colourPrimaries = i;                         }$/;"	f	class:TComVUI
setConformanceWindow	TComSlice.h	/^  Void                   setConformanceWindow(Window& conformanceWindow )                                { m_conformanceWindow = conformanceWindow;                             }$/;"	f	class:TComSPS
setConstrainedIntraPred	TComSlice.h	/^  Void                   setConstrainedIntraPred( Bool b )                                { m_bConstrainedIntraPred = b;                  }$/;"	f	class:TComPPS
setCostMode	TComRdCost.h	/^  Void    setCostMode(CostMode   m )    { m_costMode = m; }$/;"	f	class:TComRdCost
setCostScale	TComRdCost.h	/^  Void    setCostScale( Int iCostScale )    { m_iCostScale = iCostScale; }$/;"	f	class:TComRdCost
setCpbCntMinus1	TComSlice.h	/^  Void    setCpbCntMinus1( Int layer, UInt value )                                   { m_HRD[layer].cpbCntMinus1 = value;                         }$/;"	f	class:TComHRD
setCpbRemovalDelayLengthMinus1	TComSlice.h	/^  Void    setCpbRemovalDelayLengthMinus1( UInt value )                               { m_cpbRemovalDelayLengthMinus1 = value;                     }$/;"	f	class:TComHRD
setCpbSizeScale	TComSlice.h	/^  Void    setCpbSizeScale( UInt value )                                              { m_cpbSizeScale = value;                                    }$/;"	f	class:TComHRD
setCpbSizeValueMinus1	TComSlice.h	/^  Void    setCpbSizeValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl, UInt value )   { m_HRD[layer].cpbSizeValue[cpbcnt][nalOrVcl] = value;       }$/;"	f	class:TComHRD
setCprmsPresentFlag	TComSlice.h	/^  Void              setCprmsPresentFlag( Bool val, UInt i )              { m_cprmsPresentFlag[ i ] = val;                                   }$/;"	f	class:TComVPS
setCrossComponentPredictionAlphaPartRange	TComDataCU.cpp	/^Void TComDataCU::setCrossComponentPredictionAlphaPartRange( SChar alphaValue, ComponentID compID, UInt uiAbsPartIdx, UInt uiCoveredPartIdxes )$/;"	f	class:TComDataCU
setCrossComponentPredictionEnabledFlag	TComSlice.h	/^  Void                   setCrossComponentPredictionEnabledFlag(Bool value)               { m_crossComponentPredictionEnabledFlag = value;  }$/;"	f	class:TComPPSRExt
setCtuRsToTsAddrMap	TComPicSym.h	/^  Void               setCtuRsToTsAddrMap( Int ctuRsAddr, Int ctuTsOrder )  { *(m_ctuRsToTsAddrMap + ctuRsAddr) = ctuTsOrder; }$/;"	f	class:TComPicSym
setCtuTsToRsAddrMap	TComPicSym.h	/^  Void               setCtuTsToRsAddrMap( Int ctuTsAddr, Int ctuRsAddr )   { *(m_ctuTsToRsAddrMap + ctuTsAddr) = ctuRsAddr; }$/;"	f	class:TComPicSym
setCurrSliceIdx	TComPic.h	/^  Void          setCurrSliceIdx(UInt i)      { m_uiCurrSliceIdx = i;                   }$/;"	f	class:TComPic
setDeblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Void                        setDeblockingFilterBetaOffsetDiv2( Int i )             { m_deblockingFilterBetaOffsetDiv2 = i;                         }$/;"	f	class:TComSlice
setDeblockingFilterBetaOffsetDiv2	TComSlice.h	/^  Void                   setDeblockingFilterBetaOffsetDiv2(Int val)                       { m_deblockingFilterBetaOffsetDiv2 = val;       } \/\/!< set beta offset for deblocking filter$/;"	f	class:TComPPS
setDeblockingFilterControlPresentFlag	TComSlice.h	/^  Void                   setDeblockingFilterControlPresentFlag( Bool val )                { m_deblockingFilterControlPresentFlag = val;   }$/;"	f	class:TComPPS
setDeblockingFilterDisable	TComSlice.h	/^  Void                        setDeblockingFilterDisable( Bool b )                   { m_deblockingFilterDisable= b;                                 }$/;"	f	class:TComSlice
setDeblockingFilterOverrideEnabledFlag	TComSlice.h	/^  Void                   setDeblockingFilterOverrideEnabledFlag( Bool val )               { m_deblockingFilterOverrideEnabledFlag = val;  }$/;"	f	class:TComPPS
setDeblockingFilterOverrideFlag	TComSlice.h	/^  Void                        setDeblockingFilterOverrideFlag( Bool b )              { m_deblockingFilterOverrideFlag = b;                           }$/;"	f	class:TComSlice
setDeblockingFilterTcOffsetDiv2	TComSlice.h	/^  Void                        setDeblockingFilterTcOffsetDiv2( Int i )               { m_deblockingFilterTcOffsetDiv2 = i;                           }$/;"	f	class:TComSlice
setDeblockingFilterTcOffsetDiv2	TComSlice.h	/^  Void                   setDeblockingFilterTcOffsetDiv2(Int val)                         { m_deblockingFilterTcOffsetDiv2 = val;         } \/\/!< set tc offset for deblocking filter$/;"	f	class:TComPPS
setDefaultDisplayWindow	TComSlice.h	/^  Void              setDefaultDisplayWindow(Window& defaultDisplayWindow ) { m_defaultDisplayWindow = defaultDisplayWindow; }$/;"	f	class:TComVUI
setDefaultScalingList	TComSlice.cpp	/^Void TComScalingList::setDefaultScalingList()$/;"	f	class:TComScalingList
setDeltaPOC	TComSlice.cpp	/^Void TComReferencePictureSet::setDeltaPOC(Int bufferNum, Int deltaPOC)$/;"	f	class:TComReferencePictureSet
setDeltaPocMSBCycleLT	TComSlice.h	/^  Void    setDeltaPocMSBCycleLT(Int i, Int x)          { m_deltaPOCMSBCycleLT[i] = x;        }$/;"	f	class:TComReferencePictureSet
setDeltaPocMSBPresentFlag	TComSlice.h	/^  Void    setDeltaPocMSBPresentFlag(Int i, Bool x)     { m_deltaPocMSBPresentFlag[i] = x;    }$/;"	f	class:TComReferencePictureSet
setDeltaRIdxMinus1	TComSlice.h	/^  Void    setDeltaRIdxMinus1(Int x)                    { m_deltaRIdxMinus1 = x;               }$/;"	f	class:TComReferencePictureSet
setDeltaRPS	TComSlice.h	/^  Void    setDeltaRPS(Int x)                           { m_deltaRPS = x;                      }$/;"	f	class:TComReferencePictureSet
setDependentSliceSegmentFlag	TComSlice.h	/^  Void                        setDependentSliceSegmentFlag(Bool val)                 { m_dependentSliceSegmentFlag = val;                            }$/;"	f	class:TComSlice
setDependentSliceSegmentsEnabledFlag	TComSlice.h	/^  Void                   setDependentSliceSegmentsEnabledFlag(Bool val)                   { m_dependentSliceSegmentsEnabledFlag = val;    }$/;"	f	class:TComPPS
setDepth	TComDataCU.h	/^  Void          setDepth                      ( UInt uiIdx, UChar uh )                                     { m_puhDepth[uiIdx] = uh;                    }$/;"	f	class:TComDataCU
setDepth	TComSlice.h	/^  Void                        setDepth( Int iDepth )                                 { m_iDepth            = iDepth;                                 }$/;"	f	class:TComSlice
setDepthSubParts	TComDataCU.cpp	/^Void TComDataCU::setDepthSubParts( UInt uiDepth, UInt uiAbsPartIdx )$/;"	f	class:TComDataCU
setDiffCuChromaQpOffsetDepth	TComSlice.h	/^  Void                   setDiffCuChromaQpOffsetDepth ( UInt u )                          { m_diffCuChromaQpOffsetDepth = u;                }$/;"	f	class:TComPPSRExt
setDistParam	TComRdCost.cpp	/^Void TComRdCost::setDistParam( DistParam& rcDP, Int bitDepth, const Pel* p1, Int iStride1, const Pel* p2, Int iStride2, Int iWidth, Int iHeight, Bool bHadamard )$/;"	f	class:TComRdCost
setDistParam	TComRdCost.cpp	/^Void TComRdCost::setDistParam( UInt uiBlkWidth, UInt uiBlkHeight, DFunc eDFunc, DistParam& rcDistParam )$/;"	f	class:TComRdCost
setDistParam	TComRdCost.cpp	/^Void TComRdCost::setDistParam( const TComPattern* const pcPatternKey, const Pel* piRefY, Int iRefStride, DistParam& rcDistParam )$/;"	f	class:TComRdCost
setDistParam	TComRdCost.cpp	/^Void TComRdCost::setDistParam( const TComPattern* const pcPatternKey, const Pel* piRefY, Int iRefStride, Int iStep, DistParam& rcDistParam, Bool bHADME )$/;"	f	class:TComRdCost
setDistortionWeight	TComRdCost.h	/^  Void    setDistortionWeight  ( const ComponentID compID, const Double distortionWeight ) { m_distortionWeight[compID] = distortionWeight; }$/;"	f	class:TComRdCost
setDpbOutputDelayDuLengthMinus1	TComSlice.h	/^  Void    setDpbOutputDelayDuLengthMinus1(UInt value )                               { m_dpbOutputDelayDuLengthMinus1 = value;                    }$/;"	f	class:TComHRD
setDpbOutputDelayLengthMinus1	TComSlice.h	/^  Void    setDpbOutputDelayLengthMinus1( UInt value )                                { m_dpbOutputDelayLengthMinus1 = value;                      }$/;"	f	class:TComHRD
setDuBitRateValueMinus1	TComSlice.h	/^  Void    setDuBitRateValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl, UInt value ) { m_HRD[layer].duBitRateValue[cpbcnt][nalOrVcl] = value;     }$/;"	f	class:TComHRD
setDuCpbRemovalDelayLengthMinus1	TComSlice.h	/^  Void    setDuCpbRemovalDelayLengthMinus1( UInt value )                             { m_duCpbRemovalDelayLengthMinus1 = value;                   }$/;"	f	class:TComHRD
setDuCpbSizeScale	TComSlice.h	/^  Void    setDuCpbSizeScale( UInt value )                                            { m_ducpbSizeScale = value;                                  }$/;"	f	class:TComHRD
setDuCpbSizeValueMinus1	TComSlice.h	/^  Void    setDuCpbSizeValueMinus1( Int layer, Int cpbcnt, Int nalOrVcl, UInt value ) { m_HRD[layer].ducpbSizeValue[cpbcnt][nalOrVcl] = value;     }$/;"	f	class:TComHRD
setEmulationPreventionByteLocation	TComBitStream.h	/^  Void      setEmulationPreventionByteLocation  ( const std::vector<UInt> &vec )     { m_emulationPreventionByteLocation = vec;            }$/;"	f	class:TComInputBitstream
setEnableTMVPFlag	TComSlice.h	/^  Void                        setEnableTMVPFlag( Bool   b )                          { m_enableTMVPFlag = b;                                         }$/;"	f	class:TComSlice
setEncCABACTableIdx	TComSlice.h	/^  Void                        setEncCABACTableIdx( SliceType idx )                   { m_encCABACTableIdx = idx;                                     }$/;"	f	class:TComSlice
setEntropyCodingSyncEnabledFlag	TComSlice.h	/^  Void                   setEntropyCodingSyncEnabledFlag(Bool val)                        { m_entropyCodingSyncEnabledFlag = val;         }$/;"	f	class:TComPPS
setEqualRef	TComSlice.h	/^  Void                        setEqualRef( RefPicList e, Int iRefIdx1, Int iRefIdx2, Bool b)$/;"	f	class:TComSlice
setErrScaleCoeff	TComTrQuant.cpp	/^Void TComTrQuant::setErrScaleCoeff(UInt list, UInt size, Int qp, const Int maxLog2TrDynamicRange[MAX_NUM_CHANNEL_TYPE], const BitDepths &bitDepths)$/;"	f	class:TComTrQuant
setExplicitRdpcmModePartRange	TComDataCU.cpp	/^Void TComDataCU::setExplicitRdpcmModePartRange ( UInt rdpcmMode, ComponentID compID, UInt uiAbsPartIdx, UInt uiCoveredPartIdxes )$/;"	f	class:TComDataCU
setExtendedPrecisionProcessingFlag	TComSlice.h	/^  Void setExtendedPrecisionProcessingFlag(Bool value)                                  { m_extendedPrecisionProcessingFlag = value;     }$/;"	f	class:TComSPSRExt
setField	TComPic.h	/^   Void              setField(Bool b)                     {m_isField = b;}$/;"	f	class:TComPic
setFieldSeqFlag	TComSlice.h	/^  Void              setFieldSeqFlag(Bool i)                                { m_fieldSeqFlag = i;                            }$/;"	f	class:TComVUI
setFinalized	TComSlice.h	/^  Void                        setFinalized( Bool uiVal )                             { m_bFinalized = uiVal;                                         }$/;"	f	class:TComSlice
setFirstCtuRsAddr	TComPicSym.h	/^  Void      setFirstCtuRsAddr      ( UInt i )            { m_firstCtuRsAddr = i; }$/;"	f	class:TComTile
setFixedPicRateFlag	TComSlice.h	/^  Void    setFixedPicRateFlag( Int layer, Bool flag )                                { m_HRD[layer].fixedPicRateFlag = flag;                      }$/;"	f	class:TComHRD
setFixedPicRateWithinCvsFlag	TComSlice.h	/^  Void    setFixedPicRateWithinCvsFlag( Int layer, Bool flag )                       { m_HRD[layer].fixedPicRateWithinCvsFlag = flag;             }$/;"	f	class:TComHRD
setFlatScalingList	TComTrQuant.cpp	/^Void TComTrQuant::setFlatScalingList(const Int maxLog2TrDynamicRange[MAX_NUM_CHANNEL_TYPE], const BitDepths &bitDepths)$/;"	f	class:TComTrQuant
setForceDecodeBitDepth	TComSlice.h	/^  Void                   setForceDecodeBitDepth(UInt bitDepth)                                           { m_forceDecodeBitDepth = bitDepth;                                    }$/;"	f	class:TComSPS
setFrameFieldInfoPresentFlag	TComSlice.h	/^  Void              setFrameFieldInfoPresentFlag(Bool i)                   { m_frameFieldInfoPresentFlag = i;               }$/;"	f	class:TComVUI
setFrameLambda	TComRdCost.h	/^  Void    setFrameLambda ( Double dLambda ) { m_dFrameLambda = dLambda; }$/;"	f	class:TComRdCost
setFrameOnlyConstraintFlag	TComSlice.h	/^  Void          setFrameOnlyConstraintFlag(Bool b)          { m_frameOnlyConstraintFlag = b;        }$/;"	f	class:ProfileTierLevel
setHandleCraAsBlaFlag	TComSlice.h	/^  Void                        setHandleCraAsBlaFlag( Bool val )                      { m_handleCraAsBlaFlag = val;                                   }$/;"	f	class:TComSlice
setHeight	TComDataCU.h	/^  Void          setHeight                     ( UInt uiIdx, UChar  uh )                                    { m_puhHeight[uiIdx] = uh;                   }$/;"	f	class:TComDataCU
setHighPrecisionOffsetsEnabledFlag	TComSlice.h	/^  Void setHighPrecisionOffsetsEnabledFlag(Bool value)                                  { m_highPrecisionOffsetsEnabledFlag = value;     }$/;"	f	class:TComSPSRExt
setHor	TComMv.h	/^  Void  setHor    ( Short i )                   { m_iHor = i;                               }$/;"	f	class:TComMv
setHrdOpSetIdx	TComSlice.h	/^  Void              setHrdOpSetIdx( UInt val, UInt i )                   { m_hrdOpSetIdx[ i ] = val;                                        }$/;"	f	class:TComVPS
setHrdParametersPresentFlag	TComSlice.h	/^  Void              setHrdParametersPresentFlag(Bool i)                    { m_hrdParametersPresentFlag = i;                }$/;"	f	class:TComVUI
setID	TComSlice.cpp	/^Void ParameterSetMap<TComPPS>::setID(TComPPS* parameterSet, const Int psId)$/;"	f	class:ParameterSetMap
setID	TComSlice.cpp	/^Void ParameterSetMap<TComSPS>::setID(TComSPS* parameterSet, const Int psId)$/;"	f	class:ParameterSetMap
setIPCMFlag	TComDataCU.h	/^  Void          setIPCMFlag                   ( UInt uiIdx, Bool b )                                       { m_pbIPCMFlag[uiIdx] = b;                   }$/;"	f	class:TComDataCU
setIPCMFlagSubParts	TComDataCU.cpp	/^Void TComDataCU::setIPCMFlagSubParts  (Bool bIpcmFlag, UInt uiAbsPartIdx, UInt uiDepth)$/;"	f	class:TComDataCU
setInitialCpbRemovalDelayLengthMinus1	TComSlice.h	/^  Void    setInitialCpbRemovalDelayLengthMinus1( UInt value )                        { m_initialCpbRemovalDelayLengthMinus1 = value;              }$/;"	f	class:TComHRD
setInterDir	TComDataCU.h	/^  Void          setInterDir                   ( UInt uiIdx, UChar  uh )                                    { m_puhInterDir[uiIdx] = uh;                 }$/;"	f	class:TComDataCU
setInterDirSubParts	TComDataCU.cpp	/^Void TComDataCU::setInterDirSubParts( UInt uiDir, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setInterRPSPrediction	TComSlice.h	/^  Void    setInterRPSPrediction(Bool flag)             { m_interRPSPrediction = flag;         }$/;"	f	class:TComReferencePictureSet
setInterlacedSourceFlag	TComSlice.h	/^  Void          setInterlacedSourceFlag(Bool b)             { m_interlacedSourceFlag = b;           }$/;"	f	class:ProfileTierLevel
setIntraConstraintFlag	TComSlice.h	/^  Void          setIntraConstraintFlag(Bool b)              { m_intraConstraintFlag = b;            }$/;"	f	class:ProfileTierLevel
setIntraDirSubParts	TComDataCU.cpp	/^Void TComDataCU::setIntraDirSubParts( const ChannelType channelType, const UInt dir, const UInt absPartIdx, const UInt depth )$/;"	f	class:TComDataCU
setIntraSmoothingDisabledFlag	TComSlice.h	/^  Void setIntraSmoothingDisabledFlag(Bool bValue)                                      { m_intraSmoothingDisabledFlag=bValue;           }$/;"	f	class:TComSPSRExt
setIsLongTerm	TComPic.h	/^  Void          setIsLongTerm( Bool lt ) { m_bIsLongTerm = lt; }$/;"	f	class:TComPic
setIsUsedAsLongTerm	TComSlice.h	/^  Void                        setIsUsedAsLongTerm(Int i, Int j, Bool value)          { m_bIsUsedAsLongTerm[i][j] = value;                            }$/;"	f	class:TComSlice
setLFCrossSliceBoundaryFlag	TComSlice.h	/^  Void                        setLFCrossSliceBoundaryFlag( Bool   val )              { m_LFCrossSliceBoundaryFlag = val;                             }$/;"	f	class:TComSlice
setLambda	TComRdCost.cpp	/^Void TComRdCost::setLambda( Double dLambda, const BitDepths &bitDepths )$/;"	f	class:TComRdCost
setLambda	TComTrQuant.h	/^  Void setLambda(Double dLambda) { m_dLambda = dLambda;}$/;"	f	class:TComTrQuant
setLambdas	TComSlice.h	/^  Void                        setLambdas( const Double lambdas[MAX_NUM_COMPONENT] )  { for (Int component = 0; component < MAX_NUM_COMPONENT; component++) m_lambdas[component] = lambdas[component]; }$/;"	f	class:TComSlice
setLambdas	TComTrQuant.h	/^  Void setLambdas(const Double lambdas[MAX_NUM_COMPONENT]) { for (UInt component = 0; component < MAX_NUM_COMPONENT; component++) m_lambdas[component] = lambdas[component]; }$/;"	f	class:TComTrQuant
setLastIDR	TComSlice.h	/^  Void                        setLastIDR(Int iIDRPOC)                                { m_iLastIDR = iIDRPOC;                                         }$/;"	f	class:TComSlice
setLayerIdIncludedFlag	TComSlice.h	/^  Void              setLayerIdIncludedFlag(Bool v, UInt opsIdx, UInt id) { m_layerIdIncludedFlag[opsIdx][id] = v;                           }$/;"	f	class:TComVPS
setLevelIdc	TComSlice.h	/^  Void          setLevelIdc(Level::Name x)                  { m_levelIdc = x;                       }$/;"	f	class:ProfileTierLevel
setList1IdxToList0Idx	TComSlice.cpp	/^Void TComSlice::setList1IdxToList0Idx()$/;"	f	class:TComSlice
setListsModificationPresentFlag	TComSlice.h	/^  Void                   setListsModificationPresentFlag( Bool b )                        { m_listsModificationPresentFlag = b;           }$/;"	f	class:TComPPS
setLog2DiffMaxMinCodingBlockSize	TComSlice.h	/^  Void                   setLog2DiffMaxMinCodingBlockSize(Int val)                                       { m_log2DiffMaxMinCodingBlockSize = val;                               }$/;"	f	class:TComSPS
setLog2MaxMvLengthHorizontal	TComSlice.h	/^  Void              setLog2MaxMvLengthHorizontal(Int i)                    { m_log2MaxMvLengthHorizontal = i;               }$/;"	f	class:TComVUI
setLog2MaxMvLengthVertical	TComSlice.h	/^  Void              setLog2MaxMvLengthVertical(Int i)                      { m_log2MaxMvLengthVertical = i;                 }$/;"	f	class:TComVUI
setLog2MaxTransformSkipBlockSize	TComSlice.h	/^  Void                   setLog2MaxTransformSkipBlockSize( UInt u )                       { m_log2MaxTransformSkipBlockSize  = u;           }$/;"	f	class:TComPPSRExt
setLog2MinCodingBlockSize	TComSlice.h	/^  Void                   setLog2MinCodingBlockSize(Int val)                                              { m_log2MinCodingBlockSize = val;                                      }$/;"	f	class:TComSPS
setLog2ParallelMergeLevelMinus2	TComSlice.h	/^  Void                   setLog2ParallelMergeLevelMinus2(UInt mrgLevel)                   { m_log2ParallelMergeLevelMinus2 = mrgLevel;    }$/;"	f	class:TComPPS
setLog2SaoOffsetScale	TComSlice.h	/^  Void                   setLog2SaoOffsetScale(ChannelType type, UInt uiBitShift)         { m_log2SaoOffsetScale[type] = uiBitShift;       }$/;"	f	class:TComPPSRExt
setLongTermRefsPresent	TComSlice.h	/^  Void                   setLongTermRefsPresent(Bool b)                                                  { m_bLongTermRefsPresent=b;                                            }$/;"	f	class:TComSPS
setLoopFilterAcrossSlicesEnabledFlag	TComSlice.h	/^  Void                   setLoopFilterAcrossSlicesEnabledFlag( Bool bValue )              { m_loopFilterAcrossSlicesEnabledFlag = bValue; }$/;"	f	class:TComPPS
setLoopFilterAcrossTilesEnabledFlag	TComSlice.h	/^  Void                   setLoopFilterAcrossTilesEnabledFlag(Bool b)                      { m_loopFilterAcrossTilesEnabledFlag = b;       }$/;"	f	class:TComPPS
setLowDelayHrdFlag	TComSlice.h	/^  Void    setLowDelayHrdFlag( Int layer, Bool flag )                                 { m_HRD[layer].lowDelayHrdFlag = flag;                       }$/;"	f	class:TComHRD
setLowerBitRateConstraintFlag	TComSlice.h	/^  Void          setLowerBitRateConstraintFlag(Bool b)       { m_lowerBitRateConstraintFlag = b;     }$/;"	f	class:ProfileTierLevel
setLtRefPicPocLsbSps	TComSlice.h	/^  Void                   setLtRefPicPocLsbSps(UInt index, UInt val)                                      { assert( index < MAX_NUM_LONG_TERM_REF_PICS ); m_ltRefPicPocLsbSps[index] = val;  }$/;"	f	class:TComSPS
setMVPIdx	TComDataCU.h	/^  Void          setMVPIdx                     ( RefPicList eRefPicList, UInt uiIdx, Int iMVPIdx)           { m_apiMVPIdx[eRefPicList][uiIdx] = iMVPIdx; }$/;"	f	class:TComDataCU
setMVPIdxSubParts	TComDataCU.cpp	/^Void TComDataCU::setMVPIdxSubParts( Int iMVPIdx, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setMVPNum	TComDataCU.h	/^  Void          setMVPNum                     ( RefPicList eRefPicList, UInt uiIdx, Int iMVPNum )          { m_apiMVPNum[eRefPicList][uiIdx] = iMVPNum; }$/;"	f	class:TComDataCU
setMVPNumSubParts	TComDataCU.cpp	/^Void TComDataCU::setMVPNumSubParts( Int iMVPNum, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setMatrixCoefficients	TComSlice.h	/^  Void              setMatrixCoefficients(Int i)                           { m_matrixCoefficients = i;                      }$/;"	f	class:TComVUI
setMaxBitsPerMinCuDenom	TComSlice.h	/^  Void              setMaxBitsPerMinCuDenom(Int i)                         { m_maxBitsPerMinCuDenom = i;                    }$/;"	f	class:TComVUI
setMaxBytesPerPicDenom	TComSlice.h	/^  Void              setMaxBytesPerPicDenom(Int i)                          { m_maxBytesPerPicDenom = i;                     }$/;"	f	class:TComVUI
setMaxCUHeight	TComSlice.h	/^  Void                   setMaxCUHeight( UInt u )                                                        { m_uiMaxCUHeight = u;                                                 }$/;"	f	class:TComSPS
setMaxCUWidth	TComSlice.h	/^  Void                   setMaxCUWidth( UInt u )                                                         { m_uiMaxCUWidth = u;                                                  }$/;"	f	class:TComSPS
setMaxCuDQPDepth	TComSlice.h	/^  Void                   setMaxCuDQPDepth( UInt u )                                       { m_uiMaxCuDQPDepth = u;                        }$/;"	f	class:TComPPS
setMaxDecPicBuffering	TComSlice.h	/^  Void                   setMaxDecPicBuffering( UInt ui, UInt tlayer )                                   { assert(tlayer < MAX_TLAYER); m_uiMaxDecPicBuffering[tlayer] = ui;    }$/;"	f	class:TComSPS
setMaxDecPicBuffering	TComSlice.h	/^  Void              setMaxDecPicBuffering(UInt v, UInt tLayer)           { assert(tLayer < MAX_TLAYER); m_uiMaxDecPicBuffering[tLayer] = v; }$/;"	f	class:TComVPS
setMaxLatencyIncrease	TComSlice.h	/^  Void              setMaxLatencyIncrease(UInt v, UInt tLayer)           { m_uiMaxLatencyIncrease[tLayer] = v;                              }$/;"	f	class:TComVPS
setMaxLatencyIncreasePlus1	TComSlice.h	/^  Void                   setMaxLatencyIncreasePlus1( UInt ui , UInt tlayer)                              { m_uiMaxLatencyIncreasePlus1[tlayer] = ui;                            }$/;"	f	class:TComSPS
setMaxLayers	TComSlice.h	/^  Void              setMaxLayers(UInt l)                                 { m_uiMaxLayers = l;                                               }$/;"	f	class:TComVPS
setMaxNuhReservedZeroLayerId	TComSlice.h	/^  Void              setMaxNuhReservedZeroLayerId(UInt v)                 { m_maxNuhReservedZeroLayerId = v;                                 }$/;"	f	class:TComVPS
setMaxNumMergeCand	TComSlice.h	/^  Void                        setMaxNumMergeCand(UInt val )                          { m_maxNumMergeCand = val;                                      }$/;"	f	class:TComSlice
setMaxOpSets	TComSlice.h	/^  Void              setMaxOpSets(UInt v)                                 { m_numOpSets = v;                                                 }$/;"	f	class:TComVPS
setMaxTLayers	TComSlice.h	/^  Void                   setMaxTLayers( UInt uiMaxTLayers )                                              { assert( uiMaxTLayers <= MAX_TLAYER ); m_uiMaxTLayers = uiMaxTLayers; }$/;"	f	class:TComSPS
setMaxTLayers	TComSlice.h	/^  Void              setMaxTLayers(UInt t)                                { m_uiMaxTLayers = t;                                              }$/;"	f	class:TComVPS
setMaxTotalCUDepth	TComSlice.h	/^  Void                   setMaxTotalCUDepth( UInt u )                                                    { m_uiMaxTotalCUDepth = u;                                             }$/;"	f	class:TComSPS
setMaxTrSize	TComSlice.h	/^  Void                   setMaxTrSize( UInt u )                                                          { m_uiMaxTrSize = u;                                                   }$/;"	f	class:TComSPS
setMergeAMP	TComDataCU.h	/^  Void          setMergeAMP                   ( Bool b )                                                   { m_bIsMergeAMP = b;                         }$/;"	f	class:TComDataCU
setMergeFlag	TComDataCU.h	/^  Void          setMergeFlag                  ( UInt uiIdx, Bool b )                                       { m_pbMergeFlag[uiIdx] = b;                  }$/;"	f	class:TComDataCU
setMergeFlagSubParts	TComDataCU.cpp	/^Void TComDataCU::setMergeFlagSubParts ( Bool bMergeFlag, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setMergeIndex	TComDataCU.h	/^  Void          setMergeIndex                 ( UInt uiIdx, UInt uiMergeIndex )                            { m_puhMergeIndex[uiIdx] = uiMergeIndex;     }$/;"	f	class:TComDataCU
setMergeIndexSubParts	TComDataCU.cpp	/^Void TComDataCU::setMergeIndexSubParts ( UInt uiMergeIndex, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setMinSpatialSegmentationIdc	TComSlice.h	/^  Void              setMinSpatialSegmentationIdc(Int i)                    { m_minSpatialSegmentationIdc = i;               }$/;"	f	class:TComVUI
setMotionVectorsOverPicBoundariesFlag	TComSlice.h	/^  Void              setMotionVectorsOverPicBoundariesFlag(Bool i)          { m_motionVectorsOverPicBoundariesFlag = i;      }$/;"	f	class:TComVUI
setMvField	TComMotionInfo.h	/^  Void setMvField( TComMv const & cMv, Int iRefIdx )$/;"	f	class:TComMvField
setMvdL1ZeroFlag	TComSlice.h	/^  Void                        setMvdL1ZeroFlag( Bool b)                              { m_bLMvdL1Zero = b;                                            }$/;"	f	class:TComSlice
setNalHrdParametersPresentFlag	TComSlice.h	/^  Void    setNalHrdParametersPresentFlag( Bool flag )                                { m_nalHrdParametersPresentFlag = flag;                      }$/;"	f	class:TComHRD
setNalUnitType	TComSlice.h	/^  Void                        setNalUnitType( NalUnitType e )                        { m_eNalUnitType      = e;                                      }$/;"	f	class:TComSlice
setNeutralChromaIndicationFlag	TComSlice.h	/^  Void              setNeutralChromaIndicationFlag(Bool i)                 { m_neutralChromaIndicationFlag = i;             }$/;"	f	class:TComVUI
setNoOutputPriorPicsFlag	TComSlice.h	/^  Void                        setNoOutputPriorPicsFlag( Bool val )                   { m_noOutputPriorPicsFlag = val;                                }$/;"	f	class:TComSlice
setNoRaslOutputFlag	TComSlice.h	/^  Void                        setNoRaslOutputFlag( Bool val )                        { m_noRaslOutputFlag = val;                                     }$/;"	f	class:TComSlice
setNonPackedConstraintFlag	TComSlice.h	/^  Void          setNonPackedConstraintFlag(Bool b)          { m_nonPackedConstraintFlag = b;        }$/;"	f	class:ProfileTierLevel
setNumExtraSliceHeaderBits	TComSlice.h	/^  Void                   setNumExtraSliceHeaderBits(Int i)                                { m_numExtraSliceHeaderBits = i;                }$/;"	f	class:TComPPS
setNumHrdParameters	TComSlice.h	/^  Void              setNumHrdParameters(UInt v)                          { m_numHrdParameters = v;                                          }$/;"	f	class:TComVPS
setNumLongTermRefPicSPS	TComSlice.h	/^  Void                   setNumLongTermRefPicSPS(UInt val)                                               { m_numLongTermRefPicSPS = val;                                        }$/;"	f	class:TComSPS
setNumPartition	TComMotionInfo.h	/^  Void setNumPartition( Int iNumPart )$/;"	f	class:TComCUMvField
setNumRefIdc	TComSlice.h	/^  Void    setNumRefIdc(Int x)                          { m_numRefIdc = x;                     }$/;"	f	class:TComReferencePictureSet
setNumRefIdx	TComSlice.h	/^  Void                        setNumRefIdx( RefPicList e, Int i )                    { m_aiNumRefIdx[e]    = i;                                      }$/;"	f	class:TComSlice
setNumRefIdxL0DefaultActive	TComSlice.h	/^  Void                   setNumRefIdxL0DefaultActive(UInt ui)                             { m_numRefIdxL0DefaultActive=ui;                }$/;"	f	class:TComPPS
setNumRefIdxL1DefaultActive	TComSlice.h	/^  Void                   setNumRefIdxL1DefaultActive(UInt ui)                             { m_numRefIdxL1DefaultActive=ui;                }$/;"	f	class:TComPPS
setNumReorderPics	TComSlice.h	/^  Void                   setNumReorderPics(Int i, UInt tlayer)                                           { m_numReorderPics[tlayer] = i;                                        }$/;"	f	class:TComSPS
setNumReorderPics	TComSlice.h	/^  Void              setNumReorderPics(UInt v, UInt tLayer)               { m_numReorderPics[tLayer] = v;                                    }$/;"	f	class:TComVPS
setNumTicksPocDiffOneMinus1	TComSlice.h	/^  Void setNumTicksPocDiffOneMinus1(Int x)      { m_numTicksPocDiffOneMinus1 = x;       }$/;"	f	class:TimingInfo
setNumTileColumnsMinus1	TComPicSym.h	/^  Void               setNumTileColumnsMinus1( Int i )                      { m_numTileColumnsMinus1 = i;    }$/;"	f	class:TComPicSym
setNumTileColumnsMinus1	TComSlice.h	/^  Void                   setNumTileColumnsMinus1(Int i)                                   { m_numTileColumnsMinus1 = i;                   }$/;"	f	class:TComPPS
setNumTileRowsMinus1	TComPicSym.h	/^  Void               setNumTileRowsMinus1( Int i )                         { m_numTileRowsMinus1 = i;       }$/;"	f	class:TComPicSym
setNumTileRowsMinus1	TComSlice.h	/^  Void                   setNumTileRowsMinus1(Int i)                                      { m_numTileRowsMinus1 = i;                      }$/;"	f	class:TComPPS
setNumUnitsInTick	TComSlice.h	/^  Void setNumUnitsInTick( UInt value )         { m_numUnitsInTick = value;             }$/;"	f	class:TimingInfo
setNumberOfCtusInFrame	TComPicSym.h	/^  Void               setNumberOfCtusInFrame(TComPicSym *picsym, UInt numOfCtusInFrame) { picsym->m_numCtusInFrame = numOfCtusInFrame; }  \/\/\/< allows setting numOfCtusInFrame which controls memory allocations of several variables in TComPic, TComPicSym, TComLoopFilter and others. Make sure to have equal values of numOfCtusInFrame at time of creation and destruction of an object lifetime to avoid memory leaks.$/;"	f	class:MctsExtractorTComPicSym
setNumberOfLongtermPictures	TComSlice.h	/^  Void    setNumberOfLongtermPictures(Int number)      { m_numberOfLongtermPictures = number; }$/;"	f	class:TComReferencePictureSet
setNumberOfNegativePictures	TComSlice.h	/^  Void    setNumberOfNegativePictures(Int number)      { m_numberOfNegativePictures = number; }$/;"	f	class:TComReferencePictureSet
setNumberOfPictures	TComSlice.cpp	/^Void TComReferencePictureSet::setNumberOfPictures(Int numberOfPictures)$/;"	f	class:TComReferencePictureSet
setNumberOfPositivePictures	TComSlice.h	/^  Void    setNumberOfPositivePictures(Int number)      { m_numberOfPositivePictures = number; }$/;"	f	class:TComReferencePictureSet
setNumberOfTileRects	SEI.h	/^      Void setNumberOfTileRects(const Int number)$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
setNumberOfTileSets	SEI.h	/^  Void setNumberOfTileSets(const Int number)       { m_tile_set_data.resize(number);     }$/;"	f	class:SEITempMotionConstrainedTileSets
setOnePictureOnlyConstraintFlag	TComSlice.h	/^  Void          setOnePictureOnlyConstraintFlag(Bool b)     { m_onePictureOnlyConstraintFlag = b;   }$/;"	f	class:ProfileTierLevel
setOutputFlagPresentFlag	TComSlice.h	/^  Void                   setOutputFlagPresentFlag( Bool b )                               { m_OutputFlagPresentFlag = b;                  }$/;"	f	class:TComPPS
setOutputMark	TComPic.h	/^  Void          setOutputMark (Bool b) { m_bNeededForOutput = b;     }$/;"	f	class:TComPic
setOutsideCUPart	TComDataCU.cpp	/^Void TComDataCU::setOutsideCUPart( UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setOverscanAppropriateFlag	TComSlice.h	/^  Void              setOverscanAppropriateFlag(Bool i)                     { m_overscanAppropriateFlag = i;                 }$/;"	f	class:TComVUI
setOverscanInfoPresentFlag	TComSlice.h	/^  Void              setOverscanInfoPresentFlag(Bool i)                     { m_overscanInfoPresentFlag = i;                 }$/;"	f	class:TComVUI
setPCMBitDepth	TComSlice.h	/^  Void                   setPCMBitDepth(ChannelType type, UInt u)                                        { m_pcmBitDepths[type] = u;                                            }$/;"	f	class:TComSPS
setPCMFilterDisableFlag	TComSlice.h	/^  Void                   setPCMFilterDisableFlag( Bool bValue )                                          { m_bPCMFilterDisableFlag = bValue;                                    }$/;"	f	class:TComSPS
setPCMLog2MaxSize	TComSlice.h	/^  Void                   setPCMLog2MaxSize( UInt u )                                                     { m_pcmLog2MaxSize = u;                                                }$/;"	f	class:TComSPS
setPCMLog2MinSize	TComSlice.h	/^  Void                   setPCMLog2MinSize( UInt u )                                                     { m_uiPCMLog2MinSize = u;                                              }$/;"	f	class:TComSPS
setPOC	TComSlice.cpp	/^Void TComReferencePictureSet::setPOC(Int bufferNum, Int POC)$/;"	f	class:TComReferencePictureSet
setPOC	TComSlice.h	/^  Void                        setPOC( Int i )                                        { m_iPOC              = i; }$/;"	f	class:TComSlice
setPPS	TComSlice.h	/^  Void                        setPPS( const TComPPS* pcPPS )                         { m_pcPPS = pcPPS; m_iPPSId = (pcPPS) ? pcPPS->getPPSId() : -1; }$/;"	f	class:TComSlice
setPPSDeblockingFilterDisabledFlag	TComSlice.h	/^  Void                   setPPSDeblockingFilterDisabledFlag(Bool val)                     { m_ppsDeblockingFilterDisabledFlag = val;      } \/\/!< set offset for deblocking filter disabled$/;"	f	class:TComPPS
setPPSId	TComSlice.h	/^  Void                        setPPSId( Int PPSId )                                  { m_iPPSId = PPSId;                                             }$/;"	f	class:TComSlice
setPPSId	TComSlice.h	/^  Void                   setPPSId(Int i)                                                  { m_PPSId = i;                                  }$/;"	f	class:TComPPS
setPartSizeSubParts	TComDataCU.cpp	/^Void TComDataCU::setPartSizeSubParts( PartSize eMode, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setPartitionSize	TComDataCU.h	/^  Void          setPartitionSize              ( UInt uiIdx, PartSize uh )                                  { m_pePartSize[uiIdx] = uh;                  }$/;"	f	class:TComDataCU
setPersistentRiceAdaptationEnabledFlag	TComSlice.h	/^  Void setPersistentRiceAdaptationEnabledFlag(const Bool value)                        { m_persistentRiceAdaptationEnabledFlag = value; }$/;"	f	class:TComSPSRExt
setPic	TComSlice.h	/^  Void                        setPic( TComPic* p )                                   { m_pcPic             = p;                                      }$/;"	f	class:TComSlice
setPicDurationInTcMinus1	TComSlice.h	/^  Void    setPicDurationInTcMinus1( Int layer, UInt value )                          { m_HRD[layer].picDurationInTcMinus1 = value;                }$/;"	f	class:TComHRD
setPicHeightInLumaSamples	TComSlice.h	/^  Void                   setPicHeightInLumaSamples( UInt u )                                             { m_picHeightInLumaSamples = u;                                        }$/;"	f	class:TComSPS
setPicInitQPMinus26	TComSlice.h	/^  Void                   setPicInitQPMinus26( Int i )                                     { m_picInitQPMinus26 = i;                       }$/;"	f	class:TComPPS
setPicOutputFlag	TComSlice.h	/^  Void                        setPicOutputFlag( Bool b   )                           { m_PicOutputFlag = b;                                          }$/;"	f	class:TComSlice
setPicWidthInLumaSamples	TComSlice.h	/^  Void                   setPicWidthInLumaSamples( UInt u )                                              { m_picWidthInLumaSamples = u;                                         }$/;"	f	class:TComSPS
setPicYuvPred	TComPic.h	/^  Void          setPicYuvPred( TComPicYuv* pcPicYuv )       { m_pcPicYuvPred = pcPicYuv; }$/;"	f	class:TComPic
setPicYuvResi	TComPic.h	/^  Void          setPicYuvResi( TComPicYuv* pcPicYuv )       { m_pcPicYuvResi = pcPicYuv; }$/;"	f	class:TComPic
setPocLSBLT	TComSlice.h	/^  Void    setPocLSBLT(Int i, Int x)                    { m_pocLSBLT[i] = x;                  }$/;"	f	class:TComReferencePictureSet
setPocProportionalToTimingFlag	TComSlice.h	/^  Void setPocProportionalToTimingFlag(Bool x)  { m_pocProportionalToTimingFlag = x;    }$/;"	f	class:TimingInfo
setPredModeSubParts	TComDataCU.cpp	/^Void TComDataCU::setPredModeSubParts( PredMode eMode, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setPredictionMode	TComDataCU.h	/^  Void          setPredictionMode             ( UInt uiIdx, PredMode uh )                                  { m_pePredMode[uiIdx] = uh;                  }$/;"	f	class:TComDataCU
setPredictor	TComRdCost.h	/^  Void    setPredictor( TComMv& rcMv )$/;"	f	class:TComRdCost
setProfileCompatibilityFlag	TComSlice.h	/^  Void          setProfileCompatibilityFlag(Int i, Bool x)  { m_profileCompatibilityFlag[i] = x;    }$/;"	f	class:ProfileTierLevel
setProfileIdc	TComSlice.h	/^  Void          setProfileIdc(Profile::Name x)              { m_profileIdc = x;                     }$/;"	f	class:ProfileTierLevel
setProfileSpace	TComSlice.h	/^  Void          setProfileSpace(Int x)                      { m_profileSpace = x;                   }$/;"	f	class:ProfileTierLevel
setProgressiveSourceFlag	TComSlice.h	/^  Void          setProgressiveSourceFlag(Bool b)            { m_progressiveSourceFlag = b;          }$/;"	f	class:ProfileTierLevel
setQP	TComDataCU.h	/^  Void          setQP                         ( UInt uiIdx, SChar value )                                  { m_phQP[uiIdx] =  value;                    }$/;"	f	class:TComDataCU
setQPSubCUs	TComDataCU.cpp	/^Void TComDataCU::setQPSubCUs( Int qp, UInt absPartIdx, UInt depth, Bool &foundNonZeroCbf )$/;"	f	class:TComDataCU
setQPSubParts	TComDataCU.cpp	/^Void TComDataCU::setQPSubParts( Int qp, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setQpBDOffset	TComSlice.h	/^  Void                   setQpBDOffset(ChannelType type, Int i)                                          { m_qpBDOffset[type] = i;                                              }$/;"	f	class:TComSPS
setQpOffset	TComSlice.h	/^  Void                   setQpOffset(ComponentID compID, Int i )$/;"	f	class:TComPPS
setQuadtreeTULog2MaxSize	TComSlice.h	/^  Void                   setQuadtreeTULog2MaxSize( UInt u )                                              { m_uiQuadtreeTULog2MaxSize = u;                                       }$/;"	f	class:TComSPS
setQuadtreeTULog2MinSize	TComSlice.h	/^  Void                   setQuadtreeTULog2MinSize( UInt u )                                              { m_uiQuadtreeTULog2MinSize = u;                                       }$/;"	f	class:TComSPS
setQuadtreeTUMaxDepthInter	TComSlice.h	/^  Void                   setQuadtreeTUMaxDepthInter( UInt u )                                            { m_uiQuadtreeTUMaxDepthInter = u;                                     }$/;"	f	class:TComSPS
setQuadtreeTUMaxDepthIntra	TComSlice.h	/^  Void                   setQuadtreeTUMaxDepthIntra( UInt u )                                            { m_uiQuadtreeTUMaxDepthIntra = u;                                     }$/;"	f	class:TComSPS
setRDOQOffset	TComTrQuant.h	/^  Void setRDOQOffset( UInt uiRDOQOffset ) { m_uiRDOQOffset = uiRDOQOffset; }$/;"	f	class:TComTrQuant
setRPS	TComSlice.h	/^  Void                        setRPS( const TComReferencePictureSet *pcRPS )         { m_pRPS = pcRPS;                                               }$/;"	f	class:TComSlice
setRPSidx	TComSlice.h	/^  Void                        setRPSidx( Int rpsIdx )                                { m_rpsIdx = rpsIdx;                                            }$/;"	f	class:TComSlice
setRdpcmEnabledFlag	TComSlice.h	/^  Void setRdpcmEnabledFlag(const RDPCMSignallingMode signallingMode, const Bool value) { m_rdpcmEnabledFlag[signallingMode] = value;    }$/;"	f	class:TComSPSRExt
setReconMark	TComPic.h	/^  Void          setReconMark (Bool b) { m_bReconstructed = b;     }$/;"	f	class:TComPic
setRefIdc	TComSlice.cpp	/^Void TComReferencePictureSet::setRefIdc(Int bufferNum, Int refIdc)$/;"	f	class:TComReferencePictureSet
setRefIdx	TComMotionInfo.h	/^  Void setRefIdx( Int refIdx ) { m_iRefIdx = refIdx; }$/;"	f	class:TComMvField
setRefMatrixId	TComSlice.h	/^  Void       setRefMatrixId(UInt sizeId, UInt listId, UInt u)                   { m_refMatrixId[sizeId][listId] = u;                         } \/\/!< set reference matrix ID$/;"	f	class:TComScalingList
setRefPOC	TComSlice.h	/^  Void                        setRefPOC( Int i, RefPicList e, Int iRefIdx )          { m_aiRefPOCList[e][iRefIdx] = i;                               }$/;"	f	class:TComSlice
setRefPOCList	TComSlice.cpp	/^Void TComSlice::setRefPOCList       ()$/;"	f	class:TComSlice
setRefPic	TComSlice.h	/^  Void                        setRefPic( TComPic* p, RefPicList e, Int iRefIdx )     { m_apcRefPicList[e][iRefIdx] = p;                              }$/;"	f	class:TComSlice
setRefPicList	TComSlice.cpp	/^Void TComSlice::setRefPicList( TComList<TComPic*>& rcListPic, Bool checkNumPocTotalCurr )$/;"	f	class:TComSlice
setRefPicListModificationFlagL0	TComSlice.h	/^  Void    setRefPicListModificationFlagL0(Bool flag)     { m_refPicListModificationFlagL0 = flag;                                  }$/;"	f	class:TComRefPicListModification
setRefPicListModificationFlagL1	TComSlice.h	/^  Void    setRefPicListModificationFlagL1(Bool flag)     { m_refPicListModificationFlagL1 = flag;                                  }$/;"	f	class:TComRefPicListModification
setRefPicSetIdxL0	TComSlice.h	/^  Void    setRefPicSetIdxL0(UInt idx, UInt refPicSetIdx) { assert(idx<REF_PIC_LIST_NUM_IDX); m_RefPicSetIdxL0[idx] = refPicSetIdx; }$/;"	f	class:TComRefPicListModification
setRefPicSetIdxL1	TComSlice.h	/^  Void    setRefPicSetIdxL1(UInt idx, UInt refPicSetIdx) { assert(idx<REF_PIC_LIST_NUM_IDX); m_RefPicSetIdxL1[idx] = refPicSetIdx; }$/;"	f	class:TComRefPicListModification
setReferenced	TComSlice.h	/^  Void                        setReferenced(Bool b)                                  { m_bRefenced = b;                                              }$/;"	f	class:TComSlice
setRegionId	TypeDef.h	/^  Void setRegionId(UInt const val)   { m_regionId = val; }$/;"	f	class:RNSEIWindow
setRestrictedRefPicListsFlag	TComSlice.h	/^  Void              setRestrictedRefPicListsFlag(Bool b)                   { m_restrictedRefPicListsFlag = b;               }$/;"	f	class:TComVUI
setRightEdgePosInCtus	TComPicSym.h	/^  Void      setRightEdgePosInCtus  ( UInt i )            { m_rightEdgePosInCtus = i; }$/;"	f	class:TComTile
setSEIs	TComPic.h	/^  Void setSEIs(SEIMessages& seis) { m_SEIs = seis; }$/;"	f	class:TComPic
setSPS	TComSlice.h	/^  Void                        setSPS( const TComSPS* pcSPS )                         { m_pcSPS = pcSPS;                                              }$/;"	f	class:TComSlice
setSPSId	TComSlice.h	/^  Void                   setSPSId(Int i)                                                                 { m_SPSId = i;                                                         }$/;"	f	class:TComSPS
setSPSId	TComSlice.h	/^  Void                   setSPSId(Int i)                                                  { m_SPSId = i;                                  }$/;"	f	class:TComPPS
setSPSTemporalMVPEnabledFlag	TComSlice.h	/^  Void                   setSPSTemporalMVPEnabledFlag(Bool b)                                            { m_SPSTemporalMVPEnabledFlag=b;                                       }$/;"	f	class:TComSPS
setSaoEnabledFlag	TComSlice.h	/^  Void                        setSaoEnabledFlag(ChannelType chType, Bool s)          {m_saoEnabledFlag[chType] =s;                                   }$/;"	f	class:TComSlice
setSarHeight	TComSlice.h	/^  Void              setSarHeight(Int i)                                    { m_sarHeight = i;                               }$/;"	f	class:TComVUI
setSarWidth	TComSlice.h	/^  Void              setSarWidth(Int i)                                     { m_sarWidth = i;                                }$/;"	f	class:TComVUI
setScalingList	TComTrQuant.cpp	/^Void TComTrQuant::setScalingList(TComScalingList *scalingList, const Int maxLog2TrDynamicRange[MAX_NUM_CHANNEL_TYPE], const BitDepths &bitDepths)$/;"	f	class:TComTrQuant
setScalingListDC	TComSlice.h	/^  Void       setScalingListDC(UInt sizeId, UInt listId, UInt u)                 { m_scalingListDC[sizeId][listId] = u;                       } \/\/!< set DC value$/;"	f	class:TComScalingList
setScalingListDec	TComTrQuant.cpp	/^Void TComTrQuant::setScalingListDec(const TComScalingList &scalingList)$/;"	f	class:TComTrQuant
setScalingListFlag	TComSlice.h	/^  Void                   setScalingListFlag( Bool b )                                                    { m_scalingListEnabledFlag  = b;                                       }$/;"	f	class:TComSPS
setScalingListPredModeFlag	TComSlice.h	/^  Void       setScalingListPredModeFlag(UInt sizeId, UInt listId, Bool bIsDPCM) { m_scalingListPredModeFlagIsDPCM[sizeId][listId] = bIsDPCM; }$/;"	f	class:TComScalingList
setScalingListPresentFlag	TComSlice.h	/^  Void                   setScalingListPresentFlag( Bool b )                                             { m_scalingListPresentFlag  = b;                                       }$/;"	f	class:TComSPS
setScalingListPresentFlag	TComSlice.h	/^  Void                   setScalingListPresentFlag( Bool b )                              { m_scalingListPresentFlag  = b;                }$/;"	f	class:TComPPS
setSignDataHidingEnabledFlag	TComSlice.h	/^  Void                   setSignDataHidingEnabledFlag( Bool b )                           { m_signDataHidingEnabledFlag = b;              }$/;"	f	class:TComPPS
setSizeSubParts	TComDataCU.cpp	/^Void TComDataCU::setSizeSubParts( UInt uiWidth, UInt uiHeight, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setSkipFlag	TComDataCU.h	/^  Void          setSkipFlag                   ( UInt idx, Bool skip )                                      { m_skipFlag[idx] = skip;                    }$/;"	f	class:TComDataCU
setSkipFlagSubParts	TComDataCU.cpp	/^Void TComDataCU::setSkipFlagSubParts( Bool skip, UInt absPartIdx, UInt depth )$/;"	f	class:TComDataCU
setSliceArgument	TComSlice.h	/^  Void                        setSliceArgument( UInt uiArgument )                    { m_sliceArgument = uiArgument;                                 }$/;"	f	class:TComSlice
setSliceBits	TComSlice.h	/^  Void                        setSliceBits( UInt uiVal )                             { m_sliceBits = uiVal;                                          }$/;"	f	class:TComSlice
setSliceChromaQpDelta	TComSlice.h	/^  Void                        setSliceChromaQpDelta( ComponentID compID, Int i )     { m_iSliceChromaQpDelta[compID] = isLuma(compID) ? 0 : i;       }$/;"	f	class:TComSlice
setSliceChromaQpFlag	TComSlice.h	/^  Void                   setSliceChromaQpFlag( Bool b )                                   { m_bSliceChromaQpFlag = b;                     }$/;"	f	class:TComPPS
setSliceCurEndCtuTsAddr	TComSlice.h	/^  Void                        setSliceCurEndCtuTsAddr( UInt ctuTsAddr )              { m_sliceCurEndCtuTsAddr = ctuTsAddr;                           } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
setSliceCurStartCtuTsAddr	TComSlice.h	/^  Void                        setSliceCurStartCtuTsAddr( UInt ctuTsAddr )            { m_sliceCurStartCtuTsAddr = ctuTsAddr;                         } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
setSliceHeaderExtensionPresentFlag	TComSlice.h	/^  Void                   setSliceHeaderExtensionPresentFlag(Bool val)                     { m_sliceHeaderExtensionPresentFlag = val;      }$/;"	f	class:TComPPS
setSliceIdx	TComSlice.h	/^  Void                        setSliceIdx( UInt i)                                   { m_sliceIdx = i;                                               }$/;"	f	class:TComSlice
setSliceMode	TComSlice.h	/^  Void                        setSliceMode( SliceConstraint mode )                   { m_sliceMode = mode;                                           }$/;"	f	class:TComSlice
setSliceQp	TComSlice.h	/^  Void                        setSliceQp( Int i )                                    { m_iSliceQp          = i;                                      }$/;"	f	class:TComSlice
setSliceQpBase	TComSlice.h	/^  Void                        setSliceQpBase( Int i )                                { m_iSliceQpBase      = i;                                      }$/;"	f	class:TComSlice
setSliceQpDelta	TComSlice.h	/^  Void                        setSliceQpDelta( Int i )                               { m_iSliceQpDelta     = i;                                      }$/;"	f	class:TComSlice
setSliceSegmentArgument	TComSlice.h	/^  Void                        setSliceSegmentArgument( UInt uiArgument )             { m_sliceSegmentArgument = uiArgument;                          }$/;"	f	class:TComSlice
setSliceSegmentBits	TComSlice.h	/^  Void                        setSliceSegmentBits( UInt uiVal )                      { m_sliceSegmentBits = uiVal;                                   }$/;"	f	class:TComSlice
setSliceSegmentCurEndCtuTsAddr	TComSlice.h	/^  Void                        setSliceSegmentCurEndCtuTsAddr( UInt ctuTsAddr )       { m_sliceSegmentCurEndCtuTsAddr = ctuTsAddr;                    } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
setSliceSegmentCurStartCtuTsAddr	TComSlice.h	/^  Void                        setSliceSegmentCurStartCtuTsAddr( UInt ctuTsAddr )     { m_sliceSegmentCurStartCtuTsAddr = ctuTsAddr;                  } \/\/ CTU Tile-scan address (as opposed to raster-scan)$/;"	f	class:TComSlice
setSliceSegmentMode	TComSlice.h	/^  Void                        setSliceSegmentMode( SliceConstraint mode )            { m_sliceSegmentMode = mode;                                    }$/;"	f	class:TComSlice
setSliceType	TComSlice.h	/^  Void                        setSliceType( SliceType e )                            { m_eSliceType        = e;                                      }$/;"	f	class:TComSlice
setStateAndMps	ContextModel.h	/^  Void  setStateAndMps( UChar ucState, UChar ucMPS) { m_ucState = (ucState << 1) + ucMPS; } \/\/\/< set state and MPS$/;"	f	class:ContextModel
setStreamBitDepth	TComSlice.h	/^  Void                   setStreamBitDepth(ChannelType type, Int u )                                     { m_bitDepths.stream[type] = u;                                        }$/;"	f	class:TComSPS
setSubLayerLevelPresentFlag	TComSlice.h	/^  Void                    setSubLayerLevelPresentFlag(Int i, Bool x)   { m_subLayerLevelPresentFlag[i] = x;      }$/;"	f	class:TComPTL
setSubLayerProfilePresentFlag	TComSlice.h	/^  Void                    setSubLayerProfilePresentFlag(Int i, Bool x) { m_subLayerProfilePresentFlag[i] = x;    }$/;"	f	class:TComPTL
setSubPart	TComDataCU.cpp	/^Void TComDataCU::setSubPart( T uiParameter, T* puhBaseCtu, UInt uiCUAddr, UInt uiCUDepth, UInt uiPUIdx )$/;"	f	class:TComDataCU
setSubPicCpbParamsInPicTimingSEIFlag	TComSlice.h	/^  Void    setSubPicCpbParamsInPicTimingSEIFlag( Bool flag)                           { m_subPicCpbParamsInPicTimingSEIFlag = flag;                }$/;"	f	class:TComHRD
setSubPicCpbParamsPresentFlag	TComSlice.h	/^  Void    setSubPicCpbParamsPresentFlag( Bool flag )                                 { m_subPicCpbParamsPresentFlag = flag;                       }$/;"	f	class:TComHRD
setTLayer	TComPic.h	/^  Void          setTLayer( UInt uiTLayer ) { m_uiTLayer = uiTLayer; }$/;"	f	class:TComPic
setTLayer	TComSlice.h	/^  Void                        setTLayer( UInt uiTLayer )                             { m_uiTLayer = uiTLayer;                                        }$/;"	f	class:TComSlice
setTLayerInfo	TComSlice.cpp	/^Void TComSlice::setTLayerInfo( UInt uiTLayer )$/;"	f	class:TComSlice
setTMctsMvpIsValid	TComDataCU.h	/^  Void          setTMctsMvpIsValid(Bool b)    { m_tMctsMvpIsValid = b; }$/;"	f	class:TComDataCU
setTemporalIdNestingFlag	TComSlice.h	/^  Void                   setTemporalIdNestingFlag( Bool bValue )                                         { m_bTemporalIdNestingFlag = bValue;                                   }$/;"	f	class:TComSPS
setTemporalLayerNonReferenceFlag	TComSlice.h	/^  Void                        setTemporalLayerNonReferenceFlag(Bool x)               { m_temporalLayerNonReferenceFlag = x;                          }$/;"	f	class:TComSlice
setTemporalNestingFlag	TComSlice.h	/^  Void              setTemporalNestingFlag(Bool t)                       { m_bTemporalIdNestingFlag = t;                                    }$/;"	f	class:TComVPS
setTestWeightBiPred	TComSlice.h	/^  Void                        setTestWeightBiPred( Bool bValue )                     { m_bTestWeightBiPred = bValue;                                 }$/;"	f	class:TComSlice
setTestWeightPred	TComSlice.h	/^  Void                        setTestWeightPred( Bool bValue )                       { m_bTestWeightPred = bValue;                                   }$/;"	f	class:TComSlice
setTickDivisorMinus2	TComSlice.h	/^  Void    setTickDivisorMinus2( UInt value )                                         { m_tickDivisorMinus2 = value;                               }$/;"	f	class:TComHRD
setTierFlag	TComSlice.h	/^  Void          setTierFlag(Level::Tier x)                  { m_tierFlag = x;                       }$/;"	f	class:ProfileTierLevel
setTileBorders	TComPattern.cpp	/^Void TComPattern::setTileBorders(Int tileLeftTopPelPosX, Int tileLeftTopPelPosY, Int tileRightBottomPelPosX, Int tileRightBottomPelPosY)$/;"	f	class:TComPattern
setTileColumnWidth	TComSlice.h	/^  Void                   setTileColumnWidth(const std::vector<Int>& columnWidth )         { m_tileColumnWidth = columnWidth;              }$/;"	f	class:TComPPS
setTileHeightInCtus	TComPicSym.h	/^  Void      setTileHeightInCtus    ( UInt i )            { m_tileHeightInCtus = i; }$/;"	f	class:TComTile
setTileRowHeight	TComSlice.h	/^  Void                   setTileRowHeight(const std::vector<Int>& rowHeight)              { m_tileRowHeight = rowHeight;                  }$/;"	f	class:TComPPS
setTileUniformSpacingFlag	TComSlice.h	/^  Void                   setTileUniformSpacingFlag(Bool b)                                { m_uniformSpacingFlag = b;                     }$/;"	f	class:TComPPS
setTileWidthInCtus	TComPicSym.h	/^  Void      setTileWidthInCtus     ( UInt i )            { m_tileWidthInCtus = i; }$/;"	f	class:TComTile
setTilesEnabledFlag	TComSlice.h	/^  Void                   setTilesEnabledFlag(Bool val)                                    { m_tilesEnabledFlag = val;                     }$/;"	f	class:TComPPS
setTilesFixedStructureFlag	TComSlice.h	/^  Void              setTilesFixedStructureFlag(Bool i)                     { m_tilesFixedStructureFlag = i;                 }$/;"	f	class:TComVUI
setTimeScale	TComSlice.h	/^  Void setTimeScale( UInt value )              { m_timeScale = value;                  }$/;"	f	class:TimingInfo
setTimingInfoPresentFlag	TComSlice.h	/^  Void setTimingInfoPresentFlag( Bool flag )   { m_timingInfoPresentFlag = flag;       }$/;"	f	class:TimingInfo
setTopField	TComPic.h	/^   Void              setTopField(Bool b)                  {m_isTop = b;}$/;"	f	class:TComPic
setTrIdxSubParts	TComDataCU.cpp	/^Void TComDataCU::setTrIdxSubParts( UInt uiTrIdx, UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setTransferCharacteristics	TComSlice.h	/^  Void              setTransferCharacteristics(Int i)                      { m_transferCharacteristics = i;                 }$/;"	f	class:TComVUI
setTransformSkipContextEnabledFlag	TComSlice.h	/^  Void setTransformSkipContextEnabledFlag(const Bool value)                            { m_transformSkipContextEnabledFlag = value;     }$/;"	f	class:TComSPSRExt
setTransformSkipPartRange	TComDataCU.cpp	/^Void TComDataCU::setTransformSkipPartRange ( UInt useTransformSkip, ComponentID compID, UInt uiAbsPartIdx, UInt uiCoveredPartIdxes )$/;"	f	class:TComDataCU
setTransformSkipRotationEnabledFlag	TComSlice.h	/^  Void setTransformSkipRotationEnabledFlag(const Bool value)                           { m_transformSkipRotationEnabledFlag = value;    }$/;"	f	class:TComSPSRExt
setTransformSkipSubParts	TComDataCU.cpp	/^Void TComDataCU::setTransformSkipSubParts( UInt useTransformSkip, ComponentID compID, UInt uiAbsPartIdx, UInt uiDepth)$/;"	f	class:TComDataCU
setTransformSkipSubParts	TComDataCU.cpp	/^Void TComDataCU::setTransformSkipSubParts( const UInt useTransformSkip[MAX_NUM_COMPONENT], UInt uiAbsPartIdx, UInt uiDepth )$/;"	f	class:TComDataCU
setTransquantBypassEnabledFlag	TComSlice.h	/^  Void                   setTransquantBypassEnabledFlag( Bool b )                         { m_TransquantBypassEnabledFlag = b;            }$/;"	f	class:TComPPS
setUseAMP	TComSlice.h	/^  Void                   setUseAMP( Bool b )                                                             { m_useAMP = b;                                                        }$/;"	f	class:TComSPS
setUseChromaQpAdj	TComSlice.h	/^  Void                        setUseChromaQpAdj( Bool b )                            { m_ChromaQpAdjEnabled = b;                                     }$/;"	f	class:TComSlice
setUseDQP	TComSlice.h	/^  Void                   setUseDQP( Bool b )                                              { m_useDQP   = b;                               }$/;"	f	class:TComPPS
setUsePCM	TComSlice.h	/^  Void                   setUsePCM( Bool b )                                                             { m_usePCM = b;                                                        }$/;"	f	class:TComSPS
setUseSAO	TComSlice.h	/^  Void                   setUseSAO(Bool bVal)                                                            { m_bUseSAO = bVal;                                                    }$/;"	f	class:TComSPS
setUseScalingList	TComTrQuant.h	/^  Void setUseScalingList   ( Bool bUseScalingList){ m_scalingListEnabledFlag = bUseScalingList; };$/;"	f	class:TComTrQuant
setUseStrongIntraSmoothing	TComSlice.h	/^  Void                   setUseStrongIntraSmoothing(Bool bVal)                                           { m_useStrongIntraSmoothing = bVal;                                    }$/;"	f	class:TComSPS
setUseTransformSkip	TComSlice.h	/^  Void                   setUseTransformSkip( Bool b )                                    { m_useTransformSkip  = b;                      }$/;"	f	class:TComPPS
setUseWP	TComSlice.h	/^  Void                   setUseWP( Bool b )                                               { m_bUseWeightPred = b;                         }$/;"	f	class:TComPPS
setUsed	TComSlice.cpp	/^Void TComReferencePictureSet::setUsed(Int bufferNum, Bool used)$/;"	f	class:TComReferencePictureSet
setUsedByCurr	TComPic.h	/^  Void          setUsedByCurr( Bool bUsed ) { m_bUsedByCurr = bUsed; }$/;"	f	class:TComPic
setUsedByCurrPicLtSPSFlag	TComSlice.h	/^  Void                   setUsedByCurrPicLtSPSFlag(Int i, Bool x)                                        { assert( i < MAX_NUM_LONG_TERM_REF_PICS ); m_usedByCurrPicLtSPSFlag[i] = x;       }$/;"	f	class:TComSPS
setVPS	TComSlice.h	/^  Void                        setVPS( TComVPS* pcVPS )                               { m_pcVPS = pcVPS;                                              }$/;"	f	class:TComSlice
setVPSId	TComSlice.h	/^  Void                   setVPSId(Int i)                                                                 { m_VPSId = i;                                                         }$/;"	f	class:TComSPS
setVPSId	TComSlice.h	/^  Void              setVPSId(Int i)                                      { m_VPSId = i;                                                     }$/;"	f	class:TComVPS
setVclHrdParametersPresentFlag	TComSlice.h	/^  Void    setVclHrdParametersPresentFlag( Bool flag )                                { m_vclHrdParametersPresentFlag = flag;                      }$/;"	f	class:TComHRD
setVer	TComMv.h	/^  Void  setVer    ( Short i )                   { m_iVer = i;                               }$/;"	f	class:TComMv
setVideoFormat	TComSlice.h	/^  Void              setVideoFormat(Int i)                                  { m_videoFormat = i;                             }$/;"	f	class:TComVUI
setVideoFullRangeFlag	TComSlice.h	/^  Void              setVideoFullRangeFlag(Bool i)                          { m_videoFullRangeFlag = i;                      }$/;"	f	class:TComVUI
setVideoSignalTypePresentFlag	TComSlice.h	/^  Void              setVideoSignalTypePresentFlag(Bool i)                  { m_videoSignalTypePresentFlag = i;              }$/;"	f	class:TComVUI
setVuiParametersPresentFlag	TComSlice.h	/^  Void                   setVuiParametersPresentFlag(Bool b)                                             { m_vuiParametersPresentFlag = b;                                      }$/;"	f	class:TComSPS
setWPBiPred	TComSlice.h	/^  Void                   setWPBiPred( Bool b )                                            { m_useWeightedBiPred = b;                      }$/;"	f	class:TComPPS
setWidth	TComDataCU.h	/^  Void          setWidth                      ( UInt uiIdx, UChar  uh )                                    { m_puhWidth[uiIdx] = uh;                    }$/;"	f	class:TComDataCU
setWindow	TypeDef.h	/^  Void setWindow(Int offsetLeft, Int offsetLRight, Int offsetLTop, Int offsetLBottom)$/;"	f	class:Window
setWindowBottomOffset	TypeDef.h	/^  Void setWindowBottomOffset(Int val) { m_winBottomOffset = val; m_enabledFlag = true; }$/;"	f	class:Window
setWindowLeftOffset	TypeDef.h	/^  Void setWindowLeftOffset(Int val)   { m_winLeftOffset = val; m_enabledFlag = true;   }$/;"	f	class:Window
setWindowRightOffset	TypeDef.h	/^  Void setWindowRightOffset(Int val)  { m_winRightOffset = val; m_enabledFlag = true;  }$/;"	f	class:Window
setWindowTopOffset	TypeDef.h	/^  Void setWindowTopOffset(Int val)    { m_winTopOffset = val; m_enabledFlag = true;    }$/;"	f	class:Window
setWpAcDcParam	TComSlice.h	/^  Void                        setWpAcDcParam( WPACDCParam wp[MAX_NUM_COMPONENT] )$/;"	f	class:TComSlice
setWpScaling	TComSlice.h	/^  Void                        setWpScaling( WPScalingParam  wp[NUM_REF_PIC_LIST_01][MAX_NUM_REF][MAX_NUM_COMPONENT] )$/;"	f	class:TComSlice
setZero	TComMv.h	/^  Void  setZero   ()                            { m_iHor = m_iVer = 0;  }$/;"	f	class:TComMv
settingHelpWidth	Debug.cpp	/^static const UInt settingHelpWidth  = 84;$/;"	v	file:
settingNameWidth	Debug.cpp	/^static const UInt settingNameWidth  = 66;$/;"	v	file:
settingValueWidth	Debug.cpp	/^static const UInt settingValueWidth = 3;$/;"	v	file:
settingsDifferFromDefaults	TComSlice.h	/^  Bool settingsDifferFromDefaults() const$/;"	f	class:TComSPSRExt
settingsDifferFromDefaults	TComSlice.h	/^  Bool settingsDifferFromDefaults(const bool bTransformSkipEnabledFlag) const$/;"	f	class:TComPPSRExt
sgn	TComSampleAdaptiveOffset.h	/^template <typename T> Int sgn(T val)$/;"	f
shift	TComSlice.h	/^  Int  shift;$/;"	m	struct:WPScalingParam
signBitHidingHDQ	TComTrQuant.cpp	/^Void TComTrQuant::signBitHidingHDQ( TCoeff* pQCoef, TCoeff* pCoef, TCoeff* deltaU, const TUEntropyCodingParameters &codingParameters, const Int maxLog2TrDynamicRange )$/;"	f	class:TComTrQuant
significanceMapContextSetSize	ContextTables.h	/^static const UInt significanceMapContextSetSize          [MAX_NUM_CHANNEL_TYPE][CONTEXT_NUMBER_OF_TYPES] = { {9, 12,  6,  1}, {9,  3,  3,  1} };$/;"	v
significanceMapContextSetStart	ContextTables.h	/^static const UInt significanceMapContextSetStart         [MAX_NUM_CHANNEL_TYPE][CONTEXT_NUMBER_OF_TYPES] = { {0,  9, 21, 27}, {0,  9, 12, 15} };$/;"	v
significanceMapContextStartTable	TComChromaFormat.h	/^static const UInt significanceMapContextStartTable[MAX_NUM_CHANNEL_TYPE] = {FIRST_SIG_FLAG_CTX_LUMA, FIRST_SIG_FLAG_CTX_CHROMA};$/;"	v
significantBits	TComTrQuant.h	/^  Int significantBits[NUM_SIG_FLAG_CTX][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
significantCoeffGroupBits	TComTrQuant.h	/^  Int significantCoeffGroupBits[NUM_SIG_CG_FLAG_CTX][2 \/*Flag = [0|1]*\/];$/;"	m	struct:__anon3
simd8x8HAD1D32b	TComRdCost.cpp	/^Void simd8x8HAD1D32b( __m128i * pInput , __m128i * pOutput )$/;"	f
simd8x8Transpose32b	TComRdCost.cpp	/^inline Void simd8x8Transpose32b( __m128i * pBuffer )$/;"	f
simdAbs32b	TComRdCost.cpp	/^inline __m128i simdAbs32b( __m128i m )$/;"	f
simdClip3	TComInterpolationFilter.cpp	/^inline __m128i simdClip3( __m128i mmMin , __m128i mmMax , __m128i mmPix )$/;"	f
simdHADs8x8	TComRdCost.cpp	/^UInt simdHADs8x8( const Pel * piOrg, const Pel * piCur, Int iStrideOrg, Int iStrideCur )$/;"	f
simdInterpolateChroma4	TComInterpolationFilter.cpp	/^inline __m128i simdInterpolateChroma4( Short const *src , Int srcStride , __m128i *mmCoeff , const __m128i & mmOffset , Int shift )$/;"	f
simdInterpolateLuma2P4	TComInterpolationFilter.cpp	/^inline __m128i simdInterpolateLuma2P4( Short const *src , Int srcStride , __m128i *mmCoeff , const __m128i & mmOffset , Int shift )$/;"	f
simdInterpolateLuma2P8	TComInterpolationFilter.cpp	/^inline __m128i simdInterpolateLuma2P8( Short const *src , Int srcStride , __m128i *mmCoeff , const __m128i & mmOffset , Int shift )$/;"	f
simdInterpolateLuma4	TComInterpolationFilter.cpp	/^inline __m128i simdInterpolateLuma4( Short const *src , Int srcStride , __m128i *mmCoeff , const __m128i & mmOffset , Int shift )$/;"	f
simdInterpolateLuma8	TComInterpolationFilter.cpp	/^inline __m128i simdInterpolateLuma8( Short const *src , Int srcStride , __m128i *mmCoeff , const __m128i & mmOffset , Int shift )$/;"	f
simdSADLine4n16b	TComRdCost.cpp	/^inline Int simdSADLine4n16b( const Pel * piOrg , const Pel * piCur , Int nWidth )$/;"	f
simdSADLine8n16b	TComRdCost.cpp	/^inline Int simdSADLine8n16b( const Pel * piOrg , const Pel * piCur , Int nWidth )$/;"	f
simulateGrainBlk8x8	SEIFilmGrainSynthesizer.cpp	/^void SEIFilmGrainSynthesizer::simulateGrainBlk8x8(int32_t *grainStripe, uint32_t grainStripeOffsetBlk8,$/;"	f	class:SEIFilmGrainSynthesizer
sm_aucLPSTable	TComCABACTables.cpp	/^const UChar TComCABACTables::sm_aucLPSTable[1 << CONTEXT_STATE_BITS][4] =$/;"	m	class:TComCABACTables	file:
sm_aucLPSTable	TComCABACTables.h	/^  const static UChar  sm_aucLPSTable[1 << CONTEXT_STATE_BITS][4];$/;"	m	class:TComCABACTables
sm_aucRenormTable	TComCABACTables.cpp	/^const UChar TComCABACTables::sm_aucRenormTable[32] =$/;"	m	class:TComCABACTables	file:
sm_aucRenormTable	TComCABACTables.h	/^  const static UChar  sm_aucRenormTable[32];$/;"	m	class:TComCABACTables
sm_betaTable	TComLoopFilter.cpp	/^const UChar TComLoopFilter::sm_betaTable[MAX_QP + 1] =$/;"	m	class:TComLoopFilter	file:
sm_betaTable	TComLoopFilter.h	/^  static const UChar sm_betaTable[52];$/;"	m	class:TComLoopFilter
sm_tcTable	TComLoopFilter.cpp	/^const UChar TComLoopFilter::sm_tcTable[MAX_QP + 1 + DEFAULT_INTRA_TC_OFFSET] =$/;"	m	class:TComLoopFilter	file:
sm_tcTable	TComLoopFilter.h	/^  static const UChar sm_tcTable[54];$/;"	m	class:TComLoopFilter
sortDeltaPOC	TComSlice.cpp	/^Void TComReferencePictureSet::sortDeltaPOC()$/;"	f	class:TComReferencePictureSet
sortPicList	TComSlice.cpp	/^Void  TComSlice::sortPicList        (TComList<TComPic*>& rcListPic)$/;"	f	class:TComSlice
splitOnSettings	Debug.cpp	/^std::string splitOnSettings(const std::string &input)$/;"	f
statistics	TComCodingStatistics.h	/^        SStat statistics[STATS__NUM_STATS+1][CODING_STATS_NUM_SUBCLASSES];$/;"	m	class:TComCodingStatistics::TComCodingStatisticsData
statistics_ep	TComCodingStatistics.h	/^        SStat statistics_ep[STATS__NUM_STATS+1][CODING_STATS_NUM_SUBCLASSES ];$/;"	m	class:TComCodingStatistics::TComCodingStatisticsData
storePPS	TComSlice.h	/^  Void           storePPS(TComPPS *pps, const std::vector<UChar> &naluData) { m_ppsMap.storePS( pps->getPPSId(), pps, &naluData); };$/;"	f	class:ParameterSetManager
storePS	TComSlice.h	/^  Void storePS(Int psId, T *ps, const std::vector<UChar> *pNaluData)$/;"	f	class:ParameterSetMap
storeSPS	TComSlice.h	/^  Void           storeSPS(TComSPS *sps, const std::vector<UChar> &naluData) { m_spsMap.storePS( sps->getSPSId(), sps, &naluData); };$/;"	f	class:ParameterSetManager
storeSliceQpNext	TComTrQuant.cpp	/^Void TComTrQuant::storeSliceQpNext(TComSlice* pcSlice)$/;"	f	class:TComTrQuant
storeVPS	TComSlice.h	/^  Void           storeVPS(TComVPS *vps, const std::vector<UChar> &naluData) { m_vpsMap.storePS( vps->getVPSId(), vps, &naluData); };$/;"	f	class:ParameterSetManager
stream	TypeDef.h	/^  Int stream[MAX_NUM_CHANNEL_TYPE];\/\/\/< the bit depth used indicated in the SPS$/;"	m	struct:BitDepths
stringToInputColourSpaceConvert	TComChromaFormat.cpp	/^InputColourSpaceConversion stringToInputColourSpaceConvert(const std::string &value, const Bool bIsForward)$/;"	f
subClass	TComCodingStatistics.h	/^  UInt subClass;$/;"	m	class:TComCodingStatisticsClassType
subtract	TComYuv.cpp	/^Void TComYuv::subtract( const TComYuv* pcYuvSrc0, const TComYuv* pcYuvSrc1, const UInt uiTrUnitIdx, const UInt uiPartSize )$/;"	f	class:TComYuv
suffix_sei_messages	SEI.h	/^  static const std::vector <SEI::PayloadType> suffix_sei_messages;$/;"	m	class:SEI
sum	TComCodingStatistics.h	/^      Int64 sum;$/;"	m	struct:TComCodingStatistics::SStat
swapSliceObject	TComPicSym.h	/^  TComSlice *        swapSliceObject(TComSlice* p, UInt i)                 { p->setSPS(&m_sps); p->setPPS(&m_pps); TComSlice *pTmp=m_apSlices[i];m_apSlices[i] = p; pTmp->setSPS(0); pTmp->setPPS(0); return pTmp; }$/;"	f	class:TComPicSym
targetValue	SEI.h	/^    Int targetValue;$/;"	m	struct:SEIColourRemappingInfo::CRIlut
testWeightBiPred	TComSlice.h	/^  Bool                        testWeightBiPred( ) const                              { return m_bTestWeightBiPred;                                   }$/;"	f	class:TComSlice
testWeightPred	TComSlice.h	/^  Bool                        testWeightPred( ) const                                { return m_bTestWeightPred;                                     }$/;"	f	class:TComSlice
tileSetData	SEI.h	/^        TileSetData &tileSetData (const Int index)       { return m_tile_set_data[index]; }$/;"	f	class:SEITempMotionConstrainedTileSets
tileSetData	SEI.h	/^  const TileSetData &tileSetData (const Int index) const { return m_tile_set_data[index]; }$/;"	f	class:SEITempMotionConstrainedTileSets
tiltCentre	SEI.h	/^    Int  tiltCentre;$/;"	m	struct:SEIOmniViewport::OmniViewport
timeOffsetLength	TypeDef.h	/^  Int  timeOffsetLength;$/;"	m	struct:TComSEITimeSet
timeOffsetValue	TypeDef.h	/^  Int  timeOffsetValue;$/;"	m	struct:TComSEITimeSet
timeSetArray	SEI.h	/^  TComSEITimeSet timeSetArray[MAX_TIMECODE_SEI_SETS];$/;"	m	class:SEITimeCode
tl0Idx	SEI.h	/^  UInt tl0Idx;$/;"	m	class:SEITemporalLevel0Index
toChannelType	TComChromaFormat.h	/^static inline ChannelType toChannelType             (const ComponentID id)                         { return (id==COMPONENT_Y)? CHANNEL_TYPE_LUMA : CHANNEL_TYPE_CHROMA; }$/;"	f
topLeftTileIndex	SEI.h	/^            Int &topLeftTileIndex    (const Int tileRectIndex)       { return m_top_left_tile_index    [tileRectIndex]; }$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
topLeftTileIndex	SEI.h	/^      const Int &topLeftTileIndex    (const Int tileRectIndex) const { return m_top_left_tile_index    [tileRectIndex]; }$/;"	f	class:SEITempMotionConstrainedTileSets::TileSetData
topOffset	SEI.h	/^    Int topOffset;$/;"	m	struct:SEIPanScanRect::PanScanRect
transformNxN	TComTrQuant.cpp	/^Void TComTrQuant::transformNxN(       TComTU        & rTu,$/;"	f	class:TComTrQuant
transformSkipQuantOneSample	TComTrQuant.cpp	/^Void TComTrQuant::transformSkipQuantOneSample(TComTU &rTu, const ComponentID compID, const TCoeff resiDiff, TCoeff* pcCoeff, const UInt uiPos, const QpParam &cQP, const Bool bUseHalfRoundingPoint)$/;"	f	class:TComTrQuant
type	TComCodingStatistics.h	/^  TComCodingStatisticsType type;$/;"	m	class:TComCodingStatisticsClassType
typeAuxInfo	TypeDef.h	/^  Int typeAuxInfo; \/\/ BO: starting band index$/;"	m	struct:SAOOffset
typeIdc	TypeDef.h	/^  Int typeIdc;     \/\/ union of SAOModeMergeTypes and SAOModeNewTypes, depending on modeIdc.$/;"	m	struct:SAOOffset
u	TComSlice.h	/^  } u;$/;"	m	struct:ChromaQpAdj	typeref:union:ChromaQpAdj::__anon5
uiLog2WeightDenom	TComSlice.h	/^  UInt uiLog2WeightDenom;$/;"	m	struct:WPScalingParam
update	ContextModel.h	/^  Void update( Int binVal )$/;"	f	class:ContextModel
updateLPS	ContextModel.h	/^  Void updateLPS ()$/;"	f	class:ContextModel
updateMPS	ContextModel.h	/^  Void updateMPS ()$/;"	f	class:ContextModel
useDST	TComTU.cpp	/^Bool TComTU::useDST(const ComponentID compID)$/;"	f	class:TComTU
validProfiles	ProfileLevelTierFeatures.cpp	/^static const ProfileFeatures validProfiles[] =$/;"	v	file:
values	SEI.h	/^    TComSEIMasteringDisplay values;$/;"	m	class:SEIMasteringDisplayColourVolume
values	SEI.h	/^  TComSEIFisheyeVideoInfo values;$/;"	m	class:SEIFisheyeVideoInfo
values	TComCodingStatistics.h	/^      UInt values[512+1];$/;"	m	struct:TComCodingStatistics::StatLogValue
values	TComCodingStatistics.h	/^    StatLogValue values;$/;"	m	class:TComCodingStatistics
verFlip	SEI.h	/^  Bool verFlip;$/;"	m	class:SEIDisplayOrientation
verRange	SEI.h	/^    UInt verRange;$/;"	m	struct:SEIOmniViewport::OmniViewport
w	TComSlice.h	/^  Int  w;$/;"	m	struct:WPScalingParam
weightBidir	TComWeightPrediction.cpp	/^static inline Pel weightBidir( Int w0, Pel P0, Int w1, Pel P1, Int round, Int shift, Int offset, Int clipBD)$/;"	f	file:
weightUnidir	TComWeightPrediction.cpp	/^static inline Pel weightUnidir( Int w0, Pel P0, Int round, Int shift, Int offset, Int clipBD)$/;"	f	file:
whitePoint	TypeDef.h	/^  UShort    whitePoint[2];$/;"	m	struct:TComSEIMasteringDisplay
width	TComRectangle.h	/^  UInt width;$/;"	m	struct:TComRectangle
widthInGroups	TypeDef.h	/^        UInt             widthInGroups;$/;"	m	struct:TUEntropyCodingParameters
wpCur	TComRdCost.h	/^  const WPScalingParam *wpCur;           \/\/ weighted prediction scaling parameters for current ref$/;"	m	class:DistParam
write	TComBitCounter.h	/^  Void        write                 ( UInt \/*uiBits*\/, UInt uiNumberOfBits )  { m_uiBitCounter += uiNumberOfBits; }$/;"	f	class:TComBitCounter
write	TComBitStream.cpp	/^Void TComOutputBitstream::write   ( UInt uiBits, UInt uiNumberOfBits )$/;"	f	class:TComOutputBitstream
writeAlignOne	TComBitStream.cpp	/^Void TComOutputBitstream::writeAlignOne()$/;"	f	class:TComOutputBitstream
writeAlignOne	TComBitStream.h	/^  virtual Void        writeAlignOne         () {};$/;"	f	class:TComBitIf
writeAlignZero	TComBitStream.cpp	/^Void TComOutputBitstream::writeAlignZero()$/;"	f	class:TComOutputBitstream
writeAlignZero	TComBitStream.h	/^  virtual Void        writeAlignZero        () {};$/;"	f	class:TComBitIf
writeByteAlignment	TComBitStream.cpp	/^Void TComOutputBitstream::writeByteAlignment()$/;"	f	class:TComOutputBitstream
writeValueToStream	Debug.h	/^template <>                   inline Void writeValueToStream<SChar>(const SChar     &value, std::ostream &stream, const UInt outputWidth) { stream << std::setw(outputWidth) <<  Int(value); }$/;"	f
writeValueToStream	Debug.h	/^template <>                   inline Void writeValueToStream<UChar>(const UChar     &value, std::ostream &stream, const UInt outputWidth) { stream << std::setw(outputWidth) << UInt(value); }$/;"	f
writeValueToStream	Debug.h	/^template <typename ValueType> inline Void writeValueToStream       (const ValueType &value, std::ostream &stream, const UInt outputWidth) { stream << std::setw(outputWidth) <<      value;  }$/;"	f
x0	TComRectangle.h	/^  UInt x0;$/;"	m	struct:TComRectangle
xAddMVPCandUnscaled	TComDataCU.cpp	/^Bool TComDataCU::xAddMVPCandUnscaled( AMVPInfo &info, const RefPicList eRefPicList, const Int iRefIdx, const UInt uiPartUnitIdx, const MVP_DIR eDir ) const$/;"	f	class:TComDataCU
xAddMVPCandWithScaling	TComDataCU.cpp	/^Bool TComDataCU::xAddMVPCandWithScaling( AMVPInfo &info, const RefPicList eRefPicList, const Int iRefIdx, const UInt uiPartUnitIdx, const MVP_DIR eDir ) const$/;"	f	class:TComDataCU
xCalcBsIdx	TComLoopFilter.h	/^  UInt xCalcBsIdx                 ( TComDataCU* pcCU, UInt absZIdxInCtu, DeblockEdgeDir edgeDir, Int iEdgeIdx, Int iBaseUnitIdx, const struct TComRectangle *rect=NULL )$/;"	f	class:TComLoopFilter
xCalcDP	TComLoopFilter.cpp	/^__inline Int TComLoopFilter::xCalcDP( Pel* piSrc, Int iOffset)$/;"	f	class:TComLoopFilter
xCalcDQ	TComLoopFilter.cpp	/^__inline Int TComLoopFilter::xCalcDQ( Pel* piSrc, Int iOffset)$/;"	f	class:TComLoopFilter
xCalcHADs2x2	TComRdCost.cpp	/^Distortion TComRdCost::xCalcHADs2x2( const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep )$/;"	f	class:TComRdCost
xCalcHADs2x2w	TComRdCostWeightPrediction.cpp	/^Distortion xCalcHADs2x2w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep )$/;"	f
xCalcHADs4x4	TComRdCost.cpp	/^Distortion TComRdCost::xCalcHADs4x4( const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep )$/;"	f	class:TComRdCost
xCalcHADs4x4w	TComRdCostWeightPrediction.cpp	/^Distortion xCalcHADs4x4w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep )$/;"	f
xCalcHADs8x8	TComRdCost.cpp	/^Distortion TComRdCost::xCalcHADs8x8( const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep$/;"	f	class:TComRdCost
xCalcHADs8x8w	TComRdCostWeightPrediction.cpp	/^Distortion xCalcHADs8x8w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCur, Int iStrideOrg, Int iStrideCur, Int iStep )$/;"	f
xCalculateNextCtuRSAddr	TComPicSym.cpp	/^UInt TComPicSym::xCalculateNextCtuRSAddr( UInt currCtuRsAddr )$/;"	f	class:TComPicSym
xCheckIdenticalMotion	TComPrediction.cpp	/^Bool TComPrediction::xCheckIdenticalMotion ( TComDataCU* pcCU, UInt PartAddr )$/;"	f	class:TComPrediction
xDCPredFiltering	TComPrediction.cpp	/^Void TComPrediction::xDCPredFiltering( const Pel* pSrc, Int iSrcStride, Pel* pDst, Int iDstStride, Int iWidth, Int iHeight, ChannelType channelType )$/;"	f	class:TComPrediction
xDeQuant	TComTrQuant.cpp	/^Void TComTrQuant::xDeQuant(       TComTU        &rTu,$/;"	f	class:TComTrQuant
xDeblockCU	TComLoopFilter.cpp	/^Void TComLoopFilter::xDeblockCU( TComDataCU* pcCU, UInt uiAbsZorderIdx, UInt uiDepth, DeblockEdgeDir edgeDir )$/;"	f	class:TComLoopFilter
xDeriveCenterIdx	TComDataCU.cpp	/^Void TComDataCU::xDeriveCenterIdx( UInt uiPartIdx, UInt& ruiPartIdxCenter ) const$/;"	f	class:TComDataCU
xEdgeFilterChroma	TComLoopFilter.cpp	/^Void TComLoopFilter::xEdgeFilterChroma( TComDataCU* const pcCU, const UInt uiAbsZorderIdx, const UInt uiDepth, const DeblockEdgeDir edgeDir, const Int iEdge )$/;"	f	class:TComLoopFilter
xEdgeFilterLuma	TComLoopFilter.cpp	/^Void TComLoopFilter::xEdgeFilterLuma( TComDataCU* const pcCU, const UInt uiAbsZorderIdx, const UInt uiDepth, const DeblockEdgeDir edgeDir, const Int iEdge  )$/;"	f	class:TComLoopFilter
xFree	CommonDef.h	273;"	d
xFree	CommonDef.h	276;"	d
xGetBoundaryStrengthSingle	TComLoopFilter.cpp	/^Void TComLoopFilter::xGetBoundaryStrengthSingle ( TComDataCU* pCtu, DeblockEdgeDir edgeDir, UInt uiAbsPartIdx4x4BlockWithinCtu )$/;"	f	class:TComLoopFilter
xGetCodedLevel	TComTrQuant.cpp	/^__inline UInt TComTrQuant::xGetCodedLevel ( Double&          rd64CodedCost,          \/\/< reference to coded cost$/;"	f	class:TComTrQuant
xGetColMVP	TComDataCU.cpp	/^Bool TComDataCU::xGetColMVP( const RefPicList eRefPicList, const Int ctuRsAddr, const Int partUnitIdx, TComMv& rcMv, const Int refIdx ) const$/;"	f	class:TComDataCU
xGetDistScaleFactor	TComDataCU.cpp	/^Int TComDataCU::xGetDistScaleFactor(Int iCurrPOC, Int iCurrRefPOC, Int iColPOC, Int iColRefPOC)$/;"	f	class:TComDataCU
xGetExpGolombNumberOfBits	TComRdCost.cpp	/^UInt TComRdCost::xGetExpGolombNumberOfBits( Int iVal )$/;"	f	class:TComRdCost
xGetHADs	TComRdCost.cpp	/^Distortion TComRdCost::xGetHADs( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetHADsw	TComRdCostWeightPrediction.cpp	/^Distortion TComRdCostWeightPrediction::xGetHADsw( DistParam* pcDtParam )$/;"	f	class:TComRdCostWeightPrediction
xGetICRate	TComTrQuant.cpp	/^__inline Int TComTrQuant::xGetICRate         ( const UInt    uiAbsLevel,$/;"	f	class:TComTrQuant
xGetICost	TComTrQuant.cpp	/^__inline Double TComTrQuant::xGetICost        ( Double                          dRate         ) const$/;"	f	class:TComTrQuant
xGetIEPRate	TComTrQuant.cpp	/^__inline Double TComTrQuant::xGetIEPRate      (                                               ) const$/;"	f	class:TComTrQuant
xGetLongTermRefPic	TComSlice.cpp	/^TComPic* TComSlice::xGetLongTermRefPic(TComList<TComPic*>& rcListPic, Int poc, Bool pocHasMsb)$/;"	f	class:TComSlice
xGetRateLast	TComTrQuant.cpp	/^__inline Double TComTrQuant::xGetRateLast   ( const UInt                      uiPosX,$/;"	f	class:TComTrQuant
xGetRateSigCoef	TComTrQuant.cpp	/^__inline Double TComTrQuant::xGetRateSigCoef  ( UShort                          uiSignificance,$/;"	f	class:TComTrQuant
xGetRateSigCoeffGroup	TComTrQuant.cpp	/^__inline Double TComTrQuant::xGetRateSigCoeffGroup  ( UShort                    uiSignificanceCoeffGroup,$/;"	f	class:TComTrQuant
xGetRefPic	TComSlice.cpp	/^TComPic* TComSlice::xGetRefPic (TComList<TComPic*>& rcListPic, Int poc)$/;"	f	class:TComSlice
xGetSAD	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD12	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD12( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD16	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD16( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD16N	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD16N( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD24	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD24( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD32	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD32( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD4	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD4( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD48	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD48( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD64	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD64( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSAD8	TComRdCost.cpp	/^Distortion TComRdCost::xGetSAD8( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSADw	TComRdCostWeightPrediction.cpp	/^Distortion TComRdCostWeightPrediction::xGetSADw( DistParam* pcDtParam )$/;"	f	class:TComRdCostWeightPrediction
xGetSSE	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE16	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE16( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE16N	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE16N( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE32	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE32( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE4	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE4( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE64	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE64( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSE8	TComRdCost.cpp	/^Distortion TComRdCost::xGetSSE8( DistParam* pcDtParam )$/;"	f	class:TComRdCost
xGetSSEw	TComRdCostWeightPrediction.cpp	/^Distortion TComRdCostWeightPrediction::xGetSSEw( DistParam* pcDtParam )$/;"	f	class:TComRdCostWeightPrediction
xIT	TComTrQuant.cpp	/^Void TComTrQuant::xIT( const Int channelBitDepth, Bool useDST, TCoeff* plCoef, Pel* pResidual, UInt uiStride, Int iWidth, Int iHeight, const Int maxLog2TrDynamicRange )$/;"	f	class:TComTrQuant
xITr	TComTrQuant.cpp	/^Void xITr(Int bitDepth, TCoeff *coeff, Pel *block, UInt uiStride, UInt uiTrSize, Bool useDST, const Int maxLog2TrDynamicRange)$/;"	f
xITrMxN	TComTrQuant.cpp	/^Void xITrMxN(Int bitDepth, TCoeff *coeff, TCoeff *block, Int iWidth, Int iHeight, Bool useDST, const Int maxLog2TrDynamicRange)$/;"	f
xITransformSkip	TComTrQuant.cpp	/^Void TComTrQuant::xITransformSkip( TCoeff* plCoef, Pel* pResidual, UInt uiStride, TComTU &rTu, const ComponentID component )$/;"	f	class:TComTrQuant
xInitCtuTsRsAddrMaps	TComPicSym.cpp	/^Void TComPicSym::xInitCtuTsRsAddrMaps()$/;"	f	class:TComPicSym
xInitTiles	TComPicSym.cpp	/^Void TComPicSym::xInitTiles()$/;"	f	class:TComPicSym
xMalloc	CommonDef.h	272;"	d
xMalloc	CommonDef.h	275;"	d
xNeedRDOQ	TComTrQuant.cpp	/^Bool TComTrQuant::xNeedRDOQ( TComTU &rTu, TCoeff * pSrc, const ComponentID compID, const QpParam &cQP )$/;"	f	class:TComTrQuant
xPCMCURestoration	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::xPCMCURestoration ( TComDataCU* pcCU, UInt uiAbsZorderIdx, UInt uiDepth )$/;"	f	class:TComSampleAdaptiveOffset
xPCMRestoration	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::xPCMRestoration(TComPic* pcPic)$/;"	f	class:TComSampleAdaptiveOffset
xPCMSampleRestoration	TComSampleAdaptiveOffset.cpp	/^Void TComSampleAdaptiveOffset::xPCMSampleRestoration (TComDataCU* pcCU, UInt uiAbsZorderIdx, UInt uiDepth, const ComponentID compID)$/;"	f	class:TComSampleAdaptiveOffset
xParseScalingList	TComSlice.cpp	/^Bool TComScalingList::xParseScalingList(const std::string &fileName)$/;"	f	class:TComScalingList
xPelFilterChroma	TComLoopFilter.cpp	/^__inline Void TComLoopFilter::xPelFilterChroma( Pel* piSrc, Int iOffset, Int tc, Bool bPartPNoFilter, Bool bPartQNoFilter, const Int bitDepthChroma)$/;"	f	class:TComLoopFilter
xPelFilterLuma	TComLoopFilter.cpp	/^__inline Void TComLoopFilter::xPelFilterLuma( Pel* piSrc, Int iOffset, Int tc, Bool sw, Bool bPartPNoFilter, Bool bPartQNoFilter, Int iThrCut, Bool bFilterSecondP, Bool bFilterSecondQ, const Int bitDepthLuma)$/;"	f	class:TComLoopFilter
xPredInterBi	TComPrediction.cpp	/^Void TComPrediction::xPredInterBi ( TComDataCU* pcCU, UInt uiPartAddr, Int iWidth, Int iHeight, TComYuv* pcYuvPred )$/;"	f	class:TComPrediction
xPredInterBlk	TComPrediction.cpp	/^Void TComPrediction::xPredInterBlk(const ComponentID compID, TComDataCU *cu, TComPicYuv *refPic, UInt partAddr, TComMv *mv, Int width, Int height, TComYuv *dstPic, Bool bi, const Int bitDepth )$/;"	f	class:TComPrediction
xPredInterUni	TComPrediction.cpp	/^Void TComPrediction::xPredInterUni ( TComDataCU* pcCU, UInt uiPartAddr, Int iWidth, Int iHeight, RefPicList eRefPicList, TComYuv* pcYuvPred, Bool bi )$/;"	f	class:TComPrediction
xPredIntraAng	TComPrediction.cpp	/^Void TComPrediction::xPredIntraAng(       Int bitDepth,$/;"	f	class:TComPrediction
xPredIntraPlanar	TComPrediction.cpp	/^Void TComPrediction::xPredIntraPlanar( const Pel* pSrc, Int srcStride, Pel* rpDst, Int dstStride, UInt width, UInt height )$/;"	f	class:TComPrediction
xQuant	TComTrQuant.cpp	/^Void TComTrQuant::xQuant(       TComTU       &rTu,$/;"	f	class:TComTrQuant
xRateDistOptQuant	TComTrQuant.cpp	/^Void TComTrQuant::xRateDistOptQuant                 (       TComTU       &rTu,$/;"	f	class:TComTrQuant
xSetEdgefilterMultiple	TComLoopFilter.cpp	/^Void TComLoopFilter::xSetEdgefilterMultiple( TComDataCU*    pcCU,$/;"	f	class:TComLoopFilter
xSetEdgefilterPU	TComLoopFilter.cpp	/^Void TComLoopFilter::xSetEdgefilterPU( TComDataCU* pcCU, UInt uiAbsZorderIdx )$/;"	f	class:TComLoopFilter
xSetEdgefilterTU	TComLoopFilter.cpp	/^Void TComLoopFilter::xSetEdgefilterTU(  TComTU &rTu )$/;"	f	class:TComLoopFilter
xSetLoopfilterParam	TComLoopFilter.cpp	/^Void TComLoopFilter::xSetLoopfilterParam( TComDataCU* pcCU, UInt uiAbsZorderIdx )$/;"	f	class:TComLoopFilter
xSetScalingListDec	TComTrQuant.cpp	/^Void TComTrQuant::xSetScalingListDec(const TComScalingList &scalingList, UInt listId, UInt sizeId, Int qp)$/;"	f	class:TComTrQuant
xSetScalingListEnc	TComTrQuant.cpp	/^Void TComTrQuant::xSetScalingListEnc(TComScalingList *scalingList, UInt listId, UInt sizeId, Int qp)$/;"	f	class:TComTrQuant
xT	TComTrQuant.cpp	/^Void TComTrQuant::xT( const Int channelBitDepth, Bool useDST, Pel* piBlkResi, UInt uiStride, TCoeff* psCoeff, Int iWidth, Int iHeight, const Int maxLog2TrDynamicRange )$/;"	f	class:TComTrQuant
xTr	TComTrQuant.cpp	/^Void xTr(Int bitDepth, Pel *block, TCoeff *coeff, UInt uiStride, UInt uiTrSize, Bool useDST, const Int maxLog2TrDynamicRange)$/;"	f
xTrMxN	TComTrQuant.cpp	/^Void xTrMxN(Int bitDepth, TCoeff *block, TCoeff *coeff, Int iWidth, Int iHeight, Bool useDST, const Int maxLog2TrDynamicRange)$/;"	f
xTransformSkip	TComTrQuant.cpp	/^Void TComTrQuant::xTransformSkip( Pel* piBlkResi, UInt uiStride, TCoeff* psCoeff, TComTU &rTu, const ComponentID component )$/;"	f	class:TComTrQuant
xUseStrongFiltering	TComLoopFilter.cpp	/^__inline Bool TComLoopFilter::xUseStrongFiltering( Int offset, Int d, Int beta, Int tc, Pel* piSrc)$/;"	f	class:TComLoopFilter
xWeightedAverage	TComPrediction.cpp	/^Void TComPrediction::xWeightedAverage( TComYuv* pcYuvSrc0, TComYuv* pcYuvSrc1, Int iRefIdx0, Int iRefIdx1, UInt uiPartIdx, Int iWidth, Int iHeight, TComYuv* pcYuvDst, const BitDepths &clipBitDepths )$/;"	f	class:TComPrediction
xWeightedPredictionBi	TComWeightPrediction.cpp	/^Void TComWeightPrediction::xWeightedPredictionBi(       TComDataCU *const pcCU,$/;"	f	class:TComWeightPrediction
xWeightedPredictionUni	TComWeightPrediction.cpp	/^Void TComWeightPrediction::xWeightedPredictionUni(       TComDataCU *const pcCU,$/;"	f	class:TComWeightPrediction
xsetFlatScalingList	TComTrQuant.cpp	/^Void TComTrQuant::xsetFlatScalingList(UInt list, UInt size, Int qp)$/;"	f	class:TComTrQuant
y0	TComRectangle.h	/^  UInt y0;$/;"	m	struct:TComRectangle
~AccessUnit	AccessUnit.h	/^  ~AccessUnit()$/;"	f	class:AccessUnit
~ContextModel	ContextModel.h	/^  ~ContextModel ()                        {}$/;"	f	class:ContextModel
~ContextModel3DBuffer	ContextModel3DBuffer.h	/^  ~ContextModel3DBuffer () {}$/;"	f	class:ContextModel3DBuffer
~NALUnit	NAL.h	/^  virtual ~NALUnit() { }$/;"	f	struct:NALUnit
~ParameterSetManager	TComSlice.cpp	/^ParameterSetManager::~ParameterSetManager()$/;"	f	class:ParameterSetManager
~ParameterSetMap	TComSlice.h	/^  ~ParameterSetMap()$/;"	f	class:ParameterSetMap
~RegionalSEI	SEI.h	/^  ~RegionalSEI()$/;"	f	class:RegionalSEI
~SAOBlkParam	TComSampleAdaptiveOffset.cpp	/^SAOBlkParam::~SAOBlkParam()$/;"	f	class:SAOBlkParam
~SAOOffset	TComSampleAdaptiveOffset.cpp	/^SAOOffset::~SAOOffset()$/;"	f	class:SAOOffset
~SEI	SEI.h	/^  virtual ~SEI() {}$/;"	f	class:SEI
~SEIActiveParameterSets	SEI.h	/^  virtual ~SEIActiveParameterSets() {}$/;"	f	class:SEIActiveParameterSets
~SEIAlternativeTransferCharacteristics	SEI.h	/^  virtual ~SEIAlternativeTransferCharacteristics() {}$/;"	f	class:SEIAlternativeTransferCharacteristics
~SEIAmbientViewingEnvironment	SEI.h	/^  virtual ~SEIAmbientViewingEnvironment() { }$/;"	f	class:SEIAmbientViewingEnvironment
~SEIAnnotatedRegions	SEI.h	/^  virtual ~SEIAnnotatedRegions() {}$/;"	f	class:SEIAnnotatedRegions
~SEIBufferingPeriod	SEI.h	/^  virtual ~SEIBufferingPeriod() {}$/;"	f	class:SEIBufferingPeriod
~SEIChromaResamplingFilterHint	SEI.h	/^  virtual ~SEIChromaResamplingFilterHint() {}$/;"	f	class:SEIChromaResamplingFilterHint
~SEICodedRegionCompletion	SEI.h	/^  virtual ~SEICodedRegionCompletion() { }$/;"	f	class:SEICodedRegionCompletion
~SEIColourRemappingInfo	SEI.h	/^  ~SEIColourRemappingInfo() {}$/;"	f	class:SEIColourRemappingInfo
~SEIContentColourVolume	SEI.h	/^  virtual ~SEIContentColourVolume() {}$/;"	f	class:SEIContentColourVolume
~SEIContentLightLevelInfo	SEI.h	/^    virtual ~SEIContentLightLevelInfo() { }$/;"	f	class:SEIContentLightLevelInfo
~SEICubemapProjection	SEI.h	/^  virtual ~SEICubemapProjection() {}$/;"	f	class:SEICubemapProjection
~SEIDecodedPictureHash	SEI.h	/^  virtual ~SEIDecodedPictureHash() {}$/;"	f	class:SEIDecodedPictureHash
~SEIDecodingUnitInfo	SEI.h	/^  virtual ~SEIDecodingUnitInfo() {}$/;"	f	class:SEIDecodingUnitInfo
~SEIDeinterlaceFieldIdentification	SEI.h	/^    virtual ~SEIDeinterlaceFieldIdentification() {}$/;"	f	class:SEIDeinterlaceFieldIdentification
~SEIDependentRAPIndication	SEI.h	/^  virtual ~SEIDependentRAPIndication() { }$/;"	f	class:SEIDependentRAPIndication
~SEIDisplayOrientation	SEI.h	/^  virtual ~SEIDisplayOrientation() {}$/;"	f	class:SEIDisplayOrientation
~SEIEquirectangularProjection	SEI.h	/^  virtual ~SEIEquirectangularProjection() {}$/;"	f	class:SEIEquirectangularProjection
~SEIFillerPayload	SEI.h	/^  virtual ~SEIFillerPayload() {}$/;"	f	class:SEIFillerPayload
~SEIFilmGrainCharacteristics	SEI.h	/^  virtual ~SEIFilmGrainCharacteristics() {}$/;"	f	class:SEIFilmGrainCharacteristics
~SEIFilmGrainSynthesizer	SEIFilmGrainSynthesizer.cpp	/^SEIFilmGrainSynthesizer::~SEIFilmGrainSynthesizer()$/;"	f	class:SEIFilmGrainSynthesizer
~SEIFisheyeVideoInfo	SEI.h	/^  virtual ~SEIFisheyeVideoInfo() {}$/;"	f	class:SEIFisheyeVideoInfo
~SEIFramePacking	SEI.h	/^  virtual ~SEIFramePacking() {}$/;"	f	class:SEIFramePacking
~SEIGreenMetadataInfo	SEI.h	/^    virtual ~SEIGreenMetadataInfo() {}$/;"	f	class:SEIGreenMetadataInfo
~SEIKneeFunctionInfo	SEI.h	/^  virtual ~SEIKneeFunctionInfo() {}$/;"	f	class:SEIKneeFunctionInfo
~SEIMCTSExtractionInfoSet	SEI.h	/^    virtual ~SEIMCTSExtractionInfoSet() { }$/;"	f	class:SEIMCTSExtractionInfoSet
~SEIMasteringDisplayColourVolume	SEI.h	/^    virtual ~SEIMasteringDisplayColourVolume(){}$/;"	f	class:SEIMasteringDisplayColourVolume
~SEINoDisplay	SEI.h	/^  virtual ~SEINoDisplay() {}$/;"	f	class:SEINoDisplay
~SEIOmniViewport	SEI.h	/^  virtual ~SEIOmniViewport() {}$/;"	f	class:SEIOmniViewport
~SEIPanScanRect	SEI.h	/^  virtual ~SEIPanScanRect() {}$/;"	f	class:SEIPanScanRect
~SEIPictureSnapshot	SEI.h	/^  virtual ~SEIPictureSnapshot() {}$/;"	f	class:SEIPictureSnapshot
~SEIPictureTiming	SEI.h	/^  virtual ~SEIPictureTiming()$/;"	f	class:SEIPictureTiming
~SEIPostFilterHint	SEI.h	/^  virtual ~SEIPostFilterHint() {}$/;"	f	class:SEIPostFilterHint
~SEIProgressiveRefinementSegmentEnd	SEI.h	/^  virtual ~SEIProgressiveRefinementSegmentEnd() {}$/;"	f	class:SEIProgressiveRefinementSegmentEnd
~SEIProgressiveRefinementSegmentStart	SEI.h	/^  virtual ~SEIProgressiveRefinementSegmentStart() {}$/;"	f	class:SEIProgressiveRefinementSegmentStart
~SEIRecoveryPoint	SEI.h	/^  virtual ~SEIRecoveryPoint() {}$/;"	f	class:SEIRecoveryPoint
~SEIRegionRefreshInfo	SEI.h	/^  virtual ~SEIRegionRefreshInfo() {}$/;"	f	class:SEIRegionRefreshInfo
~SEIRegionWisePacking	SEI.h	/^  virtual ~SEIRegionWisePacking() {}$/;"	f	class:SEIRegionWisePacking
~SEIRegionalNesting	SEI.cpp	/^SEIRegionalNesting::~SEIRegionalNesting()$/;"	f	class:SEIRegionalNesting
~SEISOPDescription	SEI.h	/^  virtual ~SEISOPDescription() {}$/;"	f	class:SEISOPDescription
~SEIScalableNesting	SEI.h	/^  virtual ~SEIScalableNesting()$/;"	f	class:SEIScalableNesting
~SEISceneInfo	SEI.h	/^  virtual ~SEISceneInfo() {}$/;"	f	class:SEISceneInfo
~SEISegmentedRectFramePacking	SEI.h	/^  virtual ~SEISegmentedRectFramePacking() {}$/;"	f	class:SEISegmentedRectFramePacking
~SEIShutterIntervalInfo	SEI.h	/^  virtual ~SEIShutterIntervalInfo() {}$/;"	f	class:SEIShutterIntervalInfo
~SEISphereRotation	SEI.h	/^  virtual ~SEISphereRotation() {}$/;"	f	class:SEISphereRotation
~SEITempMotionConstrainedTileSets	SEI.h	/^  virtual ~SEITempMotionConstrainedTileSets() { }$/;"	f	class:SEITempMotionConstrainedTileSets
~SEITemporalLevel0Index	SEI.h	/^  virtual ~SEITemporalLevel0Index() {}$/;"	f	class:SEITemporalLevel0Index
~SEITimeCode	SEI.h	/^  virtual ~SEITimeCode(){}$/;"	f	class:SEITimeCode
~SEIToneMappingInfo	SEI.h	/^  virtual ~SEIToneMappingInfo() {}$/;"	f	class:SEIToneMappingInfo
~SEIUserDataRegistered	SEI.h	/^  virtual ~SEIUserDataRegistered() {}$/;"	f	class:SEIUserDataRegistered
~SEIUserDataUnregistered	SEI.h	/^  virtual ~SEIUserDataUnregistered() { }$/;"	f	class:SEIUserDataUnregistered
~TComBitCounter	TComBitCounter.h	/^  virtual ~TComBitCounter()   {}$/;"	f	class:TComBitCounter
~TComBitIf	TComBitStream.h	/^  virtual ~TComBitIf() {}$/;"	f	class:TComBitIf
~TComCUMvField	TComMotionInfo.h	/^  ~TComCUMvField() {}$/;"	f	class:TComCUMvField
~TComCodingStatistics	TComCodingStatistics.h	/^    ~TComCodingStatistics()$/;"	f	class:TComCodingStatistics
~TComDataCU	TComDataCU.cpp	/^TComDataCU::~TComDataCU()$/;"	f	class:TComDataCU
~TComHRD	TComSlice.h	/^  virtual ~TComHRD() {}$/;"	f	class:TComHRD
~TComInputBitstream	TComBitStream.h	/^  virtual ~TComInputBitstream() { }$/;"	f	class:TComInputBitstream
~TComInterpolationFilter	TComInterpolationFilter.h	/^  ~TComInterpolationFilter() {}$/;"	f	class:TComInterpolationFilter
~TComLoopFilter	TComLoopFilter.cpp	/^TComLoopFilter::~TComLoopFilter()$/;"	f	class:TComLoopFilter
~TComOutputBitstream	TComBitStream.cpp	/^TComOutputBitstream::~TComOutputBitstream()$/;"	f	class:TComOutputBitstream
~TComPPS	TComSlice.cpp	/^TComPPS::~TComPPS()$/;"	f	class:TComPPS
~TComPic	TComPic.cpp	/^TComPic::~TComPic()$/;"	f	class:TComPic
~TComPicSym	TComPicSym.cpp	/^TComPicSym::~TComPicSym()$/;"	f	class:TComPicSym
~TComPicYuv	TComPicYuv.cpp	/^TComPicYuv::~TComPicYuv()$/;"	f	class:TComPicYuv
~TComPrediction	TComPrediction.cpp	/^TComPrediction::~TComPrediction()$/;"	f	class:TComPrediction
~TComRPSList	TComSlice.h	/^  virtual                        ~TComRPSList()                                           { }$/;"	f	class:TComRPSList
~TComRdCost	TComRdCost.cpp	/^TComRdCost::~TComRdCost()$/;"	f	class:TComRdCost
~TComRefPicListModification	TComSlice.cpp	/^TComRefPicListModification::~TComRefPicListModification()$/;"	f	class:TComRefPicListModification
~TComReferencePictureSet	TComSlice.cpp	/^TComReferencePictureSet::~TComReferencePictureSet()$/;"	f	class:TComReferencePictureSet
~TComSPS	TComSlice.cpp	/^TComSPS::~TComSPS()$/;"	f	class:TComSPS
~TComSampleAdaptiveOffset	TComSampleAdaptiveOffset.cpp	/^TComSampleAdaptiveOffset::~TComSampleAdaptiveOffset()$/;"	f	class:TComSampleAdaptiveOffset
~TComScalingList	TComSlice.h	/^  virtual    ~TComScalingList()                                                 { }$/;"	f	class:TComScalingList
~TComSlice	TComSlice.cpp	/^TComSlice::~TComSlice()$/;"	f	class:TComSlice
~TComTile	TComPicSym.cpp	/^TComTile::~TComTile()$/;"	f	class:TComTile
~TComTrQuant	TComTrQuant.cpp	/^TComTrQuant::~TComTrQuant()$/;"	f	class:TComTrQuant
~TComVPS	TComSlice.cpp	/^TComVPS::~TComVPS()$/;"	f	class:TComVPS
~TComVUI	TComSlice.h	/^  virtual           ~TComVUI() {}$/;"	f	class:TComVUI
~TComYuv	TComYuv.cpp	/^TComYuv::~TComYuv()$/;"	f	class:TComYuv
